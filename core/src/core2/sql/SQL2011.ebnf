
(*  5 Lexical elements *)

(*  5.1     <SQL terminal character> *)

<space>
    : ' '
    ;

percent
    : '%'
    ;

ampersand
    : '&'
    ;

<quote>
    : '\''
    ;

<left_paren>
    : '('
    ;

<right_paren>
    : ')'
    ;

asterisk
    : '*'
    ;

plus_sign
    : '+'
    ;

<comma>
    : ','
    ;

minus_sign
    : '-'
    ;

<period>
    : '.'
    ;

solidus
    : '/'
    ;

<colon>
    : ':'
    ;

<semicolon>
    : ';'
    ;

less_than_operator
    : '<'
    ;

equals_operator
    : '='
    ;

greater_than_operator
    : '>'
    ;

question_mark
    : '?'
    ;

<left_bracket_or_trigraph>
    : <left_bracket>
    / <left_bracket_trigraph>
    ;

<right_bracket_or_trigraph>
    : <right_bracket>
    / <right_bracket_trigraph>
    ;

<left_bracket>
    : '['
    ;

<left_bracket_trigraph>
    : '??('
    ;

<right_bracket>
    : ']'
    ;

<right_bracket_trigraph>
    : '??)'
    ;

vertical_bar
    : '|'
    ;

<left_brace>
    : '{'
    ;

<right_brace>
    : '}'
    ;

(*  5.2     <token> and <separator> *)

regular_identifier
    : #'[a-zA-Z][a-zA-Z0-9_]*'
    ;

large_object_length_token
    : #'[0-9]+' multiplier
    ;

multiplier
    : 'K'
    / 'M'
    / 'G'
    / 'T'
    / 'P'
    ;

delimited_identifier
    : #'"(""|[^"])+"'
    ;

not_equals_operator
    : '<>'
    ;

greater_than_or_equals_operator
    : '>='
    ;

less_than_or_equals_operator
    : '<='
    ;

concatenation_operator
    : '||'
    ;

(*  5.3     <literal> *)

<literal>
    : signed_numeric_literal
    / general_literal
    ;

<unsigned_literal>
    : unsigned_numeric_literal
    / general_literal
    ;

<general_literal>
    : character_string_literal
    / binary_string_literal
    / datetime_literal
    / interval_literal
    / boolean_literal
    ;

character_string_literal
    : #'\'(\'\'|[^\'])*\''+
    ;

character_representation
    : #'(\'\'|[^\'])*'
    ;

binary_string_literal
    : #'X(\'[a-fA-F0-9\s]+\'\s*)+'
    ;

signed_numeric_literal
    : [ sign ] unsigned_numeric_literal
    ;

<unsigned_numeric_literal>
    : exact_numeric_literal
    / approximate_numeric_literal
    ;

exact_numeric_literal
    : unsigned_integer [ <period> [ unsigned_integer ] ]
    / <period> unsigned_integer
    ;

<sign>
    : plus_sign
    / minus_sign
    ;

approximate_numeric_literal
    : mantissa 'E' exponent
    ;

mantissa
    : exact_numeric_literal
    ;

exponent
    : signed_integer
    ;

signed_integer
    : [ sign ] unsigned_integer
    ;

unsigned_integer
    : #'[0-9]+'
    ;

<datetime_literal>
    : date_literal
    / time_literal
    / timestamp_literal
    ;

date_literal
    : 'DATE' date_string
    ;

time_literal
    : 'TIME' time_string
    ;

timestamp_literal
    : 'TIMESTAMP' timestamp_string
    ;

date_string
    : <quote> unquoted_date_string <quote>
    ;

time_string
    : <quote> unquoted_time_string <quote>
    ;

timestamp_string
    : <quote> unquoted_timestamp_string <quote>
    ;

time_zone_interval
    : sign hours_value <colon> minutes_value
    ;

date_value
    : years_value minus_sign months_value minus_sign days_value
    ;

time_value
    : hours_value <colon> minutes_value <colon> seconds_value
    ;

interval_literal
    : 'INTERVAL' [ sign ] interval_string interval_qualifier
    ;

interval_string
    : <quote> unquoted_interval_string <quote>
    ;

unquoted_date_string
    : date_value
    ;

unquoted_time_string
    : time_value [ time_zone_interval ]
    ;

unquoted_timestamp_string
    : unquoted_date_string <space> unquoted_time_string
    ;

unquoted_interval_string
    : [ sign ] ( year_month_literal / day_time_literal )
    ;

year_month_literal
    : years_value [ minus_sign months_value ]
    / months_value
    ;

<day_time_literal>
    : day_time_interval
    / time_interval
    ;

day_time_interval
    : days_value [ <space> hours_value [ <colon> minutes_value [ <colon> seconds_value ] ] ]
    ;

time_interval
    : hours_value [ <colon> minutes_value [ <colon> seconds_value ] ]
    / minutes_value [ <colon> seconds_value ]
    / seconds_value
    ;

years_value
    : datetime_value
    ;

months_value
    : datetime_value
    ;

days_value
    : datetime_value
    ;

hours_value
    : datetime_value
    ;

minutes_value
    : datetime_value
    ;

seconds_value
    : seconds_integer_value [ <period> [ seconds_fraction ] ]
    ;

seconds_integer_value
    : unsigned_integer
    ;

seconds_fraction
    : unsigned_integer
    ;

datetime_value
    : unsigned_integer
    ;

boolean_literal
    : 'TRUE'
    / 'FALSE'
    / 'UNKNOWN'
    ;

(*  5.4    Names and identifiers *)

identifier
    : actual_identifier
    ;

<actual_identifier>
    : regular_identifier
    / delimited_identifier
    ;

table_name
    : identifier
    ;

column_name
    : identifier
    ;

correlation_name
    : identifier
    ;

query_name
    : identifier
    ;

host_parameter_name
    : <colon> identifier
    ;

field_name
    : identifier
    ;

(*  6 Scalar expressions *)

(*  6.1     <data type> *)

<data_type>
    : predefined_type
    / row_type
    / collection_type
    ;

<predefined_type>
    : character_string_type
    / binary_string_type
    / numeric_type
    / boolean_type
    / datetime_type
    / interval_type
    ;

character_string_type
    : 'CHARACTER' [ <left_paren> character_length <right_paren> ]
    / 'CHAR' [ <left_paren> character_length <right_paren> ]
    / 'CHARACTER' 'VARYING' <left_paren> character_length <right_paren>
    / 'CHAR' 'VARYING' <left_paren> character_length <right_paren>
    / 'VARCHAR' <left_paren> character_length <right_paren>
    / character_large_object_type
    ;

character_large_object_type
    : 'CHARACTER' 'LARGE' 'OBJECT' [ <left_paren> character_large_object_length <right_paren> ]
    / 'CHAR' 'LARGE' 'OBJECT' [ <left_paren> character_large_object_length <right_paren> ]
    / 'CLOB' [ <left_paren> character_large_object_length <right_paren> ]
    ;

binary_string_type
    : 'BINARY' [ <left_paren> length <right_paren> ]
    / 'BINARY' 'VARYING' <left_paren> length <right_paren>
    / 'VARBINARY' <left_paren> length <right_paren>
    / binary_large_object_string_type
    ;

binary_large_object_string_type
    : 'BINARY' 'LARGE' 'OBJECT' [ <left_paren> large_object_length <right_paren> ]
    / 'BLOB' [ <left_paren> large_object_length <right_paren> ]
    ;

<numeric_type>
    : exact_numeric_type
    / approximate_numeric_type
    ;

exact_numeric_type
    : 'NUMERIC' [ <left_paren> precision [ <comma> scale ] <right_paren> ]
    / 'DECIMAL' [ <left_paren> precision [ <comma> scale ] <right_paren> ]
    / 'DEC' [ <left_paren> precision [ <comma> scale ] <right_paren> ]
    / 'SMALLINT'
    / 'INTEGER'
    / 'INT'
    / 'BIGINT'
    ;

approximate_numeric_type
    : 'FLOAT' [ <left_paren> precision <right_paren> ]
    / 'REAL'
    / 'DOUBLE' 'PRECISION'
    ;

length
    : unsigned_integer
    ;

character_length
    : length [ char_length_units ]
    ;

large_object_length
    : length [ multiplier ]
    / large_object_length_token
    ;

character_large_object_length
    : large_object_length [ char_length_units ]
    ;

char_length_units
    : 'CHARACTERS'
    / 'OCTETS'
    ;

precision
    : unsigned_integer
    ;

scale
    : unsigned_integer
    ;

boolean_type
    : 'BOOLEAN'
    ;

datetime_type
    : 'DATE'
    / 'TIME' [ <left_paren> time_precision <right_paren> ] [ with_or_without_time_zone ]
    / 'TIMESTAMP' [ <left_paren> timestamp_precision <right_paren> ] [ with_or_without_time_zone ]
    ;

with_or_without_time_zone
    : 'WITH' 'TIME' 'ZONE'
    / 'WITHOUT' 'TIME' 'ZONE'
    ;

time_precision
    : time_fractional_seconds_precision
    ;

timestamp_precision
    : time_fractional_seconds_precision
    ;

time_fractional_seconds_precision
    : unsigned_integer
    ;

interval_type
    : 'INTERVAL' interval_qualifier
    ;

row_type
    : 'ROW' row_type_body
    ;

row_type_body
    : <left_paren> field_definition [ ( <comma> field_definition )+ ] <right_paren>
    ;

collection_type
    : array_type
    ;

array_type
    : data_type 'ARRAY' [ left_bracket_or_trigraph maximum_cardinality right_bracket_or_trigraph ]
    ;

maximum_cardinality
    : unsigned_integer
    ;

(*  6.2        <field definition> *)

field_definition
    : field_name data_type
    ;

(*  6.3         <value expression primary> *)

<value_expression_primary>
    : parenthesized_value_expression
    / nonparenthesized_value_expression_primary
    ;

parenthesized_value_expression
    : <left_paren> value_expression <right_paren>
    ;

<nonparenthesized_value_expression_primary>
    : unsigned_value_specification
    / column_reference
    / set_function_specification
    / scalar_subquery
    / case_expression
    / cast_specification
    / field_reference
    / collection_value_constructor
    / array_element_reference
    ;

collection_value_constructor
    : array_value_constructor
    ;

(*  6.4     <value specification> and <target specification> *)

<unsigned_value_specification>
    : unsigned_literal
    / general_value_specification
    ;

<general_value_specification>
    : host_parameter_specification
    / dynamic_parameter_specification
    ;

<simple_value_specification>
    : literal
    / host_parameter_name
    ;

host_parameter_specification
    : host_parameter_name
    ;

dynamic_parameter_specification
    : question_mark
    ;

(*  6.5        <contextually typed value specification> *)

<contextually_typed_value_specification>
    : implicitly_typed_value_specification
    / default_specification
    ;

<implicitly_typed_value_specification>
    : null_specification
    / empty_specification
    ;

null_specification
    : 'NULL'
    ;

empty_specification
    : 'ARRAY' left_bracket_or_trigraph right_bracket_or_trigraph
    ;

default_specification
    : 'DEFAULT'
    ;

(*  6.6        <identifier chain> *)

identifier_chain
    : identifier [ ( <period> identifier )+ ]
    ;

basic_identifier_chain
    : identifier_chain
    ;

(*  6.7        <column reference> *)

column_reference
    : basic_identifier_chain
    ;

(*  6.9        <set function specification> *)

set_function_specification
    : aggregate_function
    ;

(*  6.12 <case expression> *)

<case_expression>
    : case_abbreviation
    / case_specification
    ;

case_abbreviation
    : 'NULLIF' <left_paren> value_expression <comma> value_expression <right_paren>
    / 'COALESCE' <left_paren> value_expression ( <comma> value_expression )+ <right_paren>
    ;

<case_specification>
    : simple_case
    / searched_case
    ;

simple_case
    : 'CASE' case_operand simple_when_clause+ [ else_clause ] 'END'
    ;

searched_case
    : 'CASE' searched_when_clause+ [ else_clause ] 'END'
    ;

simple_when_clause
    : 'WHEN' when_operand_list 'THEN' result
    ;

searched_when_clause
    : 'WHEN' search_condition 'THEN' result
    ;

else_clause
    : 'ELSE' result
    ;

<case_operand>
    : row_value_predicand
    / overlaps_predicate_part_1
    ;

when_operand_list
    : when_operand [ ( <comma> when_operand )+ ]
    ;

<when_operand>
    : row_value_predicand
    / comparison_predicate_part_2
    / between_predicate_part_2
    / in_predicate_part_2
    / character_like_predicate_part_2
    / octet_like_predicate_part_2
    / regex_like_predicate_part_2
    / null_predicate_part_2
    / quantified_comparison_predicate_part_2
    / match_predicate_part_2
    / overlaps_predicate_part_2
    / distinct_predicate_part_2
    ;

result
    : result_expression
    / 'NULL'
    ;

result_expression
    : value_expression
    ;

(*  6.13 <cast specification> *)

cast_specification
    : 'CAST' <left_paren> cast_operand 'AS' cast_target <right_paren>
    ;

<cast_operand>
    : value_expression
    / implicitly_typed_value_specification
    ;

cast_target
    : data_type
    ;

(*  6.15 <field reference> *)

field_reference
    : value_expression_primary <period> field_name
    ;

(*  6.16 <subtype treatment> *)

(*  6.24 <array element reference> *)

array_element_reference
    : array_value_expression left_bracket_or_trigraph numeric_value_expression right_bracket_or_trigraph
    ;

(*  6.26 <value expression> *)

<value_expression>
    : common_value_expression
    / boolean_value_expression
    / row_value_expression
    ;

<common_value_expression>
    : numeric_value_expression
    / string_value_expression
    / datetime_value_expression
    / interval_value_expression
    / collection_value_expression
    ;

collection_value_expression
    : array_value_expression
    ;

(*  6.27 <numeric value expression> *)

numeric_value_expression
    : term
    / numeric_value_expression plus_sign term
    / numeric_value_expression minus_sign term
    ;

term
    : factor
    / term asterisk factor
    / term solidus factor
    ;

factor
    : [ sign ] numeric_primary
    ;

<numeric_primary>
    : value_expression_primary
    / numeric_value_function
    ;

(*  6.28 <numeric value function> *)

<numeric_value_function>
    : position_expression
    / regex_occurrences_function
    / regex_position_expression
    / extract_expression
    / length_expression
    / cardinality_expression
    / max_cardinality_expression
    / absolute_value_expression
    / modulus_expression
    / trigonometric_function
    / general_logarithm_function
    / common_logarithm
    / natural_logarithm
    / exponential_function
    / power_function
    / square_root
    / floor_function
    / ceiling_function
    ;

<position_expression>
    : character_position_expression
    / binary_position_expression
    ;

regex_occurrences_function
    : 'OCCURRENCES_REGEX' <left_paren> xquery_pattern [ 'FLAG' xquery_option_flag ] 'IN' regex_subject_string [ 'FROM' start_position ] [ 'USING' char_length_units ] <right_paren>
    ;

xquery_pattern
    : character_value_expression
    ;

xquery_option_flag
    : character_value_expression
    ;

regex_subject_string
    : character_value_expression
    ;

regex_position_expression
    : 'POSITION_REGEX' <left_paren> [ regex_position_start_or_after ] xquery_pattern [ 'FLAG' xquery_option_flag ] 'IN' regex_subject_string [ 'FROM' start_position ] [ 'USING' char_length_units ] [ 'OCCURRENCE' regex_occurrence ] [ 'GROUP' regex_capture_group ] <right_paren>
    ;

regex_position_start_or_after
    : 'START'
    / 'AFTER'
    ;

regex_occurrence
    : numeric_value_expression
    ;

regex_capture_group
    : numeric_value_expression
    ;

character_position_expression
    : 'POSITION' <left_paren> character_value_expression_1 'IN' character_value_expression_2 [ 'USING' char_length_units ] <right_paren>
    ;

character_value_expression_1
    : character_value_expression
    ;

character_value_expression_2
    : character_value_expression
    ;

binary_position_expression
    : 'POSITION' <left_paren> binary_value_expression 'IN' binary_value_expression <right_paren>
    ;

<length_expression>
    : char_length_expression
    / octet_length_expression
    ;

char_length_expression
    : ( 'CHAR_LENGTH' / 'CHARACTER_LENGTH' ) <left_paren> character_value_expression [ 'USING' char_length_units ] <right_paren>
    ;

octet_length_expression
    : 'OCTET_LENGTH' <left_paren> string_value_expression <right_paren>
    ;

extract_expression
    : 'EXTRACT' <left_paren> extract_field 'FROM' extract_source <right_paren>
    ;

<extract_field>
    : primary_datetime_field
    / time_zone_field
    ;

time_zone_field
    : 'TIMEZONE_HOUR'
    / 'TIMEZONE_MINUTE'
    ;

<extract_source>
    : datetime_value_expression
    / interval_value_expression
    ;

cardinality_expression
    : 'CARDINALITY' <left_paren> collection_value_expression <right_paren>
    ;

max_cardinality_expression
    : 'ARRAY_MAX_CARDINALITY' <left_paren> array_value_expression <right_paren>
    ;

absolute_value_expression
    : 'ABS' <left_paren> numeric_value_expression <right_paren>
    ;

modulus_expression
    : 'MOD' <left_paren> numeric_value_expression_dividend <comma> numeric_value_expression_divisor <right_paren>
    ;

numeric_value_expression_dividend
    : numeric_value_expression
    ;

numeric_value_expression_divisor
    : numeric_value_expression
    ;

natural_logarithm
    : 'LN' <left_paren> numeric_value_expression <right_paren>
    ;

exponential_function
    : 'EXP' <left_paren> numeric_value_expression <right_paren>
    ;

power_function
    : 'POWER' <left_paren> numeric_value_expression_base <comma> numeric_value_expression_exponent <right_paren>
    ;

numeric_value_expression_base
    : numeric_value_expression
    ;

numeric_value_expression_exponent
    : numeric_value_expression
    ;

square_root
    : 'SQRT' <left_paren> numeric_value_expression <right_paren>
    ;

floor_function
    : 'FLOOR' <left_paren> numeric_value_expression <right_paren>
    ;

ceiling_function
    : ( 'CEIL' / 'CEILING' ) <left_paren> numeric_value_expression <right_paren>
    ;

(*  6.29 <string value expression> *)

<string_value_expression>
    : character_value_expression
    / binary_value_expression
    ;

<character_value_expression>
    : concatenation
    / character_factor
    ;

concatenation
    : character_value_expression concatenation_operator character_factor
    ;

character_factor
    : character_primary
    ;

<character_primary>
    : value_expression_primary
    / string_value_function
    ;

<binary_value_expression>
    : binary_concatenation
    / binary_factor
    ;

binary_factor
    : binary_primary
    ;

<binary_primary>
    : value_expression_primary
    / string_value_function
    ;

binary_concatenation
    : binary_value_expression concatenation_operator binary_factor
    ;

(*  6.30 <string value function> *)

<string_value_function>
    : character_value_function
    / binary_value_function
    ;

<character_value_function>
    : character_substring_function
    / regular_expression_substring_function
    / regex_substring_function
    / fold
    / regex_transliteration
    / trim_function
    / character_overlay_function
    ;

character_substring_function
    : 'SUBSTRING' <left_paren> character_value_expression 'FROM' start_position [ 'FOR' string_length ] [ 'USING' char_length_units ] <right_paren>
    ;

regular_expression_substring_function
    : 'SUBSTRING' <left_paren> character_value_expression 'SIMILAR' character_value_expression 'ESCAPE' escape_character <right_paren>
    ;

regex_substring_function
    : 'SUBSTRING_REGEX' <left_paren> xquery_pattern [ 'FLAG' xquery_option_flag ] 'IN' regex_subject_string [ 'FROM' start_position ] [ 'USING' char_length_units ] [ 'OCCURRENCE' regex_occurrence ] [ 'GROUP' regex_capture_group ] <right_paren>
    ;

fold
    : ( 'UPPER' / 'LOWER' ) <left_paren> character_value_expression <right_paren>
    ;

regex_transliteration
    : 'TRANSLATE_REGEX' <left_paren> xquery_pattern [ 'FLAG' xquery_option_flag ] 'IN' regex_subject_string [ 'WITH' xquery_replacement_string ] [ 'FROM' start_position ] [ 'USING' char_length_units ] [ 'OCCURRENCE' regex_transliteration_occurrence ] <right_paren>
    ;

xquery_replacement_string
    : character_value_expression
    ;

regex_transliteration_occurrence
    : regex_occurrence
    / 'ALL'
    ;

trim_function
    : 'TRIM' <left_paren> trim_operands <right_paren>
    ;

trim_operands
    : [ [ trim_specification ] [ trim_character ] 'FROM' ] trim_source
    ;

trim_source
    : character_value_expression
    ;

trim_specification
    : 'LEADING'
    / 'TRAILING'
    / 'BOTH'
    ;

trim_character
    : character_value_expression
    ;

character_overlay_function
    : 'OVERLAY' <left_paren> character_value_expression 'PLACING' character_value_expression 'FROM' start_position [ 'FOR' string_length ] [ 'USING' char_length_units ] <right_paren>
    ;

<binary_value_function>
    : binary_substring_function
    / binary_trim_function
    / binary_overlay_function
    ;

binary_substring_function
    : 'SUBSTRING' <left_paren> binary_value_expression 'FROM' start_position [ 'FOR' string_length ] <right_paren>
    ;

binary_trim_function
    : 'TRIM' <left_paren> binary_trim_operands <right_paren>
    ;

binary_trim_operands
    : [ [ trim_specification ] [ trim_octet ] 'FROM' ] binary_trim_source
    ;

binary_trim_source
    : binary_value_expression
    ;

trim_octet
    : binary_value_expression
    ;

binary_overlay_function
    : 'OVERLAY' <left_paren> binary_value_expression 'PLACING' binary_value_expression 'FROM' start_position [ 'FOR' string_length ] <right_paren>
    ;

start_position
    : numeric_value_expression
    ;

string_length
    : numeric_value_expression
    ;

(*  6.31 <datetime value expression> *)

datetime_value_expression
    : datetime_term
    / interval_value_expression plus_sign datetime_term
    / datetime_value_expression plus_sign interval_term
    / datetime_value_expression minus_sign interval_term
    ;

datetime_term
    : datetime_factor
    ;

datetime_factor
    : datetime_primary [ time_zone ]
    ;

<datetime_primary>
    : value_expression_primary
    / datetime_value_function
    ;

time_zone
    : 'AT' time_zone_specifier
    ;

time_zone_specifier
    : 'LOCAL'
    / 'TIME' 'ZONE' interval_primary
    ;

(*  6.32 <datetime value function> *)

<datetime_value_function>
    : current_date_value_function
    / current_time_value_function
    / current_timestamp_value_function
    / current_local_time_value_function
    / current_local_timestamp_value_function
    ;

current_date_value_function
    : 'CURRENT_DATE'
    ;

current_time_value_function
    : 'CURRENT_TIME' [ <left_paren> time_precision <right_paren> ]
    ;

current_local_time_value_function
    : 'LOCALTIME' [ <left_paren> time_precision <right_paren> ]
    ;

current_timestamp_value_function
    : 'CURRENT_TIMESTAMP' [ <left_paren> timestamp_precision <right_paren> ]
    ;

current_local_timestamp_value_function
    : 'LOCALTIMESTAMP' [ <left_paren> timestamp_precision <right_paren> ]
    ;

(*  6.33 <interval value expression> *)

interval_value_expression
    : interval_term
    / interval_value_expression_1 plus_sign interval_term_1
    / interval_value_expression_1 minus_sign interval_term_1
    / <left_paren> datetime_value_expression minus_sign datetime_term <right_paren> interval_qualifier
    ;

interval_term
    : interval_factor
    / interval_term_2 asterisk factor
    / interval_term_2 solidus factor
    / term asterisk interval_factor
    ;

interval_factor
    : [ sign ] interval_primary
    ;

interval_primary
    : value_expression_primary [ interval_qualifier ]
    / interval_value_function
    ;

interval_value_expression_1
    : interval_value_expression
    ;

interval_term_1
    : interval_term
    ;

interval_term_2
    : interval_term
    ;

(*  6.34 <interval value function> *)

interval_value_function
    : interval_absolute_value_function
    ;

interval_absolute_value_function
    : 'ABS' <left_paren> interval_value_expression <right_paren>
    ;

(*  6.35 <boolean value expression> *)

boolean_value_expression
    : boolean_term
    / boolean_value_expression 'OR' boolean_term
    ;

boolean_term
    : boolean_factor
    / boolean_term 'AND' boolean_factor
    ;

boolean_factor
    : [ 'NOT' ] boolean_test
    ;

boolean_test
    : boolean_primary [ 'IS' [ 'NOT' ] truth_value ]
    ;

truth_value
    : 'TRUE'
    / 'FALSE'
    / 'UNKNOWN'
    ;

<boolean_primary>
    : predicate
    / boolean_predicand
    ;

<boolean_predicand>
    : parenthesized_boolean_value_expression
    / nonparenthesized_value_expression_primary
    ;

parenthesized_boolean_value_expression
    : <left_paren> boolean_value_expression <right_paren>
    ;

(*  6.36 <array value expression> *)

<array_value_expression>
    : array_concatenation
    / array_primary
    ;

array_concatenation
    : array_value_expression_1 concatenation_operator array_primary
    ;

array_value_expression_1
    : array_value_expression
    ;

<array_primary>
    : array_value_function
    / value_expression_primary
    ;

(*  6.37 <array value function> *)

array_value_function
    : trim_array_function
    ;

trim_array_function
    : 'TRIM_ARRAY' <left_paren> array_value_expression <comma> numeric_value_expression <right_paren>
    ;

(*  6.38 <array value constructor> *)

<array_value_constructor>
    : array_value_constructor_by_enumeration
    / array_value_constructor_by_query
    ;

array_value_constructor_by_enumeration
    : 'ARRAY' left_bracket_or_trigraph array_element_list right_bracket_or_trigraph
    ;

array_element_list
    : array_element [ ( <comma> array_element )+ ]
    ;

array_element
    : value_expression
    ;

array_value_constructor_by_query
    : 'ARRAY' table_subquery
    ;

(*  6.41 <multiset value constructor> *)

(*  7 Query expressions *)

(*  7.1     <row value constructor> *)

<row_value_constructor>
    : common_value_expression
    / boolean_value_expression
    / explicit_row_value_constructor
    ;

explicit_row_value_constructor
    : <left_paren> row_value_constructor_element <comma> row_value_constructor_element_list <right_paren>
    / 'ROW' <left_paren> row_value_constructor_element_list <right_paren>
    / row_subquery
    ;

row_value_constructor_element_list
    : row_value_constructor_element [ ( <comma> row_value_constructor_element )+ ]
    ;

row_value_constructor_element
    : value_expression
    ;

contextually_typed_row_value_constructor
    : common_value_expression
    / boolean_value_expression
    / contextually_typed_value_specification
    / <left_paren> contextually_typed_value_specification <right_paren>
    / <left_paren> contextually_typed_row_value_constructor_element <comma> contextually_typed_row_value_constructor_element_list <right_paren>
    / 'ROW' <left_paren> contextually_typed_row_value_constructor_element_list <right_paren>
    ;

contextually_typed_row_value_constructor_element_list
    : contextually_typed_row_value_constructor_element [ ( <comma> contextually_typed_row_value_constructor_element )+ ]
    ;

<contextually_typed_row_value_constructor_element>
    : value_expression
    / contextually_typed_value_specification
    ;

<row_value_constructor_predicand>
    : common_value_expression
    / boolean_predicand
    / explicit_row_value_constructor
    ;

(*  7.2      <row value expression> *)

<row_value_expression>
    : row_value_special_case
    / explicit_row_value_constructor
    ;

<table_row_value_expression>
    : row_value_special_case
    / row_value_constructor
    ;

<contextually_typed_row_value_expression>
    : row_value_special_case
    / contextually_typed_row_value_constructor
    ;

<row_value_predicand>
    : row_value_special_case
    / row_value_constructor_predicand
    ;

row_value_special_case
    : nonparenthesized_value_expression_primary
    ;

(*  7.3      <table value constructor> *)

table_value_constructor
    : 'VALUES' row_value_expression_list
    ;

row_value_expression_list
    : table_row_value_expression [ ( <comma> table_row_value_expression )+ ]
    ;

contextually_typed_table_value_constructor
    : 'VALUES' contextually_typed_row_value_expression_list
    ;

contextually_typed_row_value_expression_list
    : contextually_typed_row_value_expression [ ( <comma> contextually_typed_row_value_expression )+ ]
    ;

(*  7.4      <table expression> *)

table_expression
    : from_clause [ where_clause ] [ group_by_clause ] [ having_clause ]
    ;

(*  7.5        <from clause> *)

from_clause
    : 'FROM' table_reference_list
    ;

table_reference_list
    : table_reference [ ( <comma> table_reference )+ ]
    ;

(*  7.6     <table reference> *)

<table_reference>
    : table_factor
    / joined_table
    ;

table_factor
    : table_primary
    ;

table_primary
    : table_or_query_name [ query_system_time_period_specification ] [ [ 'AS' ] correlation_name [ <left_paren> derived_column_list <right_paren> ] ]
    / derived_table [ 'AS' ] correlation_name [ <left_paren> derived_column_list <right_paren> ]
    / lateral_derived_table [ 'AS' ] correlation_name [ <left_paren> derived_column_list <right_paren> ]
    / collection_derived_table [ 'AS' ] correlation_name [ <left_paren> derived_column_list <right_paren> ]
    / table_function_derived_table [ 'AS' ] correlation_name [ <left_paren> derived_column_list <right_paren> ]
    / parenthesized_joined_table
    ;

query_system_time_period_specification
    : 'FOR' 'SYSTEM_TIME' 'AS' 'OF' point_in_time_1
    / 'FOR' 'SYSTEM_TIME' 'BETWEEN' [ 'ASYMMETRIC' / 'SYMMETRIC' ] point_in_time_1 'AND' point_in_time_2
    / 'FOR' 'SYSTEM_TIME' 'FROM' point_in_time_1 'TO' point_in_time_2
    ;

point_in_time_1
    : point_in_time
    ;

point_in_time_2
    : point_in_time
    ;

point_in_time
    : datetime_value_expression
    ;

lateral_derived_table
    : 'LATERAL' table_subquery
    ;

collection_derived_table
    : 'UNNEST' <left_paren> collection_value_expression [ ( <comma> collection_value_expression )+ ] <right_paren> [ 'WITH' 'ORDINALITY' ]
    ;

table_function_derived_table
    : 'TABLE' <left_paren> collection_value_expression <right_paren>
    ;

derived_table
    : table_subquery
    ;

<table_or_query_name>
    : table_name
    / query_name
    ;

derived_column_list
    : column_name_list
    ;

column_name_list
    : column_name [ ( <comma> column_name )+ ]
    ;

parenthesized_joined_table
    : <left_paren> parenthesized_joined_table <right_paren>
    / <left_paren> joined_table <right_paren>
    ;

(*  7.7     <joined table> *)

<joined_table>
    : cross_join
    / qualified_join
    / natural_join
    ;

cross_join
    : table_reference 'CROSS' 'JOIN' table_factor
    ;

qualified_join
    : table_reference [ join_type ] 'JOIN' table_reference join_specification
    ;

natural_join
    : table_reference 'NATURAL' [ join_type ] 'JOIN' table_factor
    ;

<join_specification>
    : join_condition
    / named_columns_join
    ;

join_condition
    : 'ON' search_condition
    ;

named_columns_join
    : 'USING' <left_paren> join_column_list <right_paren>
    ;

join_type
    : 'INNER'
    / outer_join_type [ 'OUTER' ]
    ;

outer_join_type
    : 'LEFT'
    / 'RIGHT'
    / 'FULL'
    ;

join_column_list
    : column_name_list
    ;

(*  7.8      <where clause> *)

where_clause
    : 'WHERE' search_condition
    ;

(*  7.9     <group by clause> *)

group_by_clause
    : 'GROUP' 'BY' [ set_quantifier ] grouping_element_list
    ;

grouping_element_list
    : grouping_element [ ( <comma> grouping_element )+ ]
    ;

<grouping_element>
    : ordinary_grouping_set
    / empty_grouping_set
    ;

ordinary_grouping_set
    : grouping_column_reference
    / <left_paren> grouping_column_reference_list <right_paren>
    ;

grouping_column_reference
    : column_reference
    ;

grouping_column_reference_list
    : grouping_column_reference [ ( <comma> grouping_column_reference )+ ]
    ;

empty_grouping_set
    : <left_paren> <right_paren>
    ;

(*  7.10 <having clause> *)

having_clause
    : 'HAVING' search_condition
    ;

(*  7.12 <query specification> *)

query_specification
    : 'SELECT' [ set_quantifier ] select_list table_expression
    ;

select_list
    : asterisk
    / select_sublist [ ( <comma> select_sublist )+ ]
    ;

<select_sublist>
    : derived_column
    / qualified_asterisk
    ;

qualified_asterisk
    : asterisked_identifier_chain <period> asterisk
    / all_fields_reference
    ;

asterisked_identifier_chain
    : asterisked_identifier [ ( <period> asterisked_identifier )+ ]
    ;

asterisked_identifier
    : identifier
    ;

derived_column
    : value_expression [ as_clause ]
    ;

as_clause
    : [ 'AS' ] column_name
    ;

all_fields_reference
    : value_expression_primary <period> asterisk [ 'AS' <left_paren> all_fields_column_name_list <right_paren> ]
    ;

all_fields_column_name_list
    : column_name_list
    ;

(*  7.13 <query expression> *)

query_expression
    : [ with_clause ] query_expression_body [ order_by_clause ] [ result_offset_clause ] [ fetch_first_clause ]
    ;

with_clause
    : 'WITH' [ 'RECURSIVE' ] with_list
    ;

with_list
    : with_list_element [ ( <comma> with_list_element )+ ]
    ;

with_list_element
    : query_name [ <left_paren> with_column_list <right_paren> ] 'AS' table_subquery
    ;

with_column_list
    : column_name_list
    ;

query_expression_body
    : query_term
    / query_expression_body 'UNION' [ 'ALL' / 'DISTINCT' ] [ corresponding_spec ] query_term
    / query_expression_body 'EXCEPT' [ 'ALL' / 'DISTINCT' ] [ corresponding_spec ] query_term
    ;

query_term
    : query_primary
    / query_term 'INTERSECT' [ 'ALL' / 'DISTINCT' ] [ corresponding_spec ] query_primary
    ;

query_primary
    : simple_table
    / <left_paren> query_expression_body [ order_by_clause ] [ result_offset_clause ] [ fetch_first_clause ] <right_paren>
    ;

<simple_table>
    : query_specification
    / table_value_constructor
    / explicit_table
    ;

explicit_table
    : 'TABLE' table_or_query_name
    ;

corresponding_spec
    : 'CORRESPONDING' [ 'BY' <left_paren> corresponding_column_list <right_paren> ]
    ;

corresponding_column_list
    : column_name_list
    ;

order_by_clause
    : 'ORDER' 'BY' sort_specification_list
    ;

result_offset_clause
    : 'OFFSET' offset_row_count ( 'ROW' / 'ROWS' )
    ;

fetch_first_clause
    : 'FETCH' ( 'FIRST' / 'NEXT' ) [ fetch_first_quantity ] ( 'ROW' / 'ROWS' ) ( 'ONLY' / 'WITH' 'TIES' )
    ;

fetch_first_quantity
    : fetch_first_row_count
    ;

offset_row_count
    : simple_value_specification
    ;

fetch_first_row_count
    : simple_value_specification
    ;

(*  7.15 <subquery> *)

scalar_subquery
    : subquery
    ;

row_subquery
    : subquery
    ;

table_subquery
    : subquery
    ;

subquery
    : <left_paren> query_expression <right_paren>
    ;

(*  8 Predicates *)

(*  8.1      <predicate> *)

<predicate>
    : comparison_predicate
    / between_predicate
    / in_predicate
    / like_predicate
    / regex_like_predicate
    / null_predicate
    / quantified_comparison_predicate
    / exists_predicate
    / unique_predicate
    / match_predicate
    / overlaps_predicate
    / distinct_predicate
    / period_predicate
    ;

(*  8.2        <comparison predicate> *)

comparison_predicate
    : row_value_predicand comparison_predicate_part_2
    ;

comparison_predicate_part_2
    : comp_op row_value_predicand
    ;

<comp_op>
    : equals_operator
    / not_equals_operator
    / less_than_operator
    / greater_than_operator
    / less_than_or_equals_operator
    / greater_than_or_equals_operator
    ;

(*  8.3      <between predicate> *)

between_predicate
    : row_value_predicand between_predicate_part_2
    ;

between_predicate_part_2
    : [ 'NOT' ] 'BETWEEN' [ 'ASYMMETRIC' / 'SYMMETRIC' ] row_value_predicand 'AND' row_value_predicand
    ;

(*  8.4      <in predicate> *)

in_predicate
    : row_value_predicand in_predicate_part_2
    ;

in_predicate_part_2
    : [ 'NOT' ] 'IN' in_predicate_value
    ;

in_predicate_value
    : table_subquery
    / <left_paren> in_value_list <right_paren>
    ;

in_value_list
    : row_value_expression [ ( <comma> row_value_expression )+ ]
    ;

(*  8.5        <like predicate> *)

<like_predicate>
    : character_like_predicate
    / octet_like_predicate
    ;

character_like_predicate
    : row_value_predicand character_like_predicate_part_2
    ;

character_like_predicate_part_2
    : [ 'NOT' ] 'LIKE' character_pattern [ 'ESCAPE' escape_character ]
    ;

character_pattern
    : character_value_expression
    ;

escape_character
    : character_value_expression
    ;

octet_like_predicate
    : row_value_predicand octet_like_predicate_part_2
    ;

octet_like_predicate_part_2
    : [ 'NOT' ] 'LIKE' octet_pattern [ 'ESCAPE' escape_octet ]
    ;

octet_pattern
    : binary_value_expression
    ;

escape_octet
    : binary_value_expression
    ;

(*  8.7        <regex like predicate> *)

regex_like_predicate
    : row_value_predicand regex_like_predicate_part_2
    ;

regex_like_predicate_part_2
    : [ 'NOT' ] 'LIKE_REGEX' xquery_pattern [ 'FLAG' xquery_option_flag ]
    ;

(*  8.8        <null predicate> *)

null_predicate
    : row_value_predicand null_predicate_part_2
    ;

null_predicate_part_2
    : 'IS' [ 'NOT' ] 'NULL'
    ;

(*  8.9        <quantified comparison predicate> *)

quantified_comparison_predicate
    : row_value_predicand quantified_comparison_predicate_part_2
    ;

quantified_comparison_predicate_part_2
    : comp_op quantifier table_subquery
    ;

<quantifier>
    : all
    / some
    ;

all
    : 'ALL'
    ;

some
    : 'SOME'
    / 'ANY'
    ;

(*  8.10 <exists predicate> *)

exists_predicate
    : 'EXISTS' table_subquery
    ;

(*  8.11 <unique predicate> *)

unique_predicate
    : 'UNIQUE' table_subquery
    ;

(*  8.13 <match predicate> *)

match_predicate
    : row_value_predicand match_predicate_part_2
    ;

match_predicate_part_2
    : 'MATCH' [ 'UNIQUE' ] [ 'SIMPLE' / 'PARTIAL' / 'FULL' ] table_subquery
    ;

(*  8.14 <overlaps predicate> *)

overlaps_predicate
    : overlaps_predicate_part_1 overlaps_predicate_part_2
    ;

overlaps_predicate_part_1
    : row_value_predicand_1
    ;

overlaps_predicate_part_2
    : 'OVERLAPS' row_value_predicand_2
    ;

row_value_predicand_1
    : row_value_predicand
    ;

row_value_predicand_2
    : row_value_predicand
    ;

(*  8.15 <distinct predicate> *)

distinct_predicate
    : row_value_predicand_3 distinct_predicate_part_2
    ;

distinct_predicate_part_2
    : 'IS' [ 'NOT' ] 'DISTINCT' 'FROM' row_value_predicand_4
    ;

row_value_predicand_3
    : row_value_predicand
    ;

row_value_predicand_4
    : row_value_predicand
    ;

(*  8.20 <period predicate> *)

<period_predicate>
    : period_overlaps_predicate
    / period_equals_predicate
    / period_contains_predicate
    / period_precedes_predicate
    / period_succeeds_predicate
    / period_immediately_precedes_predicate
    / period_immediately_succeeds_predicate
    ;

period_overlaps_predicate
    : period_predicand_1 period_overlaps_predicate_part_2
    ;

period_overlaps_predicate_part_2
    : 'OVERLAPS' period_predicand_2
    ;

period_predicand_1
    : period_predicand
    ;

period_predicand_2
    : period_predicand
    ;

period_predicand
    : period_reference
    / 'PERIOD' <left_paren> period_start_value <comma> period_end_value <right_paren>
    ;

period_reference
    : basic_identifier_chain
    ;

period_start_value
    : datetime_value_expression
    ;

period_end_value
    : datetime_value_expression
    ;

period_equals_predicate
    : period_predicand_1 period_equals_predicate_part_2
    ;

period_equals_predicate_part_2
    : 'EQUALS' period_predicand_2
    ;

period_contains_predicate
    : period_predicand_1 period_contains_predicate_part_2
    ;

period_contains_predicate_part_2
    : 'CONTAINS' period_or_point_in_time_predicand
    ;

<period_or_point_in_time_predicand>
    : period_predicand
    / datetime_value_expression
    ;

period_precedes_predicate
    : period_predicand_1 period_precedes_predicate_part_2
    ;

period_precedes_predicate_part_2
    : 'PRECEDES' period_predicand_2
    ;

period_succeeds_predicate
    : period_predicand_1 period_succeeds_predicate_part_2
    ;

period_succeeds_predicate_part_2
    : 'SUCCEEDS' period_predicand_2
    ;

period_immediately_precedes_predicate
    : period_predicand_1 period_immediately_precedes_predicate_part_2
    ;

period_immediately_precedes_predicate_part_2
    : 'IMMEDIATELY' 'PRECEDES' period_predicand_2
    ;

period_immediately_succeeds_predicate
    : period_predicand_1 period_immediately_succeeds_predicate_part_2
    ;

period_immediately_succeeds_predicate_part_2
    : 'IMMEDIATELY' 'SUCCEEDS' period_predicand_2
    ;

(*  8.21 <search condition> *)

search_condition
    : boolean_value_expression
    ;

(*  10 Additional common elements *)

(*  10.1 <interval qualifier> *)

interval_qualifier
    : start_field 'TO' end_field
    / single_datetime_field
    ;

start_field
    : non_second_primary_datetime_field [ <left_paren> interval_leading_field_precision <right_paren> ]
    ;

end_field
    : non_second_primary_datetime_field
    / 'SECOND' [ <left_paren> interval_fractional_seconds_precision <right_paren> ]
    ;

single_datetime_field
    : non_second_primary_datetime_field [ <left_paren> interval_leading_field_precision <right_paren> ]
    / 'SECOND' [ <left_paren> interval_leading_field_precision [ <comma> interval_fractional_seconds_precision ] <right_paren> ]
    ;

primary_datetime_field
    : non_second_primary_datetime_field
    / 'SECOND'
    ;

non_second_primary_datetime_field
    : 'YEAR'
    / 'MONTH'
    / 'DAY'
    / 'HOUR'
    / 'MINUTE'
    ;

interval_fractional_seconds_precision
    : unsigned_integer
    ;

interval_leading_field_precision
    : unsigned_integer
    ;

(*  10.9 <aggregate function> *)

aggregate_function
    : 'COUNT' <left_paren> asterisk <right_paren>
    / general_set_function
    / array_aggregate_function
    ;

general_set_function
    : set_function_type <left_paren> [ set_quantifier ] value_expression <right_paren>
    ;

set_function_type
    : computational_operation
    ;

computational_operation
    : 'AVG'
    / 'MAX'
    / 'MIN'
    / 'SUM'
    / 'EVERY'
    / 'ANY'
    / 'SOME'
    / 'COUNT'
    / 'STDDEV_POP'
    / 'STDDEV_SAMP'
    / 'VAR_SAMP'
    / 'VAR_POP'
    ;

set_quantifier
    : 'DISTINCT'
    / 'ALL'
    ;

array_aggregate_function
    : 'ARRAY_AGG' <left_paren> value_expression [ 'ORDER' 'BY' sort_specification_list ] <right_paren>
    ;

(*  10.10 <sort specification list> *)

sort_specification_list
    : sort_specification [ ( <comma> sort_specification )+ ]
    ;

sort_specification
    : sort_key [ ordering_specification ] [ null_ordering ]
    ;

sort_key
    : value_expression
    ;

ordering_specification
    : 'ASC'
    / 'DESC'
    ;

null_ordering
    : 'NULLS' 'FIRST'
    / 'NULLS' 'LAST'
    ;

(*  11 Schema definition and manipulation *)

(*  11.3 <table definition> *)

application_time_period_name
    : identifier
    ;

(*  14 Data manipulation *)

(*  14.8 <delete statement: positioned> *)

target_table
    : table_name
    / 'ONLY' <left_paren> table_name <right_paren>
    ;

(*  14.9 <delete statement: searched> *)

delete_statement__searched
    : 'DELETE' 'FROM' target_table [ 'FOR' 'PORTION' 'OF' application_time_period_name 'FROM' point_in_time_1 'TO' point_in_time_2 ] [ [ 'AS' ] correlation_name ] [ 'WHERE' search_condition ]
    ;

(*  14.10 <truncate table statement> *)

truncate_table_statement
    : 'TRUNCATE' 'TABLE' target_table [ identity_column_restart_option ]
    ;

identity_column_restart_option
    : 'CONTINUE' 'IDENTITY'
    / 'RESTART' 'IDENTITY'
    ;

(*  14.11 <insert statement> *)

insert_statement
    : 'INSERT' 'INTO' insertion_target insert_columns_and_source
    ;

insertion_target
    : table_name
    ;

<insert_columns_and_source>
    : from_subquery
    / from_constructor
    / from_default
    ;

from_subquery
    : [ <left_paren> insert_column_list <right_paren> ] [ override_clause ] query_expression
    ;

from_constructor
    : [ <left_paren> insert_column_list <right_paren> ] [ override_clause ] contextually_typed_table_value_constructor
    ;

override_clause
    : 'OVERRIDING' 'USER' 'VALUE'
    / 'OVERRIDING' 'SYSTEM' 'VALUE'
    ;

from_default
    : 'DEFAULT' 'VALUES'
    ;

insert_column_list
    : column_name_list
    ;

(*  14.12 <merge statement> *)

merge_statement
    : 'MERGE' 'INTO' target_table [ [ 'AS' ] merge_correlation_name ] 'USING' table_reference 'ON' search_condition merge_operation_specification
    ;

merge_correlation_name
    : correlation_name
    ;

merge_operation_specification
    : merge_when_clause+
    ;

<merge_when_clause>
    : merge_when_matched_clause
    / merge_when_not_matched_clause
    ;

merge_when_matched_clause
    : 'WHEN' 'MATCHED' [ 'AND' search_condition ] 'THEN' merge_update_or_delete_specification
    ;

<merge_update_or_delete_specification>
    : merge_update_specification
    / merge_delete_specification
    ;

merge_when_not_matched_clause
    : 'WHEN' 'NOT' 'MATCHED' [ 'AND' search_condition ] 'THEN' merge_insert_specification
    ;

merge_update_specification
    : 'UPDATE' 'SET' set_clause_list
    ;

merge_delete_specification
    : 'DELETE'
    ;

merge_insert_specification
    : 'INSERT' [ <left_paren> insert_column_list <right_paren> ] [ override_clause ] 'VALUES' merge_insert_value_list
    ;

merge_insert_value_list
    : <left_paren> merge_insert_value_element [ ( <comma> merge_insert_value_element )+ ] <right_paren>
    ;

<merge_insert_value_element>
    : value_expression
    / contextually_typed_value_specification
    ;

(*  14.14 <update statement: searched> *)

update_statement__searched
    : 'UPDATE' target_table [ 'FOR' 'PORTION' 'OF' application_time_period_name 'FROM' point_in_time_1 'TO' point_in_time_2 ] [ [ 'AS' ] correlation_name ] 'SET' set_clause_list [ 'WHERE' search_condition ]
    ;

(*  14.15 <set clause list> *)

set_clause_list
    : set_clause [ ( <comma> set_clause )+ ]
    ;

set_clause
    : multiple_column_assignment
    / set_target equals_operator update_source
    ;

set_target
    : update_target
    ;

multiple_column_assignment
    : set_target_list equals_operator assigned_row
    ;

set_target_list
    : <left_paren> set_target [ ( <comma> set_target )+ ] <right_paren>
    ;

assigned_row
    : contextually_typed_row_value_expression
    ;

update_target
    : object_column
    / object_column left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph
    ;

object_column
    : column_name
    ;

<update_source>
    : value_expression
    / contextually_typed_value_specification
    ;

(*  22 Direct invocation of SQL *)

(*  22.1 <direct SQL statement> *)

direct_sql_statement
    : directly_executable_statement <semicolon>
    ;

directly_executable_statement
    : direct_sql_data_statement
    ;

<direct_sql_data_statement>
    : delete_statement__searched
    / direct_select_statement__multiple_rows
    / insert_statement
    / update_statement__searched
    / truncate_table_statement
    / merge_statement
    ;

(*  22.2 <direct select statement: multiple rows> *)

direct_select_statement__multiple_rows
    : query_expression
    ;

(* SQL:2016 6.30 <numeric value function> *)

trigonometric_function
    : trigonometric_function_name left_paren numeric_value_expression right_paren
    ;

trigonometric_function_name
    : 'SIN'
    / 'COS'
    / 'TAN'
    / 'SINH'
    / 'COSH'
    / 'TANH'
    / 'ASIN'
    / 'ACOS'
    / 'ATAN'
    ;

general_logarithm_function
    : 'LOG' left_paren general_logarithm_base <comma> general_logarithm_argument right_paren
    ;

general_logarithm_base
    : numeric_value_expression
    ;

general_logarithm_argument
    : numeric_value_expression
    ;

common_logarithm
    : 'LOG10' left_paren numeric_value_expression right_paren
    ;