// Generated from /home/hraberg/dev/crux-rnd/core2/core/src/core2/sql/SQL2011.g by ANTLR 4.9.2
package core2.sql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQL2011Parser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T__172=173, 
		T__173=174, T__174=175, T__175=176, T__176=177, T__177=178, T__178=179, 
		T__179=180, T__180=181, T__181=182, T__182=183, T__183=184, T__184=185, 
		T__185=186, T__186=187, T__187=188, T__188=189, T__189=190, T__190=191, 
		T__191=192, T__192=193, T__193=194, T__194=195, T__195=196, T__196=197, 
		T__197=198, T__198=199, T__199=200, T__200=201, T__201=202, T__202=203, 
		T__203=204, T__204=205, T__205=206, T__206=207, T__207=208, T__208=209, 
		T__209=210, T__210=211, T__211=212, T__212=213, T__213=214, T__214=215, 
		T__215=216, T__216=217, T__217=218, T__218=219, T__219=220, T__220=221, 
		T__221=222, T__222=223, T__223=224, T__224=225, T__225=226, T__226=227, 
		T__227=228, T__228=229, T__229=230, T__230=231, T__231=232, T__232=233, 
		T__233=234, T__234=235, T__235=236, T__236=237, T__237=238, T__238=239, 
		T__239=240, T__240=241, T__241=242, T__242=243, T__243=244, T__244=245, 
		T__245=246, T__246=247, T__247=248, T__248=249, T__249=250, T__250=251, 
		T__251=252, T__252=253, T__253=254, T__254=255, T__255=256, T__256=257, 
		T__257=258, T__258=259, T__259=260, T__260=261, T__261=262, T__262=263, 
		T__263=264, T__264=265, T__265=266, T__266=267, T__267=268, T__268=269, 
		T__269=270, T__270=271, T__271=272, T__272=273, T__273=274, T__274=275, 
		T__275=276, T__276=277, T__277=278, T__278=279, T__279=280, T__280=281, 
		T__281=282, T__282=283, T__283=284, T__284=285, T__285=286, T__286=287, 
		T__287=288, T__288=289, T__289=290, T__290=291, T__291=292, T__292=293, 
		T__293=294, T__294=295, T__295=296, T__296=297, T__297=298, T__298=299, 
		T__299=300, T__300=301, T__301=302, T__302=303, T__303=304, T__304=305, 
		T__305=306, T__306=307, T__307=308, T__308=309, T__309=310, T__310=311, 
		T__311=312, T__312=313, T__313=314, T__314=315, T__315=316, T__316=317, 
		T__317=318, T__318=319, T__319=320, T__320=321, T__321=322, T__322=323, 
		T__323=324, T__324=325, T__325=326, T__326=327, T__327=328, T__328=329, 
		T__329=330, T__330=331, T__331=332, T__332=333, T__333=334, T__334=335, 
		T__335=336, T__336=337, T__337=338, T__338=339, T__339=340, T__340=341, 
		T__341=342, T__342=343, T__343=344, T__344=345, T__345=346, T__346=347, 
		T__347=348, T__348=349, T__349=350, T__350=351, T__351=352, T__352=353, 
		T__353=354, DOUBLE_QUOTE=355, PERCENT=356, AMPERSAND=357, QUOTE=358, LEFT_PAREN=359, 
		RIGHT_PAREN=360, ASTERISK=361, PLUS_SIGN=362, COMMA=363, MINUS_SIGN=364, 
		PERIOD=365, SOLIDUS=366, REVERSE_SOLIDUS=367, COLON=368, SEMICOLON=369, 
		LESS_THAN_OPERATOR=370, EQUALS_OPERATOR=371, GREATER_THAN_OPERATOR=372, 
		QUESTION_MARK=373, LEFT_BRACKET_OR_TRIGRAPH=374, RIGHT_BRACKET_OR_TRIGRAPH=375, 
		LEFT_BRACKET=376, LEFT_BRACKET_TRIGRAPH=377, RIGHT_BRACKET=378, RIGHT_BRACKET_TRIGRAPH=379, 
		CIRCUMFLEX=380, UNDERSCORE=381, VERTICAL_BAR=382, LEFT_BRACE=383, RIGHT_BRACE=384, 
		IDENTIFIER_BODY=385, LARGE_OBJECT_LENGTH_TOKEN=386, MULTIPLIER=387, DELIMITED_IDENTIFIER=388, 
		UNICODE_DELIMITED_IDENTIFIER=389, NOT_EQUALS_OPERATOR=390, GREATER_THAN_OR_EQUALS_OPERATOR=391, 
		LESS_THAN_OR_EQUALS_OPERATOR=392, CONCATENATION_OPERATOR=393, RIGHT_ARROW=394, 
		DOUBLE_COLON=395, DOUBLE_PERIOD=396, NAMED_ARGUMENT_ASSIGNMENT_TOKEN=397, 
		SEPARATOR=398, WHITE_SPACE=399, COMMENT=400, CHARACTER_STRING_LITERAL=401, 
		UNICODE_CHARACTER_STRING_LITERAL=402, BINARY_STRING_LITERAL=403, UNSIGNED_INTEGER=404, 
		DATE_LITERAL=405, TIME_LITERAL=406, TIMESTAMP_LITERAL=407, INTERVAL_LITERAL=408, 
		BOOLEAN_LITERAL=409, NON_ESCAPED_CHARACTER=410, ESCAPED_CHARACTER=411, 
		INTERVAL_QUALIFIER=412, START_FIELD=413, END_FIELD=414, SINGLE_DATETIME_FIELD=415, 
		PRIMARY_DATETIME_FIELD=416, NON_SECOND_PRIMARY_DATETIME_FIELD=417, INTERVAL_FRACTIONAL_SECONDS_PRECISION=418, 
		INTERVAL_LEADING_FIELD_PRECISION=419;
	public static final int
		RULE_regular_identifier = 0, RULE_literal = 1, RULE_unsigned_literal = 2, 
		RULE_general_literal = 3, RULE_signed_numeric_literal = 4, RULE_unsigned_numeric_literal = 5, 
		RULE_exact_numeric_literal = 6, RULE_sign = 7, RULE_approximate_numeric_literal = 8, 
		RULE_mantissa = 9, RULE_exponent = 10, RULE_signed_integer = 11, RULE_datetime_literal = 12, 
		RULE_identifier = 13, RULE_actual_identifier = 14, RULE_authorization_identifier = 15, 
		RULE_table_name = 16, RULE_domain_name = 17, RULE_schema_name = 18, RULE_unqualified_schema_name = 19, 
		RULE_catalog_name = 20, RULE_schema_qualified_name = 21, RULE_local_or_schema_qualified_name = 22, 
		RULE_local_or_schema_qualifier = 23, RULE_qualified_identifier = 24, RULE_column_name = 25, 
		RULE_correlation_name = 26, RULE_query_name = 27, RULE_sql_client_module_name = 28, 
		RULE_procedure_name = 29, RULE_schema_qualified_routine_name = 30, RULE_method_name = 31, 
		RULE_specific_name = 32, RULE_cursor_name = 33, RULE_local_qualified_name = 34, 
		RULE_local_qualifier = 35, RULE_host_parameter_name = 36, RULE_sql_parameter_name = 37, 
		RULE_constraint_name = 38, RULE_external_routine_name = 39, RULE_trigger_name = 40, 
		RULE_collation_name = 41, RULE_character_set_name = 42, RULE_transliteration_name = 43, 
		RULE_transcoding_name = 44, RULE_schema_resolved_user_defined_type_name = 45, 
		RULE_user_defined_type_name = 46, RULE_attribute_name = 47, RULE_field_name = 48, 
		RULE_savepoint_name = 49, RULE_sequence_generator_name = 50, RULE_role_name = 51, 
		RULE_user_identifier = 52, RULE_connection_name = 53, RULE_sql_server_name = 54, 
		RULE_connection_user_name = 55, RULE_sql_statement_name = 56, RULE_statement_name = 57, 
		RULE_extended_statement_name = 58, RULE_dynamic_cursor_name = 59, RULE_extended_cursor_name = 60, 
		RULE_descriptor_name = 61, RULE_non_extended_descriptor_name = 62, RULE_extended_descriptor_name = 63, 
		RULE_scope_option = 64, RULE_window_name = 65, RULE_data_type = 66, RULE_predefined_type = 67, 
		RULE_character_string_type = 68, RULE_character_large_object_type = 69, 
		RULE_binary_string_type = 70, RULE_binary_large_object_string_type = 71, 
		RULE_numeric_type = 72, RULE_exact_numeric_type = 73, RULE_approximate_numeric_type = 74, 
		RULE_length = 75, RULE_character_length = 76, RULE_large_object_length = 77, 
		RULE_character_large_object_length = 78, RULE_char_length_units = 79, 
		RULE_precision = 80, RULE_scale = 81, RULE_boolean_type = 82, RULE_datetime_type = 83, 
		RULE_with_or_without_time_zone = 84, RULE_time_precision = 85, RULE_timestamp_precision = 86, 
		RULE_time_fractional_seconds_precision = 87, RULE_interval_type = 88, 
		RULE_row_type = 89, RULE_row_type_body = 90, RULE_reference_type = 91, 
		RULE_scope_clause = 92, RULE_referenced_type = 93, RULE_path_resolved_user_defined_type_name = 94, 
		RULE_maximum_cardinality = 95, RULE_field_definition = 96, RULE_value_expression_primary = 97, 
		RULE_parenthesized_value_expression = 98, RULE_collection_value_constructor = 99, 
		RULE_value_specification = 100, RULE_unsigned_value_specification = 101, 
		RULE_general_value_specification = 102, RULE_simple_value_specification = 103, 
		RULE_target_specification = 104, RULE_simple_target_specification = 105, 
		RULE_host_parameter_specification = 106, RULE_dynamic_parameter_specification = 107, 
		RULE_embedded_variable_specification = 108, RULE_indicator_variable = 109, 
		RULE_indicator_parameter = 110, RULE_target_array_element_specification = 111, 
		RULE_target_array_reference = 112, RULE_current_collation_specification = 113, 
		RULE_contextually_typed_value_specification = 114, RULE_implicitly_typed_value_specification = 115, 
		RULE_null_specification = 116, RULE_empty_specification = 117, RULE_default_specification = 118, 
		RULE_identifier_chain = 119, RULE_basic_identifier_chain = 120, RULE_column_reference = 121, 
		RULE_sql_parameter_reference = 122, RULE_set_function_specification = 123, 
		RULE_grouping_operation = 124, RULE_window_function = 125, RULE_window_function_type = 126, 
		RULE_rank_function_type = 127, RULE_ntile_function = 128, RULE_number_of_tiles = 129, 
		RULE_lead_or_lag_function = 130, RULE_lead_or_lag = 131, RULE_lead_or_lag_extent = 132, 
		RULE_offset = 133, RULE_default_expression = 134, RULE_null_treatment = 135, 
		RULE_first_or_last_value_function = 136, RULE_first_or_last_value = 137, 
		RULE_nth_value_function = 138, RULE_nth_row = 139, RULE_from_first_or_last = 140, 
		RULE_window_name_or_specification = 141, RULE_in_line_window_specification = 142, 
		RULE_nested_window_function = 143, RULE_nested_row_number_function = 144, 
		RULE_value_of_expression_at_row = 145, RULE_row_marker = 146, RULE_row_marker_expression = 147, 
		RULE_row_marker_delta = 148, RULE_row_marker_offset = 149, RULE_value_of_default_value = 150, 
		RULE_case_expression = 151, RULE_case_abbreviation = 152, RULE_case_specification = 153, 
		RULE_simple_case = 154, RULE_searched_case = 155, RULE_simple_when_clause = 156, 
		RULE_searched_when_clause = 157, RULE_else_clause = 158, RULE_case_operand = 159, 
		RULE_when_operand_list = 160, RULE_when_operand = 161, RULE_result = 162, 
		RULE_result_expression = 163, RULE_cast_specification = 164, RULE_cast_operand = 165, 
		RULE_cast_target = 166, RULE_next_value_expression = 167, RULE_subtype_treatment = 168, 
		RULE_subtype_operand = 169, RULE_target_subtype = 170, RULE_method_invocation = 171, 
		RULE_direct_invocation = 172, RULE_generalized_invocation = 173, RULE_method_selection = 174, 
		RULE_constructor_method_selection = 175, RULE_static_method_invocation = 176, 
		RULE_static_method_selection = 177, RULE_new_specification = 178, RULE_new_invocation = 179, 
		RULE_dereference_operator = 180, RULE_dereference_operation = 181, RULE_method_reference = 182, 
		RULE_reference_resolution = 183, RULE_array_element_reference = 184, RULE_multiset_element_reference = 185, 
		RULE_value_expression = 186, RULE_common_value_expression = 187, RULE_user_defined_type_value_expression = 188, 
		RULE_reference_value_expression = 189, RULE_collection_value_expression = 190, 
		RULE_numeric_value_expression = 191, RULE_term = 192, RULE_factor = 193, 
		RULE_numeric_primary = 194, RULE_numeric_value_function = 195, RULE_position_expression = 196, 
		RULE_regex_occurrences_function = 197, RULE_xquery_pattern = 198, RULE_xquery_option_flag = 199, 
		RULE_regex_subject_string = 200, RULE_regex_position_expression = 201, 
		RULE_regex_position_start_or_after = 202, RULE_regex_occurrence = 203, 
		RULE_regex_capture_group = 204, RULE_character_position_expression = 205, 
		RULE_character_value_expression_1 = 206, RULE_character_value_expression_2 = 207, 
		RULE_binary_position_expression = 208, RULE_length_expression = 209, RULE_char_length_expression = 210, 
		RULE_octet_length_expression = 211, RULE_extract_expression = 212, RULE_extract_field = 213, 
		RULE_time_zone_field = 214, RULE_extract_source = 215, RULE_cardinality_expression = 216, 
		RULE_max_cardinality_expression = 217, RULE_absolute_value_expression = 218, 
		RULE_modulus_expression = 219, RULE_numeric_value_expression_dividend = 220, 
		RULE_numeric_value_expression_divisor = 221, RULE_natural_logarithm = 222, 
		RULE_exponential_function = 223, RULE_power_function = 224, RULE_numeric_value_expression_base = 225, 
		RULE_numeric_value_expression_exponent = 226, RULE_square_root = 227, 
		RULE_floor_function = 228, RULE_ceiling_function = 229, RULE_width_bucket_function = 230, 
		RULE_width_bucket_operand = 231, RULE_width_bucket_bound_1 = 232, RULE_width_bucket_bound_2 = 233, 
		RULE_width_bucket_count = 234, RULE_string_value_expression = 235, RULE_character_value_expression = 236, 
		RULE_character_factor = 237, RULE_character_primary = 238, RULE_binary_value_expression = 239, 
		RULE_binary_factor = 240, RULE_binary_primary = 241, RULE_string_value_function = 242, 
		RULE_character_value_function = 243, RULE_character_substring_function = 244, 
		RULE_regular_expression_substring_function = 245, RULE_regex_substring_function = 246, 
		RULE_fold = 247, RULE_transcoding = 248, RULE_character_transliteration = 249, 
		RULE_regex_transliteration = 250, RULE_xquery_replacement_string = 251, 
		RULE_regex_transliteration_occurrence = 252, RULE_trim_function = 253, 
		RULE_trim_operands = 254, RULE_trim_source = 255, RULE_trim_specification = 256, 
		RULE_trim_character = 257, RULE_character_overlay_function = 258, RULE_normalize_function = 259, 
		RULE_normal_form = 260, RULE_normalize_function_result_length = 261, RULE_specific_type_method = 262, 
		RULE_binary_value_function = 263, RULE_binary_substring_function = 264, 
		RULE_binary_trim_function = 265, RULE_binary_trim_operands = 266, RULE_binary_trim_source = 267, 
		RULE_trim_octet = 268, RULE_binary_overlay_function = 269, RULE_start_position = 270, 
		RULE_string_length = 271, RULE_datetime_value_expression = 272, RULE_datetime_term = 273, 
		RULE_datetime_factor = 274, RULE_datetime_primary = 275, RULE_time_zone = 276, 
		RULE_time_zone_specifier = 277, RULE_datetime_value_function = 278, RULE_current_date_value_function = 279, 
		RULE_current_time_value_function = 280, RULE_current_local_time_value_function = 281, 
		RULE_current_timestamp_value_function = 282, RULE_current_local_timestamp_value_function = 283, 
		RULE_interval_value_expression = 284, RULE_interval_term = 285, RULE_interval_factor = 286, 
		RULE_interval_primary = 287, RULE_interval_term_1 = 288, RULE_interval_value_function = 289, 
		RULE_interval_absolute_value_function = 290, RULE_boolean_value_expression = 291, 
		RULE_boolean_term = 292, RULE_boolean_factor = 293, RULE_boolean_test = 294, 
		RULE_truth_value = 295, RULE_boolean_primary = 296, RULE_boolean_predicand = 297, 
		RULE_parenthesized_boolean_value_expression = 298, RULE_array_value_expression = 299, 
		RULE_array_primary = 300, RULE_array_value_function = 301, RULE_trim_array_function = 302, 
		RULE_array_value_constructor = 303, RULE_array_value_constructor_by_enumeration = 304, 
		RULE_array_element_list = 305, RULE_array_element = 306, RULE_array_value_constructor_by_query = 307, 
		RULE_multiset_value_expression = 308, RULE_multiset_term = 309, RULE_multiset_primary = 310, 
		RULE_multiset_value_function = 311, RULE_multiset_set_function = 312, 
		RULE_multiset_value_constructor = 313, RULE_multiset_value_constructor_by_enumeration = 314, 
		RULE_multiset_element_list = 315, RULE_multiset_element = 316, RULE_multiset_value_constructor_by_query = 317, 
		RULE_table_value_constructor_by_query = 318, RULE_row_value_constructor = 319, 
		RULE_explicit_row_value_constructor = 320, RULE_row_value_constructor_element_list = 321, 
		RULE_row_value_constructor_element = 322, RULE_contextually_typed_row_value_constructor = 323, 
		RULE_contextually_typed_row_value_constructor_element_list = 324, RULE_contextually_typed_row_value_constructor_element = 325, 
		RULE_row_value_constructor_predicand = 326, RULE_row_value_expression = 327, 
		RULE_table_row_value_expression = 328, RULE_contextually_typed_row_value_expression = 329, 
		RULE_row_value_predicand = 330, RULE_row_value_special_case = 331, RULE_table_value_constructor = 332, 
		RULE_row_value_expression_list = 333, RULE_contextually_typed_table_value_constructor = 334, 
		RULE_contextually_typed_row_value_expression_list = 335, RULE_table_expression = 336, 
		RULE_from_clause = 337, RULE_table_reference_list = 338, RULE_table_reference = 339, 
		RULE_table_factor = 340, RULE_sample_clause = 341, RULE_sample_method = 342, 
		RULE_repeatable_clause = 343, RULE_sample_percentage = 344, RULE_repeat_argument = 345, 
		RULE_table_primary = 346, RULE_query_system_time_period_specification = 347, 
		RULE_point_in_time_1 = 348, RULE_point_in_time_2 = 349, RULE_point_in_time = 350, 
		RULE_only_spec = 351, RULE_lateral_derived_table = 352, RULE_collection_derived_table = 353, 
		RULE_table_function_derived_table = 354, RULE_derived_table = 355, RULE_table_or_query_name = 356, 
		RULE_derived_column_list = 357, RULE_column_name_list = 358, RULE_data_change_delta_table = 359, 
		RULE_data_change_statement = 360, RULE_result_option = 361, RULE_partitioned_join_table = 362, 
		RULE_partitioned_join_column_reference_list = 363, RULE_partitioned_join_column_reference = 364, 
		RULE_join_specification = 365, RULE_join_condition = 366, RULE_named_columns_join = 367, 
		RULE_join_type = 368, RULE_outer_join_type = 369, RULE_join_column_list = 370, 
		RULE_where_clause = 371, RULE_group_by_clause = 372, RULE_grouping_element_list = 373, 
		RULE_grouping_element = 374, RULE_ordinary_grouping_set = 375, RULE_grouping_column_reference = 376, 
		RULE_grouping_column_reference_list = 377, RULE_rollup_list = 378, RULE_ordinary_grouping_set_list = 379, 
		RULE_cube_list = 380, RULE_grouping_sets_specification = 381, RULE_grouping_set_list = 382, 
		RULE_grouping_set = 383, RULE_empty_grouping_set = 384, RULE_having_clause = 385, 
		RULE_window_clause = 386, RULE_window_definition_list = 387, RULE_window_definition = 388, 
		RULE_new_window_name = 389, RULE_window_specification = 390, RULE_window_specification_details = 391, 
		RULE_existing_window_name = 392, RULE_window_partition_clause = 393, RULE_window_partition_column_reference_list = 394, 
		RULE_window_partition_column_reference = 395, RULE_window_order_clause = 396, 
		RULE_window_frame_clause = 397, RULE_window_frame_units = 398, RULE_window_frame_extent = 399, 
		RULE_window_frame_start = 400, RULE_window_frame_preceding = 401, RULE_window_frame_between = 402, 
		RULE_window_frame_bound_1 = 403, RULE_window_frame_bound_2 = 404, RULE_window_frame_bound = 405, 
		RULE_window_frame_following = 406, RULE_window_frame_exclusion = 407, 
		RULE_query_specification = 408, RULE_select_list = 409, RULE_select_sublist = 410, 
		RULE_qualified_asterisk = 411, RULE_asterisked_identifier_chain = 412, 
		RULE_asterisked_identifier = 413, RULE_derived_column = 414, RULE_as_clause = 415, 
		RULE_all_fields_reference = 416, RULE_all_fields_column_name_list = 417, 
		RULE_query_expression = 418, RULE_with_clause = 419, RULE_with_list = 420, 
		RULE_with_list_element = 421, RULE_with_column_list = 422, RULE_query_expression_body = 423, 
		RULE_query_term = 424, RULE_query_primary = 425, RULE_simple_table = 426, 
		RULE_explicit_table = 427, RULE_corresponding_spec = 428, RULE_corresponding_column_list = 429, 
		RULE_order_by_clause = 430, RULE_result_offset_clause = 431, RULE_fetch_first_clause = 432, 
		RULE_fetch_first_quantity = 433, RULE_offset_row_count = 434, RULE_fetch_first_row_count = 435, 
		RULE_fetch_first_percentage = 436, RULE_search_or_cycle_clause = 437, 
		RULE_search_clause = 438, RULE_recursive_search_order = 439, RULE_sequence_column = 440, 
		RULE_cycle_clause = 441, RULE_cycle_column_list = 442, RULE_cycle_column = 443, 
		RULE_cycle_mark_column = 444, RULE_path_column = 445, RULE_cycle_mark_value = 446, 
		RULE_non_cycle_mark_value = 447, RULE_scalar_subquery = 448, RULE_row_subquery = 449, 
		RULE_table_subquery = 450, RULE_subquery = 451, RULE_predicate = 452, 
		RULE_comparison_predicate = 453, RULE_comparison_predicate_part_2 = 454, 
		RULE_comp_op = 455, RULE_between_predicate = 456, RULE_between_predicate_part_2 = 457, 
		RULE_in_predicate = 458, RULE_in_predicate_part_2 = 459, RULE_in_predicate_value = 460, 
		RULE_in_value_list = 461, RULE_like_predicate = 462, RULE_character_like_predicate = 463, 
		RULE_character_like_predicate_part_2 = 464, RULE_character_pattern = 465, 
		RULE_escape_character = 466, RULE_octet_like_predicate = 467, RULE_octet_like_predicate_part_2 = 468, 
		RULE_octet_pattern = 469, RULE_escape_octet = 470, RULE_similar_predicate = 471, 
		RULE_similar_predicate_part_2 = 472, RULE_similar_pattern = 473, RULE_regular_expression = 474, 
		RULE_regular_term = 475, RULE_regular_factor = 476, RULE_repeat_factor = 477, 
		RULE_upper_limit = 478, RULE_low_value = 479, RULE_high_value = 480, RULE_regular_primary = 481, 
		RULE_character_specifier = 482, RULE_regular_character_set = 483, RULE_character_enumeration_include = 484, 
		RULE_character_enumeration_exclude = 485, RULE_character_enumeration = 486, 
		RULE_regular_character_set_identifier = 487, RULE_regex_like_predicate = 488, 
		RULE_regex_like_predicate_part_2 = 489, RULE_null_predicate = 490, RULE_null_predicate_part_2 = 491, 
		RULE_quantified_comparison_predicate = 492, RULE_quantified_comparison_predicate_part_2 = 493, 
		RULE_quantifier = 494, RULE_all = 495, RULE_some = 496, RULE_exists_predicate = 497, 
		RULE_unique_predicate = 498, RULE_normalized_predicate = 499, RULE_normalized_predicate_part_2 = 500, 
		RULE_match_predicate = 501, RULE_match_predicate_part_2 = 502, RULE_overlaps_predicate = 503, 
		RULE_overlaps_predicate_part_1 = 504, RULE_overlaps_predicate_part_2 = 505, 
		RULE_row_value_predicand_1 = 506, RULE_row_value_predicand_2 = 507, RULE_distinct_predicate = 508, 
		RULE_distinct_predicate_part_2 = 509, RULE_row_value_predicand_3 = 510, 
		RULE_row_value_predicand_4 = 511, RULE_member_predicate = 512, RULE_member_predicate_part_2 = 513, 
		RULE_submultiset_predicate = 514, RULE_submultiset_predicate_part_2 = 515, 
		RULE_set_predicate = 516, RULE_set_predicate_part_2 = 517, RULE_type_predicate = 518, 
		RULE_type_predicate_part_2 = 519, RULE_type_list = 520, RULE_user_defined_type_specification = 521, 
		RULE_inclusive_user_defined_type_specification = 522, RULE_exclusive_user_defined_type_specification = 523, 
		RULE_period_predicate = 524, RULE_period_overlaps_predicate = 525, RULE_period_overlaps_predicate_part_2 = 526, 
		RULE_period_predicand_1 = 527, RULE_period_predicand_2 = 528, RULE_period_predicand = 529, 
		RULE_period_reference = 530, RULE_period_start_value = 531, RULE_period_end_value = 532, 
		RULE_period_equals_predicate = 533, RULE_period_equals_predicate_part_2 = 534, 
		RULE_period_contains_predicate = 535, RULE_period_contains_predicate_part_2 = 536, 
		RULE_period_or_point_in_time_predicand = 537, RULE_period_precedes_predicate = 538, 
		RULE_period_precedes_predicate_part_2 = 539, RULE_period_succeeds_predicate = 540, 
		RULE_period_succeeds_predicate_part_2 = 541, RULE_period_immediately_precedes_predicate = 542, 
		RULE_period_immediately_precedes_predicate_part_2 = 543, RULE_period_immediately_succeeds_predicate = 544, 
		RULE_period_immediately_succeeds_predicate_part_2 = 545, RULE_search_condition = 546, 
		RULE_language_clause = 547, RULE_language_name = 548, RULE_path_specification = 549, 
		RULE_schema_name_list = 550, RULE_routine_invocation = 551, RULE_routine_name = 552, 
		RULE_sql_argument_list = 553, RULE_sql_argument = 554, RULE_generalized_expression = 555, 
		RULE_named_argument_specification = 556, RULE_named_argument_sql_argument = 557, 
		RULE_character_set_specification = 558, RULE_standard_character_set_name = 559, 
		RULE_implementation_defined_character_set_name = 560, RULE_user_defined_character_set_name = 561, 
		RULE_specific_routine_designator = 562, RULE_routine_type = 563, RULE_member_name = 564, 
		RULE_member_name_alternatives = 565, RULE_data_type_list = 566, RULE_collate_clause = 567, 
		RULE_constraint_name_definition = 568, RULE_constraint_characteristics = 569, 
		RULE_constraint_check_time = 570, RULE_constraint_enforcement = 571, RULE_aggregate_function = 572, 
		RULE_general_set_function = 573, RULE_set_function_type = 574, RULE_computational_operation = 575, 
		RULE_set_quantifier = 576, RULE_filter_clause = 577, RULE_binary_set_function = 578, 
		RULE_binary_set_function_type = 579, RULE_dependent_variable_expression = 580, 
		RULE_independent_variable_expression = 581, RULE_ordered_set_function = 582, 
		RULE_hypothetical_set_function = 583, RULE_within_group_specification = 584, 
		RULE_hypothetical_set_function_value_expression_list = 585, RULE_inverse_distribution_function = 586, 
		RULE_inverse_distribution_function_argument = 587, RULE_inverse_distribution_function_type = 588, 
		RULE_array_aggregate_function = 589, RULE_sort_specification_list = 590, 
		RULE_sort_specification = 591, RULE_sort_key = 592, RULE_ordering_specification = 593, 
		RULE_null_ordering = 594, RULE_declare_cursor = 595, RULE_cursor_properties = 596, 
		RULE_cursor_sensitivity = 597, RULE_cursor_scrollability = 598, RULE_cursor_holdability = 599, 
		RULE_cursor_returnability = 600, RULE_cursor_specification = 601, RULE_updatability_clause = 602, 
		RULE_open_statement = 603, RULE_fetch_statement = 604, RULE_fetch_orientation = 605, 
		RULE_fetch_target_list = 606, RULE_close_statement = 607, RULE_select_statement__single_row = 608, 
		RULE_select_target_list = 609, RULE_delete_statement__positioned = 610, 
		RULE_target_table = 611, RULE_delete_statement__searched = 612, RULE_truncate_table_statement = 613, 
		RULE_identity_column_restart_option = 614, RULE_insert_statement = 615, 
		RULE_insertion_target = 616, RULE_insert_columns_and_source = 617, RULE_from_subquery = 618, 
		RULE_from_constructor = 619, RULE_override_clause = 620, RULE_from_default = 621, 
		RULE_insert_column_list = 622, RULE_merge_statement = 623, RULE_merge_correlation_name = 624, 
		RULE_merge_operation_specification = 625, RULE_merge_when_clause = 626, 
		RULE_merge_when_matched_clause = 627, RULE_merge_update_or_delete_specification = 628, 
		RULE_merge_when_not_matched_clause = 629, RULE_merge_update_specification = 630, 
		RULE_merge_delete_specification = 631, RULE_merge_insert_specification = 632, 
		RULE_merge_insert_value_list = 633, RULE_merge_insert_value_element = 634, 
		RULE_update_statement__positioned = 635, RULE_update_statement__searched = 636, 
		RULE_set_clause_list = 637, RULE_set_clause = 638, RULE_set_target = 639, 
		RULE_multiple_column_assignment = 640, RULE_set_target_list = 641, RULE_assigned_row = 642, 
		RULE_update_target = 643, RULE_object_column = 644, RULE_mutated_set_clause = 645, 
		RULE_update_source = 646, RULE_call_statement = 647, RULE_return_statement = 648, 
		RULE_return_value = 649, RULE_start_transaction_statement = 650, RULE_set_transaction_statement = 651, 
		RULE_transaction_characteristics = 652, RULE_transaction_mode = 653, RULE_transaction_access_mode = 654, 
		RULE_isolation_level = 655, RULE_level_of_isolation = 656, RULE_diagnostics_size = 657, 
		RULE_number_of_conditions = 658, RULE_set_constraints_mode_statement = 659, 
		RULE_constraint_name_list = 660, RULE_savepoint_statement = 661, RULE_savepoint_specifier = 662, 
		RULE_release_savepoint_statement = 663, RULE_commit_statement = 664, RULE_rollback_statement = 665, 
		RULE_savepoint_clause = 666, RULE_direct_sql_statement = 667, RULE_directly_executable_statement = 668, 
		RULE_direct_sql_data_statement = 669, RULE_direct_select_statement__multiple_rows = 670, 
		RULE_application_time_period_name = 671, RULE_embedded_variable_name = 672, 
		RULE_trigonometric_function = 673, RULE_trigonometric_function_name = 674, 
		RULE_general_logarithm_function = 675, RULE_general_logarithm_base = 676, 
		RULE_general_logarithm_argument = 677, RULE_common_logarithm = 678;
	private static String[] makeRuleNames() {
		return new String[] {
			"regular_identifier", "literal", "unsigned_literal", "general_literal", 
			"signed_numeric_literal", "unsigned_numeric_literal", "exact_numeric_literal", 
			"sign", "approximate_numeric_literal", "mantissa", "exponent", "signed_integer", 
			"datetime_literal", "identifier", "actual_identifier", "authorization_identifier", 
			"table_name", "domain_name", "schema_name", "unqualified_schema_name", 
			"catalog_name", "schema_qualified_name", "local_or_schema_qualified_name", 
			"local_or_schema_qualifier", "qualified_identifier", "column_name", "correlation_name", 
			"query_name", "sql_client_module_name", "procedure_name", "schema_qualified_routine_name", 
			"method_name", "specific_name", "cursor_name", "local_qualified_name", 
			"local_qualifier", "host_parameter_name", "sql_parameter_name", "constraint_name", 
			"external_routine_name", "trigger_name", "collation_name", "character_set_name", 
			"transliteration_name", "transcoding_name", "schema_resolved_user_defined_type_name", 
			"user_defined_type_name", "attribute_name", "field_name", "savepoint_name", 
			"sequence_generator_name", "role_name", "user_identifier", "connection_name", 
			"sql_server_name", "connection_user_name", "sql_statement_name", "statement_name", 
			"extended_statement_name", "dynamic_cursor_name", "extended_cursor_name", 
			"descriptor_name", "non_extended_descriptor_name", "extended_descriptor_name", 
			"scope_option", "window_name", "data_type", "predefined_type", "character_string_type", 
			"character_large_object_type", "binary_string_type", "binary_large_object_string_type", 
			"numeric_type", "exact_numeric_type", "approximate_numeric_type", "length", 
			"character_length", "large_object_length", "character_large_object_length", 
			"char_length_units", "precision", "scale", "boolean_type", "datetime_type", 
			"with_or_without_time_zone", "time_precision", "timestamp_precision", 
			"time_fractional_seconds_precision", "interval_type", "row_type", "row_type_body", 
			"reference_type", "scope_clause", "referenced_type", "path_resolved_user_defined_type_name", 
			"maximum_cardinality", "field_definition", "value_expression_primary", 
			"parenthesized_value_expression", "collection_value_constructor", "value_specification", 
			"unsigned_value_specification", "general_value_specification", "simple_value_specification", 
			"target_specification", "simple_target_specification", "host_parameter_specification", 
			"dynamic_parameter_specification", "embedded_variable_specification", 
			"indicator_variable", "indicator_parameter", "target_array_element_specification", 
			"target_array_reference", "current_collation_specification", "contextually_typed_value_specification", 
			"implicitly_typed_value_specification", "null_specification", "empty_specification", 
			"default_specification", "identifier_chain", "basic_identifier_chain", 
			"column_reference", "sql_parameter_reference", "set_function_specification", 
			"grouping_operation", "window_function", "window_function_type", "rank_function_type", 
			"ntile_function", "number_of_tiles", "lead_or_lag_function", "lead_or_lag", 
			"lead_or_lag_extent", "offset", "default_expression", "null_treatment", 
			"first_or_last_value_function", "first_or_last_value", "nth_value_function", 
			"nth_row", "from_first_or_last", "window_name_or_specification", "in_line_window_specification", 
			"nested_window_function", "nested_row_number_function", "value_of_expression_at_row", 
			"row_marker", "row_marker_expression", "row_marker_delta", "row_marker_offset", 
			"value_of_default_value", "case_expression", "case_abbreviation", "case_specification", 
			"simple_case", "searched_case", "simple_when_clause", "searched_when_clause", 
			"else_clause", "case_operand", "when_operand_list", "when_operand", "result", 
			"result_expression", "cast_specification", "cast_operand", "cast_target", 
			"next_value_expression", "subtype_treatment", "subtype_operand", "target_subtype", 
			"method_invocation", "direct_invocation", "generalized_invocation", "method_selection", 
			"constructor_method_selection", "static_method_invocation", "static_method_selection", 
			"new_specification", "new_invocation", "dereference_operator", "dereference_operation", 
			"method_reference", "reference_resolution", "array_element_reference", 
			"multiset_element_reference", "value_expression", "common_value_expression", 
			"user_defined_type_value_expression", "reference_value_expression", "collection_value_expression", 
			"numeric_value_expression", "term", "factor", "numeric_primary", "numeric_value_function", 
			"position_expression", "regex_occurrences_function", "xquery_pattern", 
			"xquery_option_flag", "regex_subject_string", "regex_position_expression", 
			"regex_position_start_or_after", "regex_occurrence", "regex_capture_group", 
			"character_position_expression", "character_value_expression_1", "character_value_expression_2", 
			"binary_position_expression", "length_expression", "char_length_expression", 
			"octet_length_expression", "extract_expression", "extract_field", "time_zone_field", 
			"extract_source", "cardinality_expression", "max_cardinality_expression", 
			"absolute_value_expression", "modulus_expression", "numeric_value_expression_dividend", 
			"numeric_value_expression_divisor", "natural_logarithm", "exponential_function", 
			"power_function", "numeric_value_expression_base", "numeric_value_expression_exponent", 
			"square_root", "floor_function", "ceiling_function", "width_bucket_function", 
			"width_bucket_operand", "width_bucket_bound_1", "width_bucket_bound_2", 
			"width_bucket_count", "string_value_expression", "character_value_expression", 
			"character_factor", "character_primary", "binary_value_expression", "binary_factor", 
			"binary_primary", "string_value_function", "character_value_function", 
			"character_substring_function", "regular_expression_substring_function", 
			"regex_substring_function", "fold", "transcoding", "character_transliteration", 
			"regex_transliteration", "xquery_replacement_string", "regex_transliteration_occurrence", 
			"trim_function", "trim_operands", "trim_source", "trim_specification", 
			"trim_character", "character_overlay_function", "normalize_function", 
			"normal_form", "normalize_function_result_length", "specific_type_method", 
			"binary_value_function", "binary_substring_function", "binary_trim_function", 
			"binary_trim_operands", "binary_trim_source", "trim_octet", "binary_overlay_function", 
			"start_position", "string_length", "datetime_value_expression", "datetime_term", 
			"datetime_factor", "datetime_primary", "time_zone", "time_zone_specifier", 
			"datetime_value_function", "current_date_value_function", "current_time_value_function", 
			"current_local_time_value_function", "current_timestamp_value_function", 
			"current_local_timestamp_value_function", "interval_value_expression", 
			"interval_term", "interval_factor", "interval_primary", "interval_term_1", 
			"interval_value_function", "interval_absolute_value_function", "boolean_value_expression", 
			"boolean_term", "boolean_factor", "boolean_test", "truth_value", "boolean_primary", 
			"boolean_predicand", "parenthesized_boolean_value_expression", "array_value_expression", 
			"array_primary", "array_value_function", "trim_array_function", "array_value_constructor", 
			"array_value_constructor_by_enumeration", "array_element_list", "array_element", 
			"array_value_constructor_by_query", "multiset_value_expression", "multiset_term", 
			"multiset_primary", "multiset_value_function", "multiset_set_function", 
			"multiset_value_constructor", "multiset_value_constructor_by_enumeration", 
			"multiset_element_list", "multiset_element", "multiset_value_constructor_by_query", 
			"table_value_constructor_by_query", "row_value_constructor", "explicit_row_value_constructor", 
			"row_value_constructor_element_list", "row_value_constructor_element", 
			"contextually_typed_row_value_constructor", "contextually_typed_row_value_constructor_element_list", 
			"contextually_typed_row_value_constructor_element", "row_value_constructor_predicand", 
			"row_value_expression", "table_row_value_expression", "contextually_typed_row_value_expression", 
			"row_value_predicand", "row_value_special_case", "table_value_constructor", 
			"row_value_expression_list", "contextually_typed_table_value_constructor", 
			"contextually_typed_row_value_expression_list", "table_expression", "from_clause", 
			"table_reference_list", "table_reference", "table_factor", "sample_clause", 
			"sample_method", "repeatable_clause", "sample_percentage", "repeat_argument", 
			"table_primary", "query_system_time_period_specification", "point_in_time_1", 
			"point_in_time_2", "point_in_time", "only_spec", "lateral_derived_table", 
			"collection_derived_table", "table_function_derived_table", "derived_table", 
			"table_or_query_name", "derived_column_list", "column_name_list", "data_change_delta_table", 
			"data_change_statement", "result_option", "partitioned_join_table", "partitioned_join_column_reference_list", 
			"partitioned_join_column_reference", "join_specification", "join_condition", 
			"named_columns_join", "join_type", "outer_join_type", "join_column_list", 
			"where_clause", "group_by_clause", "grouping_element_list", "grouping_element", 
			"ordinary_grouping_set", "grouping_column_reference", "grouping_column_reference_list", 
			"rollup_list", "ordinary_grouping_set_list", "cube_list", "grouping_sets_specification", 
			"grouping_set_list", "grouping_set", "empty_grouping_set", "having_clause", 
			"window_clause", "window_definition_list", "window_definition", "new_window_name", 
			"window_specification", "window_specification_details", "existing_window_name", 
			"window_partition_clause", "window_partition_column_reference_list", 
			"window_partition_column_reference", "window_order_clause", "window_frame_clause", 
			"window_frame_units", "window_frame_extent", "window_frame_start", "window_frame_preceding", 
			"window_frame_between", "window_frame_bound_1", "window_frame_bound_2", 
			"window_frame_bound", "window_frame_following", "window_frame_exclusion", 
			"query_specification", "select_list", "select_sublist", "qualified_asterisk", 
			"asterisked_identifier_chain", "asterisked_identifier", "derived_column", 
			"as_clause", "all_fields_reference", "all_fields_column_name_list", "query_expression", 
			"with_clause", "with_list", "with_list_element", "with_column_list", 
			"query_expression_body", "query_term", "query_primary", "simple_table", 
			"explicit_table", "corresponding_spec", "corresponding_column_list", 
			"order_by_clause", "result_offset_clause", "fetch_first_clause", "fetch_first_quantity", 
			"offset_row_count", "fetch_first_row_count", "fetch_first_percentage", 
			"search_or_cycle_clause", "search_clause", "recursive_search_order", 
			"sequence_column", "cycle_clause", "cycle_column_list", "cycle_column", 
			"cycle_mark_column", "path_column", "cycle_mark_value", "non_cycle_mark_value", 
			"scalar_subquery", "row_subquery", "table_subquery", "subquery", "predicate", 
			"comparison_predicate", "comparison_predicate_part_2", "comp_op", "between_predicate", 
			"between_predicate_part_2", "in_predicate", "in_predicate_part_2", "in_predicate_value", 
			"in_value_list", "like_predicate", "character_like_predicate", "character_like_predicate_part_2", 
			"character_pattern", "escape_character", "octet_like_predicate", "octet_like_predicate_part_2", 
			"octet_pattern", "escape_octet", "similar_predicate", "similar_predicate_part_2", 
			"similar_pattern", "regular_expression", "regular_term", "regular_factor", 
			"repeat_factor", "upper_limit", "low_value", "high_value", "regular_primary", 
			"character_specifier", "regular_character_set", "character_enumeration_include", 
			"character_enumeration_exclude", "character_enumeration", "regular_character_set_identifier", 
			"regex_like_predicate", "regex_like_predicate_part_2", "null_predicate", 
			"null_predicate_part_2", "quantified_comparison_predicate", "quantified_comparison_predicate_part_2", 
			"quantifier", "all", "some", "exists_predicate", "unique_predicate", 
			"normalized_predicate", "normalized_predicate_part_2", "match_predicate", 
			"match_predicate_part_2", "overlaps_predicate", "overlaps_predicate_part_1", 
			"overlaps_predicate_part_2", "row_value_predicand_1", "row_value_predicand_2", 
			"distinct_predicate", "distinct_predicate_part_2", "row_value_predicand_3", 
			"row_value_predicand_4", "member_predicate", "member_predicate_part_2", 
			"submultiset_predicate", "submultiset_predicate_part_2", "set_predicate", 
			"set_predicate_part_2", "type_predicate", "type_predicate_part_2", "type_list", 
			"user_defined_type_specification", "inclusive_user_defined_type_specification", 
			"exclusive_user_defined_type_specification", "period_predicate", "period_overlaps_predicate", 
			"period_overlaps_predicate_part_2", "period_predicand_1", "period_predicand_2", 
			"period_predicand", "period_reference", "period_start_value", "period_end_value", 
			"period_equals_predicate", "period_equals_predicate_part_2", "period_contains_predicate", 
			"period_contains_predicate_part_2", "period_or_point_in_time_predicand", 
			"period_precedes_predicate", "period_precedes_predicate_part_2", "period_succeeds_predicate", 
			"period_succeeds_predicate_part_2", "period_immediately_precedes_predicate", 
			"period_immediately_precedes_predicate_part_2", "period_immediately_succeeds_predicate", 
			"period_immediately_succeeds_predicate_part_2", "search_condition", "language_clause", 
			"language_name", "path_specification", "schema_name_list", "routine_invocation", 
			"routine_name", "sql_argument_list", "sql_argument", "generalized_expression", 
			"named_argument_specification", "named_argument_sql_argument", "character_set_specification", 
			"standard_character_set_name", "implementation_defined_character_set_name", 
			"user_defined_character_set_name", "specific_routine_designator", "routine_type", 
			"member_name", "member_name_alternatives", "data_type_list", "collate_clause", 
			"constraint_name_definition", "constraint_characteristics", "constraint_check_time", 
			"constraint_enforcement", "aggregate_function", "general_set_function", 
			"set_function_type", "computational_operation", "set_quantifier", "filter_clause", 
			"binary_set_function", "binary_set_function_type", "dependent_variable_expression", 
			"independent_variable_expression", "ordered_set_function", "hypothetical_set_function", 
			"within_group_specification", "hypothetical_set_function_value_expression_list", 
			"inverse_distribution_function", "inverse_distribution_function_argument", 
			"inverse_distribution_function_type", "array_aggregate_function", "sort_specification_list", 
			"sort_specification", "sort_key", "ordering_specification", "null_ordering", 
			"declare_cursor", "cursor_properties", "cursor_sensitivity", "cursor_scrollability", 
			"cursor_holdability", "cursor_returnability", "cursor_specification", 
			"updatability_clause", "open_statement", "fetch_statement", "fetch_orientation", 
			"fetch_target_list", "close_statement", "select_statement__single_row", 
			"select_target_list", "delete_statement__positioned", "target_table", 
			"delete_statement__searched", "truncate_table_statement", "identity_column_restart_option", 
			"insert_statement", "insertion_target", "insert_columns_and_source", 
			"from_subquery", "from_constructor", "override_clause", "from_default", 
			"insert_column_list", "merge_statement", "merge_correlation_name", "merge_operation_specification", 
			"merge_when_clause", "merge_when_matched_clause", "merge_update_or_delete_specification", 
			"merge_when_not_matched_clause", "merge_update_specification", "merge_delete_specification", 
			"merge_insert_specification", "merge_insert_value_list", "merge_insert_value_element", 
			"update_statement__positioned", "update_statement__searched", "set_clause_list", 
			"set_clause", "set_target", "multiple_column_assignment", "set_target_list", 
			"assigned_row", "update_target", "object_column", "mutated_set_clause", 
			"update_source", "call_statement", "return_statement", "return_value", 
			"start_transaction_statement", "set_transaction_statement", "transaction_characteristics", 
			"transaction_mode", "transaction_access_mode", "isolation_level", "level_of_isolation", 
			"diagnostics_size", "number_of_conditions", "set_constraints_mode_statement", 
			"constraint_name_list", "savepoint_statement", "savepoint_specifier", 
			"release_savepoint_statement", "commit_statement", "rollback_statement", 
			"savepoint_clause", "direct_sql_statement", "directly_executable_statement", 
			"direct_sql_data_statement", "direct_select_statement__multiple_rows", 
			"application_time_period_name", "embedded_variable_name", "trigonometric_function", 
			"trigonometric_function_name", "general_logarithm_function", "general_logarithm_base", 
			"general_logarithm_argument", "common_logarithm"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'E'", "'MODULE'", "'GLOBAL'", "'LOCAL'", "'ARRAY'", "'MULTISET'", 
			"'CHARACTER'", "'SET'", "'CHAR'", "'VARYING'", "'VARCHAR'", "'LARGE'", 
			"'OBJECT'", "'CLOB'", "'BINARY'", "'VARBINARY'", "'BLOB'", "'NUMERIC'", 
			"'DECIMAL'", "'DEC'", "'SMALLINT'", "'INTEGER'", "'INT'", "'BIGINT'", 
			"'FLOAT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'CHARACTERS'", "'OCTETS'", 
			"'BOOLEAN'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'WITH'", "'ZONE'", "'WITHOUT'", 
			"'INTERVAL'", "'ROW'", "'REF'", "'SCOPE'", "'CURRENT_CATALOG'", "'CURRENT_DEFAULT_TRANSFORM_GROUP'", 
			"'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", "'CURRENT_TRANSFORM_GROUP_FOR_TYPE'", 
			"'CURRENT_USER'", "'SESSION_USER'", "'SYSTEM_USER'", "'USER'", "'VALUE'", 
			"'INDICATOR'", "'COLLATION'", "'FOR'", "'NULL'", "'DEFAULT'", "'GROUPING'", 
			"'OVER'", "'ROW_NUMBER'", "'RANK'", "'DENSE_RANK'", "'PERCENT_RANK'", 
			"'CUME_DIST'", "'NTILE'", "'LEAD'", "'LAG'", "'RESPECT'", "'NULLS'", 
			"'IGNORE'", "'FIRST_VALUE'", "'LAST_VALUE'", "'NTH_VALUE'", "'FROM'", 
			"'FIRST'", "'LAST'", "'VALUE_OF'", "'AT'", "'BEGIN_PARTITION'", "'BEGIN_FRAME'", 
			"'CURRENT_ROW'", "'FRAME_ROW'", "'END_FRAME'", "'END_PARTITION'", "'NULLIF'", 
			"'COALESCE'", "'CASE'", "'END'", "'WHEN'", "'THEN'", "'ELSE'", "'CAST'", 
			"'AS'", "'NEXT'", "'TREAT'", "'NEW'", "'DEREF'", "'ELEMENT'", "'OCCURRENCES_REGEX'", 
			"'FLAG'", "'IN'", "'USING'", "'POSITION_REGEX'", "'OCCURRENCE'", "'GROUP'", 
			"'START'", "'AFTER'", "'POSITION'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
			"'OCTET_LENGTH'", "'EXTRACT'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", 
			"'CARDINALITY'", "'ARRAY_MAX_CARDINALITY'", "'ABS'", "'MOD'", "'LN'", 
			"'EXP'", "'POWER'", "'SQRT'", "'FLOOR'", "'CEIL'", "'CEILING'", "'WIDTH_BUCKET'", 
			"'SUBSTRING'", "'SIMILAR'", "'ESCAPE'", "'SUBSTRING_REGEX'", "'UPPER'", 
			"'LOWER'", "'CONVERT'", "'TRANSLATE'", "'TRANSLATE_REGEX'", "'ALL'", 
			"'TRIM'", "'LEADING'", "'TRAILING'", "'BOTH'", "'OVERLAY'", "'PLACING'", 
			"'NORMALIZE'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'SPECIFICTYPE'", 
			"'CURRENT_DATE'", "'CURRENT_TIME'", "'LOCALTIME'", "'CURRENT_TIMESTAMP'", 
			"'LOCALTIMESTAMP'", "'OR'", "'AND'", "'NOT'", "'IS'", "'TRUE'", "'FALSE'", 
			"'UNKNOWN'", "'TRIM_ARRAY'", "'UNION'", "'DISTINCT'", "'EXCEPT'", "'INTERSECT'", 
			"'TABLE'", "'VALUES'", "'CROSS'", "'JOIN'", "'NATURAL'", "'TABLESAMPLE'", 
			"'BERNOULLI'", "'SYSTEM'", "'REPEATABLE'", "'SYSTEM_TIME'", "'OF'", "'BETWEEN'", 
			"'ASYMMETRIC'", "'SYMMETRIC'", "'TO'", "'ONLY'", "'LATERAL'", "'UNNEST'", 
			"'ORDINALITY'", "'FINAL'", "'OLD'", "'PARTITION'", "'BY'", "'ON'", "'INNER'", 
			"'OUTER'", "'LEFT'", "'RIGHT'", "'FULL'", "'WHERE'", "'ROLLUP'", "'CUBE'", 
			"'SETS'", "'HAVING'", "'WINDOW'", "'ORDER'", "'ROWS'", "'RANGE'", "'GROUPS'", 
			"'UNBOUNDED'", "'PRECEDING'", "'CURRENT'", "'FOLLOWING'", "'EXCLUDE'", 
			"'TIES'", "'NO'", "'OTHERS'", "'SELECT'", "'RECURSIVE'", "'CORRESPONDING'", 
			"'OFFSET'", "'FETCH'", "'PERCENT'", "'SEARCH'", "'DEPTH'", "'BREADTH'", 
			"'CYCLE'", "'LIKE'", "'LIKE_REGEX'", "'SOME'", "'ANY'", "'EXISTS'", "'UNIQUE'", 
			"'NORMALIZED'", "'MATCH'", "'SIMPLE'", "'PARTIAL'", "'OVERLAPS'", "'MEMBER'", 
			"'SUBMULTISET'", "'A'", "'PERIOD'", "'EQUALS'", "'CONTAINS'", "'PRECEDES'", 
			"'SUCCEEDS'", "'IMMEDIATELY'", "'LANGUAGE'", "'ADA'", "'C'", "'COBOL'", 
			"'FORTRAN'", "'M'", "'MUMPS'", "'PASCAL'", "'PLI'", "'SQL'", "'PATH'", 
			"'SPECIFIC'", "'ROUTINE'", "'FUNCTION'", "'PROCEDURE'", "'INSTANCE'", 
			"'STATIC'", "'CONSTRUCTOR'", "'METHOD'", "'COLLATE'", "'CONSTRAINT'", 
			"'DEFERRABLE'", "'INITIALLY'", "'DEFERRED'", "'IMMEDIATE'", "'ENFORCED'", 
			"'COUNT'", "'AVG'", "'MAX'", "'MIN'", "'SUM'", "'EVERY'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'VAR_SAMP'", "'VAR_POP'", "'COLLECT'", "'FUSION'", 
			"'INTERSECTION'", "'FILTER'", "'COVAR_POP'", "'COVAR_SAMP'", "'CORR'", 
			"'REGR_SLOPE'", "'REGR_INTERCEPT'", "'REGR_COUNT'", "'REGR_R2'", "'REGR_AVGX'", 
			"'REGR_AVGY'", "'REGR_SXX'", "'REGR_SYY'", "'REGR_SXY'", "'WITHIN'", 
			"'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'ARRAY_AGG'", "'ASC'", "'DESC'", 
			"'DECLARE'", "'CURSOR'", "'SENSITIVE'", "'INSENSITIVE'", "'ASENSITIVE'", 
			"'SCROLL'", "'HOLD'", "'RETURN'", "'READ'", "'UPDATE'", "'OPEN'", "'INTO'", 
			"'PRIOR'", "'ABSOLUTE'", "'RELATIVE'", "'CLOSE'", "'DELETE'", "'PORTION'", 
			"'TRUNCATE'", "'CONTINUE'", "'IDENTITY'", "'RESTART'", "'INSERT'", "'OVERRIDING'", 
			"'MERGE'", "'MATCHED'", "'CALL'", "'TRANSACTION'", "'WRITE'", "'ISOLATION'", 
			"'LEVEL'", "'UNCOMMITTED'", "'COMMITTED'", "'SERIALIZABLE'", "'DIAGNOSTICS'", 
			"'SIZE'", "'CONSTRAINTS'", "'SAVEPOINT'", "'RELEASE'", "'COMMIT'", "'WORK'", 
			"'CHAIN'", "'ROLLBACK'", "'SIN'", "'COS'", "'TAN'", "'SINH'", "'COSH'", 
			"'TANH'", "'ASIN'", "'ACOS'", "'ATAN'", "'LOG'", "'LOG10'", "'\"'", "'%'", 
			"'&'", "'''", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", 
			"'\\'", "':'", "';'", "'<'", "'='", "'>'", "'?'", null, null, "'['", 
			"'??('", "']'", "'??)'", "'^'", "'_'", "'|'", "'{'", "'}'", null, null, 
			null, null, null, "'<>'", "'>='", "'<='", "'||'", "'->'", "'::'", "'..'", 
			"'=>'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, "DOUBLE_QUOTE", "PERCENT", 
			"AMPERSAND", "QUOTE", "LEFT_PAREN", "RIGHT_PAREN", "ASTERISK", "PLUS_SIGN", 
			"COMMA", "MINUS_SIGN", "PERIOD", "SOLIDUS", "REVERSE_SOLIDUS", "COLON", 
			"SEMICOLON", "LESS_THAN_OPERATOR", "EQUALS_OPERATOR", "GREATER_THAN_OPERATOR", 
			"QUESTION_MARK", "LEFT_BRACKET_OR_TRIGRAPH", "RIGHT_BRACKET_OR_TRIGRAPH", 
			"LEFT_BRACKET", "LEFT_BRACKET_TRIGRAPH", "RIGHT_BRACKET", "RIGHT_BRACKET_TRIGRAPH", 
			"CIRCUMFLEX", "UNDERSCORE", "VERTICAL_BAR", "LEFT_BRACE", "RIGHT_BRACE", 
			"IDENTIFIER_BODY", "LARGE_OBJECT_LENGTH_TOKEN", "MULTIPLIER", "DELIMITED_IDENTIFIER", 
			"UNICODE_DELIMITED_IDENTIFIER", "NOT_EQUALS_OPERATOR", "GREATER_THAN_OR_EQUALS_OPERATOR", 
			"LESS_THAN_OR_EQUALS_OPERATOR", "CONCATENATION_OPERATOR", "RIGHT_ARROW", 
			"DOUBLE_COLON", "DOUBLE_PERIOD", "NAMED_ARGUMENT_ASSIGNMENT_TOKEN", "SEPARATOR", 
			"WHITE_SPACE", "COMMENT", "CHARACTER_STRING_LITERAL", "UNICODE_CHARACTER_STRING_LITERAL", 
			"BINARY_STRING_LITERAL", "UNSIGNED_INTEGER", "DATE_LITERAL", "TIME_LITERAL", 
			"TIMESTAMP_LITERAL", "INTERVAL_LITERAL", "BOOLEAN_LITERAL", "NON_ESCAPED_CHARACTER", 
			"ESCAPED_CHARACTER", "INTERVAL_QUALIFIER", "START_FIELD", "END_FIELD", 
			"SINGLE_DATETIME_FIELD", "PRIMARY_DATETIME_FIELD", "NON_SECOND_PRIMARY_DATETIME_FIELD", 
			"INTERVAL_FRACTIONAL_SECONDS_PRECISION", "INTERVAL_LEADING_FIELD_PRECISION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SQL2011.g"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SQL2011Parser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Regular_identifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_BODY() { return getToken(SQL2011Parser.IDENTIFIER_BODY, 0); }
		public Regular_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_identifier; }
	}

	public final Regular_identifierContext regular_identifier() throws RecognitionException {
		Regular_identifierContext _localctx = new Regular_identifierContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_regular_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1358);
			match(IDENTIFIER_BODY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public Signed_numeric_literalContext signed_numeric_literal() {
			return getRuleContext(Signed_numeric_literalContext.class,0);
		}
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_literal);
		try {
			setState(1362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1360);
				signed_numeric_literal();
				}
				break;
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1361);
				general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_literalContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_literal; }
	}

	public final Unsigned_literalContext unsigned_literal() throws RecognitionException {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_unsigned_literal);
		try {
			setState(1366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERIOD:
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364);
				unsigned_numeric_literal();
				}
				break;
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365);
				general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_literalContext extends ParserRuleContext {
		public TerminalNode CHARACTER_STRING_LITERAL() { return getToken(SQL2011Parser.CHARACTER_STRING_LITERAL, 0); }
		public TerminalNode UNICODE_CHARACTER_STRING_LITERAL() { return getToken(SQL2011Parser.UNICODE_CHARACTER_STRING_LITERAL, 0); }
		public TerminalNode BINARY_STRING_LITERAL() { return getToken(SQL2011Parser.BINARY_STRING_LITERAL, 0); }
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public TerminalNode INTERVAL_LITERAL() { return getToken(SQL2011Parser.INTERVAL_LITERAL, 0); }
		public TerminalNode BOOLEAN_LITERAL() { return getToken(SQL2011Parser.BOOLEAN_LITERAL, 0); }
		public General_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_literal; }
	}

	public final General_literalContext general_literal() throws RecognitionException {
		General_literalContext _localctx = new General_literalContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_general_literal);
		try {
			setState(1374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1368);
				match(CHARACTER_STRING_LITERAL);
				}
				break;
			case UNICODE_CHARACTER_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1369);
				match(UNICODE_CHARACTER_STRING_LITERAL);
				}
				break;
			case BINARY_STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1370);
				match(BINARY_STRING_LITERAL);
				}
				break;
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1371);
				datetime_literal();
				}
				break;
			case INTERVAL_LITERAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1372);
				match(INTERVAL_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1373);
				match(BOOLEAN_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numeric_literalContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Signed_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_numeric_literal; }
	}

	public final Signed_numeric_literalContext signed_numeric_literal() throws RecognitionException {
		Signed_numeric_literalContext _localctx = new Signed_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_signed_numeric_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(1376);
				sign();
				}
			}

			setState(1379);
			unsigned_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_numeric_literalContext extends ParserRuleContext {
		public Exact_numeric_literalContext exact_numeric_literal() {
			return getRuleContext(Exact_numeric_literalContext.class,0);
		}
		public Approximate_numeric_literalContext approximate_numeric_literal() {
			return getRuleContext(Approximate_numeric_literalContext.class,0);
		}
		public Unsigned_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_numeric_literal; }
	}

	public final Unsigned_numeric_literalContext unsigned_numeric_literal() throws RecognitionException {
		Unsigned_numeric_literalContext _localctx = new Unsigned_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_unsigned_numeric_literal);
		try {
			setState(1383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1381);
				exact_numeric_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1382);
				approximate_numeric_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_literalContext extends ParserRuleContext {
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(SQL2011Parser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(SQL2011Parser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Exact_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_literal; }
	}

	public final Exact_numeric_literalContext exact_numeric_literal() throws RecognitionException {
		Exact_numeric_literalContext _localctx = new Exact_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_exact_numeric_literal);
		try {
			setState(1394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1385);
				match(UNSIGNED_INTEGER);
				setState(1390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(1386);
					match(PERIOD);
					setState(1388);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						setState(1387);
						match(UNSIGNED_INTEGER);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case PERIOD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1392);
				match(PERIOD);
				setState(1393);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1396);
			_la = _input.LA(1);
			if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_literalContext extends ParserRuleContext {
		public MantissaContext mantissa() {
			return getRuleContext(MantissaContext.class,0);
		}
		public ExponentContext exponent() {
			return getRuleContext(ExponentContext.class,0);
		}
		public Approximate_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_literal; }
	}

	public final Approximate_numeric_literalContext approximate_numeric_literal() throws RecognitionException {
		Approximate_numeric_literalContext _localctx = new Approximate_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_approximate_numeric_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1398);
			mantissa();
			setState(1399);
			match(T__0);
			setState(1400);
			exponent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MantissaContext extends ParserRuleContext {
		public Exact_numeric_literalContext exact_numeric_literal() {
			return getRuleContext(Exact_numeric_literalContext.class,0);
		}
		public MantissaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mantissa; }
	}

	public final MantissaContext mantissa() throws RecognitionException {
		MantissaContext _localctx = new MantissaContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_mantissa);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			exact_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExponentContext extends ParserRuleContext {
		public Signed_integerContext signed_integer() {
			return getRuleContext(Signed_integerContext.class,0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exponent; }
	}

	public final ExponentContext exponent() throws RecognitionException {
		ExponentContext _localctx = new ExponentContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_exponent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1404);
			signed_integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_integerContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Signed_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_integer; }
	}

	public final Signed_integerContext signed_integer() throws RecognitionException {
		Signed_integerContext _localctx = new Signed_integerContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_signed_integer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(1406);
				sign();
				}
			}

			setState(1409);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_literalContext extends ParserRuleContext {
		public TerminalNode DATE_LITERAL() { return getToken(SQL2011Parser.DATE_LITERAL, 0); }
		public TerminalNode TIME_LITERAL() { return getToken(SQL2011Parser.TIME_LITERAL, 0); }
		public TerminalNode TIMESTAMP_LITERAL() { return getToken(SQL2011Parser.TIMESTAMP_LITERAL, 0); }
		public Datetime_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_literal; }
	}

	public final Datetime_literalContext datetime_literal() throws RecognitionException {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_datetime_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1411);
			_la = _input.LA(1);
			if ( !(((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (DATE_LITERAL - 405)) | (1L << (TIME_LITERAL - 405)) | (1L << (TIMESTAMP_LITERAL - 405)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Actual_identifierContext actual_identifier() {
			return getRuleContext(Actual_identifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			actual_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Actual_identifierContext extends ParserRuleContext {
		public Regular_identifierContext regular_identifier() {
			return getRuleContext(Regular_identifierContext.class,0);
		}
		public TerminalNode DELIMITED_IDENTIFIER() { return getToken(SQL2011Parser.DELIMITED_IDENTIFIER, 0); }
		public TerminalNode UNICODE_DELIMITED_IDENTIFIER() { return getToken(SQL2011Parser.UNICODE_DELIMITED_IDENTIFIER, 0); }
		public Actual_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_actual_identifier; }
	}

	public final Actual_identifierContext actual_identifier() throws RecognitionException {
		Actual_identifierContext _localctx = new Actual_identifierContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_actual_identifier);
		try {
			setState(1418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1415);
				regular_identifier();
				}
				break;
			case DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1416);
				match(DELIMITED_IDENTIFIER);
				}
				break;
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1417);
				match(UNICODE_DELIMITED_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_identifierContext extends ParserRuleContext {
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public User_identifierContext user_identifier() {
			return getRuleContext(User_identifierContext.class,0);
		}
		public Authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_identifier; }
	}

	public final Authorization_identifierContext authorization_identifier() throws RecognitionException {
		Authorization_identifierContext _localctx = new Authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_authorization_identifier);
		try {
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1420);
				role_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1421);
				user_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Local_or_schema_qualified_nameContext local_or_schema_qualified_name() {
			return getRuleContext(Local_or_schema_qualified_nameContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1424);
			local_or_schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Domain_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_name; }
	}

	public final Domain_nameContext domain_name() throws RecognitionException {
		Domain_nameContext _localctx = new Domain_nameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_domain_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1426);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public Unqualified_schema_nameContext unqualified_schema_name() {
			return getRuleContext(Unqualified_schema_nameContext.class,0);
		}
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1428);
				catalog_name();
				setState(1429);
				match(PERIOD);
				}
				break;
			}
			setState(1433);
			unqualified_schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unqualified_schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unqualified_schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unqualified_schema_name; }
	}

	public final Unqualified_schema_nameContext unqualified_schema_name() throws RecognitionException {
		Unqualified_schema_nameContext _localctx = new Unqualified_schema_nameContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_unqualified_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Catalog_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Catalog_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalog_name; }
	}

	public final Catalog_nameContext catalog_name() throws RecognitionException {
		Catalog_nameContext _localctx = new Catalog_nameContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_catalog_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1437);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Schema_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_name; }
	}

	public final Schema_qualified_nameContext schema_qualified_name() throws RecognitionException {
		Schema_qualified_nameContext _localctx = new Schema_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_schema_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1439);
				schema_name();
				setState(1440);
				match(PERIOD);
				}
				break;
			}
			setState(1444);
			qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_or_schema_qualified_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Local_or_schema_qualifierContext local_or_schema_qualifier() {
			return getRuleContext(Local_or_schema_qualifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Local_or_schema_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_or_schema_qualified_name; }
	}

	public final Local_or_schema_qualified_nameContext local_or_schema_qualified_name() throws RecognitionException {
		Local_or_schema_qualified_nameContext _localctx = new Local_or_schema_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_local_or_schema_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1446);
				local_or_schema_qualifier();
				setState(1447);
				match(PERIOD);
				}
				break;
			}
			setState(1451);
			qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_or_schema_qualifierContext extends ParserRuleContext {
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Local_qualifierContext local_qualifier() {
			return getRuleContext(Local_qualifierContext.class,0);
		}
		public Local_or_schema_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_or_schema_qualifier; }
	}

	public final Local_or_schema_qualifierContext local_or_schema_qualifier() throws RecognitionException {
		Local_or_schema_qualifierContext _localctx = new Local_or_schema_qualifierContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_local_or_schema_qualifier);
		try {
			setState(1455);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1453);
				schema_name();
				}
				break;
			case T__1:
				enterOuterAlt(_localctx, 2);
				{
				setState(1454);
				local_qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_identifier; }
	}

	public final Qualified_identifierContext qualified_identifier() throws RecognitionException {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_qualified_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1457);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1459);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_client_module_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Sql_client_module_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_client_module_name; }
	}

	public final Sql_client_module_nameContext sql_client_module_name() throws RecognitionException {
		Sql_client_module_nameContext _localctx = new Sql_client_module_nameContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_sql_client_module_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_routine_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Schema_qualified_routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_routine_name; }
	}

	public final Schema_qualified_routine_nameContext schema_qualified_routine_name() throws RecognitionException {
		Schema_qualified_routine_nameContext _localctx = new Schema_qualified_routine_nameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_schema_qualified_routine_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Method_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_name; }
	}

	public final Method_nameContext method_name() throws RecognitionException {
		Method_nameContext _localctx = new Method_nameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_method_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Specific_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_name; }
	}

	public final Specific_nameContext specific_name() throws RecognitionException {
		Specific_nameContext _localctx = new Specific_nameContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_specific_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public Local_qualified_nameContext local_qualified_name() {
			return getRuleContext(Local_qualified_nameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1475);
			local_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_qualified_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Local_qualifierContext local_qualifier() {
			return getRuleContext(Local_qualifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Local_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_qualified_name; }
	}

	public final Local_qualified_nameContext local_qualified_name() throws RecognitionException {
		Local_qualified_nameContext _localctx = new Local_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_local_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__1) {
				{
				setState(1477);
				local_qualifier();
				setState(1478);
				match(PERIOD);
				}
			}

			setState(1482);
			qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_qualifierContext extends ParserRuleContext {
		public Local_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_qualifier; }
	}

	public final Local_qualifierContext local_qualifier() throws RecognitionException {
		Local_qualifierContext _localctx = new Local_qualifierContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_local_qualifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1484);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_parameter_nameContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(SQL2011Parser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Host_parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_parameter_name; }
	}

	public final Host_parameter_nameContext host_parameter_name() throws RecognitionException {
		Host_parameter_nameContext _localctx = new Host_parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_host_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1486);
			match(COLON);
			setState(1487);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Sql_parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_parameter_name; }
	}

	public final Sql_parameter_nameContext sql_parameter_name() throws RecognitionException {
		Sql_parameter_nameContext _localctx = new Sql_parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_sql_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1489);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1491);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CHARACTER_STRING_LITERAL() { return getToken(SQL2011Parser.CHARACTER_STRING_LITERAL, 0); }
		public External_routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_routine_name; }
	}

	public final External_routine_nameContext external_routine_name() throws RecognitionException {
		External_routine_nameContext _localctx = new External_routine_nameContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_external_routine_name);
		try {
			setState(1495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1493);
				identifier();
				}
				break;
			case CHARACTER_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1494);
				match(CHARACTER_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_trigger_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_name; }
	}

	public final Collation_nameContext collation_name() throws RecognitionException {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_name; }
	}

	public final Character_set_nameContext character_set_name() throws RecognitionException {
		Character_set_nameContext _localctx = new Character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(1501);
				schema_name();
				setState(1502);
				match(PERIOD);
				}
				break;
			}
			setState(1506);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transliteration_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Transliteration_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transliteration_name; }
	}

	public final Transliteration_nameContext transliteration_name() throws RecognitionException {
		Transliteration_nameContext _localctx = new Transliteration_nameContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_transliteration_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1508);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transcoding_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Transcoding_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transcoding_name; }
	}

	public final Transcoding_nameContext transcoding_name() throws RecognitionException {
		Transcoding_nameContext _localctx = new Transcoding_nameContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_transcoding_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1510);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_resolved_user_defined_type_nameContext extends ParserRuleContext {
		public User_defined_type_nameContext user_defined_type_name() {
			return getRuleContext(User_defined_type_nameContext.class,0);
		}
		public Schema_resolved_user_defined_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_resolved_user_defined_type_name; }
	}

	public final Schema_resolved_user_defined_type_nameContext schema_resolved_user_defined_type_name() throws RecognitionException {
		Schema_resolved_user_defined_type_nameContext _localctx = new Schema_resolved_user_defined_type_nameContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_schema_resolved_user_defined_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1512);
			user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_defined_type_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public User_defined_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_defined_type_name; }
	}

	public final User_defined_type_nameContext user_defined_type_name() throws RecognitionException {
		User_defined_type_nameContext _localctx = new User_defined_type_nameContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_user_defined_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1514);
				schema_name();
				setState(1515);
				match(PERIOD);
				}
				break;
			}
			setState(1519);
			qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1521);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Field_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_name; }
	}

	public final Field_nameContext field_name() throws RecognitionException {
		Field_nameContext _localctx = new Field_nameContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_field_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_generator_nameContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Sequence_generator_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_generator_name; }
	}

	public final Sequence_generator_nameContext sequence_generator_name() throws RecognitionException {
		Sequence_generator_nameContext _localctx = new Sequence_generator_nameContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_sequence_generator_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_role_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public User_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_identifier; }
	}

	public final User_identifierContext user_identifier() throws RecognitionException {
		User_identifierContext _localctx = new User_identifierContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_user_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1531);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Connection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_name; }
	}

	public final Connection_nameContext connection_name() throws RecognitionException {
		Connection_nameContext _localctx = new Connection_nameContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_connection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_server_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Sql_server_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_server_name; }
	}

	public final Sql_server_nameContext sql_server_name() throws RecognitionException {
		Sql_server_nameContext _localctx = new Sql_server_nameContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_sql_server_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_user_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Connection_user_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_user_name; }
	}

	public final Connection_user_nameContext connection_user_name() throws RecognitionException {
		Connection_user_nameContext _localctx = new Connection_user_nameContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_connection_user_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1537);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statement_nameContext extends ParserRuleContext {
		public Statement_nameContext statement_name() {
			return getRuleContext(Statement_nameContext.class,0);
		}
		public Extended_statement_nameContext extended_statement_name() {
			return getRuleContext(Extended_statement_nameContext.class,0);
		}
		public Sql_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement_name; }
	}

	public final Sql_statement_nameContext sql_statement_name() throws RecognitionException {
		Sql_statement_nameContext _localctx = new Sql_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_sql_statement_name);
		try {
			setState(1541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1539);
				statement_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1540);
				extended_statement_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_name; }
	}

	public final Statement_nameContext statement_name() throws RecognitionException {
		Statement_nameContext _localctx = new Statement_nameContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_statement_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_statement_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Extended_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_statement_name; }
	}

	public final Extended_statement_nameContext extended_statement_name() throws RecognitionException {
		Extended_statement_nameContext _localctx = new Extended_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_extended_statement_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				setState(1545);
				scope_option();
				}
			}

			setState(1548);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_cursor_nameContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Extended_cursor_nameContext extended_cursor_name() {
			return getRuleContext(Extended_cursor_nameContext.class,0);
		}
		public Dynamic_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_cursor_name; }
	}

	public final Dynamic_cursor_nameContext dynamic_cursor_name() throws RecognitionException {
		Dynamic_cursor_nameContext _localctx = new Dynamic_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_dynamic_cursor_name);
		try {
			setState(1552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1550);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				extended_cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_cursor_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Extended_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_cursor_name; }
	}

	public final Extended_cursor_nameContext extended_cursor_name() throws RecognitionException {
		Extended_cursor_nameContext _localctx = new Extended_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_extended_cursor_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				setState(1554);
				scope_option();
				}
			}

			setState(1557);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descriptor_nameContext extends ParserRuleContext {
		public Non_extended_descriptor_nameContext non_extended_descriptor_name() {
			return getRuleContext(Non_extended_descriptor_nameContext.class,0);
		}
		public Extended_descriptor_nameContext extended_descriptor_name() {
			return getRuleContext(Extended_descriptor_nameContext.class,0);
		}
		public Descriptor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptor_name; }
	}

	public final Descriptor_nameContext descriptor_name() throws RecognitionException {
		Descriptor_nameContext _localctx = new Descriptor_nameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_descriptor_name);
		try {
			setState(1561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1559);
				non_extended_descriptor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1560);
				extended_descriptor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_extended_descriptor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Non_extended_descriptor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_extended_descriptor_name; }
	}

	public final Non_extended_descriptor_nameContext non_extended_descriptor_name() throws RecognitionException {
		Non_extended_descriptor_nameContext _localctx = new Non_extended_descriptor_nameContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_non_extended_descriptor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1563);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_descriptor_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Extended_descriptor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_descriptor_name; }
	}

	public final Extended_descriptor_nameContext extended_descriptor_name() throws RecognitionException {
		Extended_descriptor_nameContext _localctx = new Extended_descriptor_nameContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_extended_descriptor_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				setState(1565);
				scope_option();
				}
			}

			setState(1568);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_optionContext extends ParserRuleContext {
		public Scope_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_option; }
	}

	public final Scope_optionContext scope_option() throws RecognitionException {
		Scope_optionContext _localctx = new Scope_optionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_scope_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1570);
			_la = _input.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_name; }
	}

	public final Window_nameContext window_name() throws RecognitionException {
		Window_nameContext _localctx = new Window_nameContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Predefined_typeContext predefined_type() {
			return getRuleContext(Predefined_typeContext.class,0);
		}
		public Row_typeContext row_type() {
			return getRuleContext(Row_typeContext.class,0);
		}
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Reference_typeContext reference_type() {
			return getRuleContext(Reference_typeContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Maximum_cardinalityContext maximum_cardinality() {
			return getRuleContext(Maximum_cardinalityContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
	}

	public final Data_typeContext data_type() throws RecognitionException {
		return data_type(0);
	}

	private Data_typeContext data_type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Data_typeContext _localctx = new Data_typeContext(_ctx, _parentState);
		Data_typeContext _prevctx = _localctx;
		int _startState = 132;
		enterRecursionRule(_localctx, 132, RULE_data_type, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__6:
			case T__8:
			case T__10:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__37:
				{
				setState(1575);
				predefined_type();
				}
				break;
			case T__38:
				{
				setState(1576);
				row_type();
				}
				break;
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				{
				setState(1577);
				path_resolved_user_defined_type_name();
				}
				break;
			case T__39:
				{
				setState(1578);
				reference_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1593);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1591);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
					case 1:
						{
						_localctx = new Data_typeContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_data_type);
						setState(1581);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1582);
						match(T__4);
						setState(1587);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
						case 1:
							{
							setState(1583);
							match(LEFT_BRACKET_OR_TRIGRAPH);
							setState(1584);
							maximum_cardinality();
							setState(1585);
							match(RIGHT_BRACKET_OR_TRIGRAPH);
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new Data_typeContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_data_type);
						setState(1589);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1590);
						match(T__5);
						}
						break;
					}
					} 
				}
				setState(1595);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Predefined_typeContext extends ParserRuleContext {
		public Character_string_typeContext character_string_type() {
			return getRuleContext(Character_string_typeContext.class,0);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Binary_string_typeContext binary_string_type() {
			return getRuleContext(Binary_string_typeContext.class,0);
		}
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public Boolean_typeContext boolean_type() {
			return getRuleContext(Boolean_typeContext.class,0);
		}
		public Datetime_typeContext datetime_type() {
			return getRuleContext(Datetime_typeContext.class,0);
		}
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public Predefined_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_type; }
	}

	public final Predefined_typeContext predefined_type() throws RecognitionException {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_predefined_type);
		try {
			setState(1610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__6:
			case T__8:
			case T__10:
			case T__13:
				enterOuterAlt(_localctx, 1);
				{
				setState(1596);
				character_string_type();
				setState(1600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(1597);
					match(T__6);
					setState(1598);
					match(T__7);
					setState(1599);
					character_set_specification();
					}
					break;
				}
				setState(1603);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(1602);
					collate_clause();
					}
					break;
				}
				}
				break;
			case T__14:
			case T__15:
			case T__16:
				enterOuterAlt(_localctx, 2);
				{
				setState(1605);
				binary_string_type();
				}
				break;
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
				enterOuterAlt(_localctx, 3);
				{
				setState(1606);
				numeric_type();
				}
				break;
			case T__30:
				enterOuterAlt(_localctx, 4);
				{
				setState(1607);
				boolean_type();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
				enterOuterAlt(_localctx, 5);
				{
				setState(1608);
				datetime_type();
				}
				break;
			case T__37:
				enterOuterAlt(_localctx, 6);
				{
				setState(1609);
				interval_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_lengthContext character_length() {
			return getRuleContext(Character_lengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Character_large_object_typeContext character_large_object_type() {
			return getRuleContext(Character_large_object_typeContext.class,0);
		}
		public Character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_type; }
	}

	public final Character_string_typeContext character_string_type() throws RecognitionException {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_character_string_type);
		try {
			setState(1644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1612);
				match(T__6);
				setState(1617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					setState(1613);
					match(LEFT_PAREN);
					setState(1614);
					character_length();
					setState(1615);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1619);
				match(T__8);
				setState(1624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(1620);
					match(LEFT_PAREN);
					setState(1621);
					character_length();
					setState(1622);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1626);
				match(T__6);
				setState(1627);
				match(T__9);
				setState(1628);
				match(LEFT_PAREN);
				setState(1629);
				character_length();
				setState(1630);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1632);
				match(T__8);
				setState(1633);
				match(T__9);
				setState(1634);
				match(LEFT_PAREN);
				setState(1635);
				character_length();
				setState(1636);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1638);
				match(T__10);
				setState(1639);
				match(LEFT_PAREN);
				setState(1640);
				character_length();
				setState(1641);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1643);
				character_large_object_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_large_object_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_large_object_lengthContext character_large_object_length() {
			return getRuleContext(Character_large_object_lengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Character_large_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_large_object_type; }
	}

	public final Character_large_object_typeContext character_large_object_type() throws RecognitionException {
		Character_large_object_typeContext _localctx = new Character_large_object_typeContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_character_large_object_type);
		try {
			setState(1671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__6:
				enterOuterAlt(_localctx, 1);
				{
				setState(1646);
				match(T__6);
				setState(1647);
				match(T__11);
				setState(1648);
				match(T__12);
				setState(1653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1649);
					match(LEFT_PAREN);
					setState(1650);
					character_large_object_length();
					setState(1651);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				setState(1655);
				match(T__8);
				setState(1656);
				match(T__11);
				setState(1657);
				match(T__12);
				setState(1662);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(1658);
					match(LEFT_PAREN);
					setState(1659);
					character_large_object_length();
					setState(1660);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 3);
				{
				setState(1664);
				match(T__13);
				setState(1669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(1665);
					match(LEFT_PAREN);
					setState(1666);
					character_large_object_length();
					setState(1667);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_string_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Binary_large_object_string_typeContext binary_large_object_string_type() {
			return getRuleContext(Binary_large_object_string_typeContext.class,0);
		}
		public Binary_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_string_type; }
	}

	public final Binary_string_typeContext binary_string_type() throws RecognitionException {
		Binary_string_typeContext _localctx = new Binary_string_typeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_binary_string_type);
		try {
			setState(1692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1673);
				match(T__14);
				setState(1678);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(1674);
					match(LEFT_PAREN);
					setState(1675);
					length();
					setState(1676);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1680);
				match(T__14);
				setState(1681);
				match(T__9);
				setState(1682);
				match(LEFT_PAREN);
				setState(1683);
				length();
				setState(1684);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1686);
				match(T__15);
				setState(1687);
				match(LEFT_PAREN);
				setState(1688);
				length();
				setState(1689);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1691);
				binary_large_object_string_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_large_object_string_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Large_object_lengthContext large_object_length() {
			return getRuleContext(Large_object_lengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Binary_large_object_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_large_object_string_type; }
	}

	public final Binary_large_object_string_typeContext binary_large_object_string_type() throws RecognitionException {
		Binary_large_object_string_typeContext _localctx = new Binary_large_object_string_typeContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_binary_large_object_string_type);
		try {
			setState(1710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__14:
				enterOuterAlt(_localctx, 1);
				{
				setState(1694);
				match(T__14);
				setState(1695);
				match(T__11);
				setState(1696);
				match(T__12);
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1697);
					match(LEFT_PAREN);
					setState(1698);
					large_object_length();
					setState(1699);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__16:
				enterOuterAlt(_localctx, 2);
				{
				setState(1703);
				match(T__16);
				setState(1708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(1704);
					match(LEFT_PAREN);
					setState(1705);
					large_object_length();
					setState(1706);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return getRuleContext(Exact_numeric_typeContext.class,0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return getRuleContext(Approximate_numeric_typeContext.class,0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_numeric_type);
		try {
			setState(1714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
				enterOuterAlt(_localctx, 1);
				{
				setState(1712);
				exact_numeric_type();
				}
				break;
			case T__24:
			case T__25:
			case T__26:
				enterOuterAlt(_localctx, 2);
				{
				setState(1713);
				approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_type; }
	}

	public final Exact_numeric_typeContext exact_numeric_type() throws RecognitionException {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_exact_numeric_type);
		int _la;
		try {
			setState(1753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__17:
				enterOuterAlt(_localctx, 1);
				{
				setState(1716);
				match(T__17);
				setState(1725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1717);
					match(LEFT_PAREN);
					setState(1718);
					precision();
					setState(1721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1719);
						match(COMMA);
						setState(1720);
						scale();
						}
					}

					setState(1723);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__18:
				enterOuterAlt(_localctx, 2);
				{
				setState(1727);
				match(T__18);
				setState(1736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1728);
					match(LEFT_PAREN);
					setState(1729);
					precision();
					setState(1732);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1730);
						match(COMMA);
						setState(1731);
						scale();
						}
					}

					setState(1734);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__19:
				enterOuterAlt(_localctx, 3);
				{
				setState(1738);
				match(T__19);
				setState(1747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1739);
					match(LEFT_PAREN);
					setState(1740);
					precision();
					setState(1743);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1741);
						match(COMMA);
						setState(1742);
						scale();
						}
					}

					setState(1745);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__20:
				enterOuterAlt(_localctx, 4);
				{
				setState(1749);
				match(T__20);
				}
				break;
			case T__21:
				enterOuterAlt(_localctx, 5);
				{
				setState(1750);
				match(T__21);
				}
				break;
			case T__22:
				enterOuterAlt(_localctx, 6);
				{
				setState(1751);
				match(T__22);
				}
				break;
			case T__23:
				enterOuterAlt(_localctx, 7);
				{
				setState(1752);
				match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_type; }
	}

	public final Approximate_numeric_typeContext approximate_numeric_type() throws RecognitionException {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_approximate_numeric_type);
		try {
			setState(1765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__24:
				enterOuterAlt(_localctx, 1);
				{
				setState(1755);
				match(T__24);
				setState(1760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(1756);
					match(LEFT_PAREN);
					setState(1757);
					precision();
					setState(1758);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__25:
				enterOuterAlt(_localctx, 2);
				{
				setState(1762);
				match(T__25);
				}
				break;
			case T__26:
				enterOuterAlt(_localctx, 3);
				{
				setState(1763);
				match(T__26);
				setState(1764);
				match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_lengthContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Character_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_length; }
	}

	public final Character_lengthContext character_length() throws RecognitionException {
		Character_lengthContext _localctx = new Character_lengthContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_character_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			length();
			setState(1771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				setState(1770);
				char_length_units();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Large_object_lengthContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode MULTIPLIER() { return getToken(SQL2011Parser.MULTIPLIER, 0); }
		public TerminalNode LARGE_OBJECT_LENGTH_TOKEN() { return getToken(SQL2011Parser.LARGE_OBJECT_LENGTH_TOKEN, 0); }
		public Large_object_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_large_object_length; }
	}

	public final Large_object_lengthContext large_object_length() throws RecognitionException {
		Large_object_lengthContext _localctx = new Large_object_lengthContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_large_object_length);
		int _la;
		try {
			setState(1778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1773);
				length();
				setState(1775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MULTIPLIER) {
					{
					setState(1774);
					match(MULTIPLIER);
					}
				}

				}
				break;
			case LARGE_OBJECT_LENGTH_TOKEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1777);
				match(LARGE_OBJECT_LENGTH_TOKEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_large_object_lengthContext extends ParserRuleContext {
		public Large_object_lengthContext large_object_length() {
			return getRuleContext(Large_object_lengthContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Character_large_object_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_large_object_length; }
	}

	public final Character_large_object_lengthContext character_large_object_length() throws RecognitionException {
		Character_large_object_lengthContext _localctx = new Character_large_object_lengthContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_character_large_object_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			large_object_length();
			setState(1782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				setState(1781);
				char_length_units();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_length_unitsContext extends ParserRuleContext {
		public Char_length_unitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_length_units; }
	}

	public final Char_length_unitsContext char_length_units() throws RecognitionException {
		Char_length_unitsContext _localctx = new Char_length_unitsContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_char_length_units);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			_la = _input.LA(1);
			if ( !(_la==T__28 || _la==T__29) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScaleContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public ScaleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scale; }
	}

	public final ScaleContext scale() throws RecognitionException {
		ScaleContext _localctx = new ScaleContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_scale);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_typeContext extends ParserRuleContext {
		public Boolean_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_type; }
	}

	public final Boolean_typeContext boolean_type() throws RecognitionException {
		Boolean_typeContext _localctx = new Boolean_typeContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_boolean_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public With_or_without_time_zoneContext with_or_without_time_zone() {
			return getRuleContext(With_or_without_time_zoneContext.class,0);
		}
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public Datetime_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_type; }
	}

	public final Datetime_typeContext datetime_type() throws RecognitionException {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_datetime_type);
		try {
			setState(1813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__31:
				enterOuterAlt(_localctx, 1);
				{
				setState(1792);
				match(T__31);
				}
				break;
			case T__32:
				enterOuterAlt(_localctx, 2);
				{
				setState(1793);
				match(T__32);
				setState(1798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1794);
					match(LEFT_PAREN);
					setState(1795);
					time_precision();
					setState(1796);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(1801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					setState(1800);
					with_or_without_time_zone();
					}
					break;
				}
				}
				break;
			case T__33:
				enterOuterAlt(_localctx, 3);
				{
				setState(1803);
				match(T__33);
				setState(1808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1804);
					match(LEFT_PAREN);
					setState(1805);
					timestamp_precision();
					setState(1806);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(1811);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1810);
					with_or_without_time_zone();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_or_without_time_zoneContext extends ParserRuleContext {
		public With_or_without_time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_or_without_time_zone; }
	}

	public final With_or_without_time_zoneContext with_or_without_time_zone() throws RecognitionException {
		With_or_without_time_zoneContext _localctx = new With_or_without_time_zoneContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_with_or_without_time_zone);
		try {
			setState(1821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__34:
				enterOuterAlt(_localctx, 1);
				{
				setState(1815);
				match(T__34);
				setState(1816);
				match(T__32);
				setState(1817);
				match(T__35);
				}
				break;
			case T__36:
				enterOuterAlt(_localctx, 2);
				{
				setState(1818);
				match(T__36);
				setState(1819);
				match(T__32);
				setState(1820);
				match(T__35);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Time_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_precision; }
	}

	public final Time_precisionContext time_precision() throws RecognitionException {
		Time_precisionContext _localctx = new Time_precisionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_time_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1823);
			time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Timestamp_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_precision; }
	}

	public final Timestamp_precisionContext timestamp_precision() throws RecognitionException {
		Timestamp_precisionContext _localctx = new Timestamp_precisionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_timestamp_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1825);
			time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_fractional_seconds_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public Time_fractional_seconds_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_fractional_seconds_precision; }
	}

	public final Time_fractional_seconds_precisionContext time_fractional_seconds_precision() throws RecognitionException {
		Time_fractional_seconds_precisionContext _localctx = new Time_fractional_seconds_precisionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_time_fractional_seconds_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1827);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_typeContext extends ParserRuleContext {
		public TerminalNode INTERVAL_QUALIFIER() { return getToken(SQL2011Parser.INTERVAL_QUALIFIER, 0); }
		public Interval_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_type; }
	}

	public final Interval_typeContext interval_type() throws RecognitionException {
		Interval_typeContext _localctx = new Interval_typeContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_interval_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1829);
			match(T__37);
			setState(1830);
			match(INTERVAL_QUALIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_typeContext extends ParserRuleContext {
		public Row_type_bodyContext row_type_body() {
			return getRuleContext(Row_type_bodyContext.class,0);
		}
		public Row_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_type; }
	}

	public final Row_typeContext row_type() throws RecognitionException {
		Row_typeContext _localctx = new Row_typeContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_row_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			match(T__38);
			setState(1833);
			row_type_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_type_bodyContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Field_definitionContext> field_definition() {
			return getRuleContexts(Field_definitionContext.class);
		}
		public Field_definitionContext field_definition(int i) {
			return getRuleContext(Field_definitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Row_type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_type_body; }
	}

	public final Row_type_bodyContext row_type_body() throws RecognitionException {
		Row_type_bodyContext _localctx = new Row_type_bodyContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_row_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			match(LEFT_PAREN);
			setState(1836);
			field_definition();
			setState(1841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1837);
				match(COMMA);
				setState(1838);
				field_definition();
				}
				}
				setState(1843);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1844);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Referenced_typeContext referenced_type() {
			return getRuleContext(Referenced_typeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Scope_clauseContext scope_clause() {
			return getRuleContext(Scope_clauseContext.class,0);
		}
		public Reference_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_type; }
	}

	public final Reference_typeContext reference_type() throws RecognitionException {
		Reference_typeContext _localctx = new Reference_typeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_reference_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1846);
			match(T__39);
			setState(1847);
			match(LEFT_PAREN);
			setState(1848);
			referenced_type();
			setState(1849);
			match(RIGHT_PAREN);
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1850);
				scope_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_clauseContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Scope_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_clause; }
	}

	public final Scope_clauseContext scope_clause() throws RecognitionException {
		Scope_clauseContext _localctx = new Scope_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_scope_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1853);
			match(T__40);
			setState(1854);
			table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referenced_typeContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Referenced_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenced_type; }
	}

	public final Referenced_typeContext referenced_type() throws RecognitionException {
		Referenced_typeContext _localctx = new Referenced_typeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_referenced_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			path_resolved_user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_resolved_user_defined_type_nameContext extends ParserRuleContext {
		public User_defined_type_nameContext user_defined_type_name() {
			return getRuleContext(User_defined_type_nameContext.class,0);
		}
		public Path_resolved_user_defined_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_resolved_user_defined_type_name; }
	}

	public final Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() throws RecognitionException {
		Path_resolved_user_defined_type_nameContext _localctx = new Path_resolved_user_defined_type_nameContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_path_resolved_user_defined_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Maximum_cardinalityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public Maximum_cardinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maximum_cardinality; }
	}

	public final Maximum_cardinalityContext maximum_cardinality() throws RecognitionException {
		Maximum_cardinalityContext _localctx = new Maximum_cardinalityContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_maximum_cardinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1860);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_definitionContext extends ParserRuleContext {
		public Field_nameContext field_name() {
			return getRuleContext(Field_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Field_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_definition; }
	}

	public final Field_definitionContext field_definition() throws RecognitionException {
		Field_definitionContext _localctx = new Field_definitionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_field_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			field_name();
			setState(1863);
			data_type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Parenthesized_value_expressionContext parenthesized_value_expression() {
			return getRuleContext(Parenthesized_value_expressionContext.class,0);
		}
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Set_function_specificationContext set_function_specification() {
			return getRuleContext(Set_function_specificationContext.class,0);
		}
		public Window_functionContext window_function() {
			return getRuleContext(Window_functionContext.class,0);
		}
		public Nested_window_functionContext nested_window_function() {
			return getRuleContext(Nested_window_functionContext.class,0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return getRuleContext(Scalar_subqueryContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public Subtype_treatmentContext subtype_treatment() {
			return getRuleContext(Subtype_treatmentContext.class,0);
		}
		public Generalized_invocationContext generalized_invocation() {
			return getRuleContext(Generalized_invocationContext.class,0);
		}
		public Static_method_invocationContext static_method_invocation() {
			return getRuleContext(Static_method_invocationContext.class,0);
		}
		public New_specificationContext new_specification() {
			return getRuleContext(New_specificationContext.class,0);
		}
		public Reference_resolutionContext reference_resolution() {
			return getRuleContext(Reference_resolutionContext.class,0);
		}
		public Collection_value_constructorContext collection_value_constructor() {
			return getRuleContext(Collection_value_constructorContext.class,0);
		}
		public Array_value_functionContext array_value_function() {
			return getRuleContext(Array_value_functionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Multiset_element_referenceContext multiset_element_reference() {
			return getRuleContext(Multiset_element_referenceContext.class,0);
		}
		public Next_value_expressionContext next_value_expression() {
			return getRuleContext(Next_value_expressionContext.class,0);
		}
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Field_nameContext field_name() {
			return getRuleContext(Field_nameContext.class,0);
		}
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Dereference_operatorContext dereference_operator() {
			return getRuleContext(Dereference_operatorContext.class,0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(SQL2011Parser.CONCATENATION_OPERATOR, 0); }
		public Array_primaryContext array_primary() {
			return getRuleContext(Array_primaryContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		return value_expression_primary(0);
	}

	private Value_expression_primaryContext value_expression_primary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, _parentState);
		Value_expression_primaryContext _prevctx = _localctx;
		int _startState = 194;
		enterRecursionRule(_localctx, 194, RULE_value_expression_primary, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1866);
				parenthesized_value_expression();
				}
				break;
			case 2:
				{
				setState(1867);
				unsigned_value_specification();
				}
				break;
			case 3:
				{
				setState(1868);
				column_reference();
				}
				break;
			case 4:
				{
				setState(1869);
				set_function_specification();
				}
				break;
			case 5:
				{
				setState(1870);
				window_function();
				}
				break;
			case 6:
				{
				setState(1871);
				nested_window_function();
				}
				break;
			case 7:
				{
				setState(1872);
				scalar_subquery();
				}
				break;
			case 8:
				{
				setState(1873);
				case_expression();
				}
				break;
			case 9:
				{
				setState(1874);
				cast_specification();
				}
				break;
			case 10:
				{
				setState(1875);
				subtype_treatment();
				}
				break;
			case 11:
				{
				setState(1876);
				generalized_invocation();
				}
				break;
			case 12:
				{
				setState(1877);
				static_method_invocation();
				}
				break;
			case 13:
				{
				setState(1878);
				new_specification();
				}
				break;
			case 14:
				{
				setState(1879);
				reference_resolution();
				}
				break;
			case 15:
				{
				setState(1880);
				collection_value_constructor();
				}
				break;
			case 16:
				{
				setState(1881);
				array_value_function();
				setState(1882);
				match(LEFT_BRACKET_OR_TRIGRAPH);
				setState(1883);
				numeric_value_expression(0);
				setState(1884);
				match(RIGHT_BRACKET_OR_TRIGRAPH);
				}
				break;
			case 17:
				{
				setState(1886);
				multiset_element_reference();
				}
				break;
			case 18:
				{
				setState(1887);
				next_value_expression();
				}
				break;
			case 19:
				{
				setState(1888);
				routine_invocation();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1920);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1918);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
					case 1:
						{
						_localctx = new Value_expression_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_value_expression_primary);
						setState(1891);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(1892);
						match(PERIOD);
						setState(1893);
						field_name();
						}
						break;
					case 2:
						{
						_localctx = new Value_expression_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_value_expression_primary);
						setState(1894);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(1895);
						match(PERIOD);
						setState(1896);
						method_name();
						setState(1898);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
						case 1:
							{
							setState(1897);
							sql_argument_list();
							}
							break;
						}
						}
						break;
					case 3:
						{
						_localctx = new Value_expression_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_value_expression_primary);
						setState(1900);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(1901);
						dereference_operator();
						setState(1902);
						qualified_identifier();
						setState(1904);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
						case 1:
							{
							setState(1903);
							sql_argument_list();
							}
							break;
						}
						}
						break;
					case 4:
						{
						_localctx = new Value_expression_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_value_expression_primary);
						setState(1906);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(1907);
						match(CONCATENATION_OPERATOR);
						setState(1908);
						array_primary();
						setState(1909);
						match(LEFT_BRACKET_OR_TRIGRAPH);
						setState(1910);
						numeric_value_expression(0);
						setState(1911);
						match(RIGHT_BRACKET_OR_TRIGRAPH);
						}
						break;
					case 5:
						{
						_localctx = new Value_expression_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_value_expression_primary);
						setState(1913);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1914);
						match(LEFT_BRACKET_OR_TRIGRAPH);
						setState(1915);
						numeric_value_expression(0);
						setState(1916);
						match(RIGHT_BRACKET_OR_TRIGRAPH);
						}
						break;
					}
					} 
				}
				setState(1922);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Parenthesized_value_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Parenthesized_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_value_expression; }
	}

	public final Parenthesized_value_expressionContext parenthesized_value_expression() throws RecognitionException {
		Parenthesized_value_expressionContext _localctx = new Parenthesized_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_parenthesized_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923);
			match(LEFT_PAREN);
			setState(1924);
			value_expression();
			setState(1925);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_value_constructorContext extends ParserRuleContext {
		public Array_value_constructorContext array_value_constructor() {
			return getRuleContext(Array_value_constructorContext.class,0);
		}
		public Multiset_value_constructorContext multiset_value_constructor() {
			return getRuleContext(Multiset_value_constructorContext.class,0);
		}
		public Collection_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_value_constructor; }
	}

	public final Collection_value_constructorContext collection_value_constructor() throws RecognitionException {
		Collection_value_constructorContext _localctx = new Collection_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_collection_value_constructor);
		try {
			setState(1929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(1927);
				array_value_constructor();
				}
				break;
			case T__5:
			case T__165:
				enterOuterAlt(_localctx, 2);
				{
				setState(1928);
				multiset_value_constructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_specificationContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public Value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_specification; }
	}

	public final Value_specificationContext value_specification() throws RecognitionException {
		Value_specificationContext _localctx = new Value_specificationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_value_specification);
		try {
			setState(1933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1931);
				literal();
				}
				break;
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1932);
				general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public Unsigned_literalContext unsigned_literal() {
			return getRuleContext(Unsigned_literalContext.class,0);
		}
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_unsigned_value_specification);
		try {
			setState(1937);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERIOD:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1935);
				unsigned_literal();
				}
				break;
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1936);
				general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_value_specificationContext extends ParserRuleContext {
		public Host_parameter_specificationContext host_parameter_specification() {
			return getRuleContext(Host_parameter_specificationContext.class,0);
		}
		public Sql_parameter_referenceContext sql_parameter_reference() {
			return getRuleContext(Sql_parameter_referenceContext.class,0);
		}
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Embedded_variable_specificationContext embedded_variable_specification() {
			return getRuleContext(Embedded_variable_specificationContext.class,0);
		}
		public Current_collation_specificationContext current_collation_specification() {
			return getRuleContext(Current_collation_specificationContext.class,0);
		}
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public General_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_value_specification; }
	}

	public final General_value_specificationContext general_value_specification() throws RecognitionException {
		General_value_specificationContext _localctx = new General_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_general_value_specification);
		try {
			setState(1956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1939);
				host_parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1940);
				sql_parameter_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1941);
				dynamic_parameter_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1942);
				embedded_variable_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1943);
				current_collation_specification();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1944);
				match(T__41);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1945);
				match(T__42);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1946);
				match(T__43);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1947);
				match(T__44);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1948);
				match(T__45);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1949);
				match(T__46);
				setState(1950);
				path_resolved_user_defined_type_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1951);
				match(T__47);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1952);
				match(T__48);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1953);
				match(T__49);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1954);
				match(T__50);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1955);
				match(T__51);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specificationContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Host_parameter_nameContext host_parameter_name() {
			return getRuleContext(Host_parameter_nameContext.class,0);
		}
		public Sql_parameter_referenceContext sql_parameter_reference() {
			return getRuleContext(Sql_parameter_referenceContext.class,0);
		}
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Simple_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification; }
	}

	public final Simple_value_specificationContext simple_value_specification() throws RecognitionException {
		Simple_value_specificationContext _localctx = new Simple_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_simple_value_specification);
		try {
			setState(1962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1958);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1959);
				host_parameter_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1960);
				sql_parameter_reference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1961);
				embedded_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_specificationContext extends ParserRuleContext {
		public Host_parameter_specificationContext host_parameter_specification() {
			return getRuleContext(Host_parameter_specificationContext.class,0);
		}
		public Sql_parameter_referenceContext sql_parameter_reference() {
			return getRuleContext(Sql_parameter_referenceContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Target_array_element_specificationContext target_array_element_specification() {
			return getRuleContext(Target_array_element_specificationContext.class,0);
		}
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Embedded_variable_specificationContext embedded_variable_specification() {
			return getRuleContext(Embedded_variable_specificationContext.class,0);
		}
		public Target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_specification; }
	}

	public final Target_specificationContext target_specification() throws RecognitionException {
		Target_specificationContext _localctx = new Target_specificationContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_target_specification);
		try {
			setState(1970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1964);
				host_parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1965);
				sql_parameter_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1966);
				column_reference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1967);
				target_array_element_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1968);
				dynamic_parameter_specification();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1969);
				embedded_variable_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specificationContext extends ParserRuleContext {
		public Host_parameter_nameContext host_parameter_name() {
			return getRuleContext(Host_parameter_nameContext.class,0);
		}
		public Sql_parameter_referenceContext sql_parameter_reference() {
			return getRuleContext(Sql_parameter_referenceContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Simple_target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification; }
	}

	public final Simple_target_specificationContext simple_target_specification() throws RecognitionException {
		Simple_target_specificationContext _localctx = new Simple_target_specificationContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_simple_target_specification);
		try {
			setState(1976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1972);
				host_parameter_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1973);
				sql_parameter_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1974);
				column_reference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1975);
				embedded_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_parameter_specificationContext extends ParserRuleContext {
		public Host_parameter_nameContext host_parameter_name() {
			return getRuleContext(Host_parameter_nameContext.class,0);
		}
		public Indicator_parameterContext indicator_parameter() {
			return getRuleContext(Indicator_parameterContext.class,0);
		}
		public Host_parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_parameter_specification; }
	}

	public final Host_parameter_specificationContext host_parameter_specification() throws RecognitionException {
		Host_parameter_specificationContext _localctx = new Host_parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_host_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			host_parameter_name();
			setState(1980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1979);
				indicator_parameter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_parameter_specificationContext extends ParserRuleContext {
		public TerminalNode QUESTION_MARK() { return getToken(SQL2011Parser.QUESTION_MARK, 0); }
		public Dynamic_parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_parameter_specification; }
	}

	public final Dynamic_parameter_specificationContext dynamic_parameter_specification() throws RecognitionException {
		Dynamic_parameter_specificationContext _localctx = new Dynamic_parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_dynamic_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1982);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_variable_specificationContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Indicator_variableContext indicator_variable() {
			return getRuleContext(Indicator_variableContext.class,0);
		}
		public Embedded_variable_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_variable_specification; }
	}

	public final Embedded_variable_specificationContext embedded_variable_specification() throws RecognitionException {
		Embedded_variable_specificationContext _localctx = new Embedded_variable_specificationContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_embedded_variable_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1984);
			embedded_variable_name();
			setState(1986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1985);
				indicator_variable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_variableContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Indicator_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_variable; }
	}

	public final Indicator_variableContext indicator_variable() throws RecognitionException {
		Indicator_variableContext _localctx = new Indicator_variableContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indicator_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__52) {
				{
				setState(1988);
				match(T__52);
				}
			}

			setState(1991);
			embedded_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_parameterContext extends ParserRuleContext {
		public Host_parameter_nameContext host_parameter_name() {
			return getRuleContext(Host_parameter_nameContext.class,0);
		}
		public Indicator_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_parameter; }
	}

	public final Indicator_parameterContext indicator_parameter() throws RecognitionException {
		Indicator_parameterContext _localctx = new Indicator_parameterContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_indicator_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__52) {
				{
				setState(1993);
				match(T__52);
				}
			}

			setState(1996);
			host_parameter_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_array_element_specificationContext extends ParserRuleContext {
		public Target_array_referenceContext target_array_reference() {
			return getRuleContext(Target_array_referenceContext.class,0);
		}
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Target_array_element_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_array_element_specification; }
	}

	public final Target_array_element_specificationContext target_array_element_specification() throws RecognitionException {
		Target_array_element_specificationContext _localctx = new Target_array_element_specificationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_target_array_element_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1998);
			target_array_reference();
			setState(1999);
			match(LEFT_BRACKET_OR_TRIGRAPH);
			setState(2000);
			simple_value_specification();
			setState(2001);
			match(RIGHT_BRACKET_OR_TRIGRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_array_referenceContext extends ParserRuleContext {
		public Sql_parameter_referenceContext sql_parameter_reference() {
			return getRuleContext(Sql_parameter_referenceContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Target_array_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_array_reference; }
	}

	public final Target_array_referenceContext target_array_reference() throws RecognitionException {
		Target_array_referenceContext _localctx = new Target_array_referenceContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_target_array_reference);
		try {
			setState(2005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2003);
				sql_parameter_reference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2004);
				column_reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_collation_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Current_collation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_collation_specification; }
	}

	public final Current_collation_specificationContext current_collation_specification() throws RecognitionException {
		Current_collation_specificationContext _localctx = new Current_collation_specificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_current_collation_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2007);
			match(T__53);
			setState(2008);
			match(T__54);
			setState(2009);
			match(LEFT_PAREN);
			setState(2010);
			string_value_expression();
			setState(2011);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_value_specificationContext extends ParserRuleContext {
		public Implicitly_typed_value_specificationContext implicitly_typed_value_specification() {
			return getRuleContext(Implicitly_typed_value_specificationContext.class,0);
		}
		public Default_specificationContext default_specification() {
			return getRuleContext(Default_specificationContext.class,0);
		}
		public Contextually_typed_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_value_specification; }
	}

	public final Contextually_typed_value_specificationContext contextually_typed_value_specification() throws RecognitionException {
		Contextually_typed_value_specificationContext _localctx = new Contextually_typed_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_contextually_typed_value_specification);
		try {
			setState(2015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__4:
			case T__5:
			case T__55:
				enterOuterAlt(_localctx, 1);
				{
				setState(2013);
				implicitly_typed_value_specification();
				}
				break;
			case T__56:
				enterOuterAlt(_localctx, 2);
				{
				setState(2014);
				default_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicitly_typed_value_specificationContext extends ParserRuleContext {
		public Null_specificationContext null_specification() {
			return getRuleContext(Null_specificationContext.class,0);
		}
		public Empty_specificationContext empty_specification() {
			return getRuleContext(Empty_specificationContext.class,0);
		}
		public Implicitly_typed_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitly_typed_value_specification; }
	}

	public final Implicitly_typed_value_specificationContext implicitly_typed_value_specification() throws RecognitionException {
		Implicitly_typed_value_specificationContext _localctx = new Implicitly_typed_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_implicitly_typed_value_specification);
		try {
			setState(2019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__55:
				enterOuterAlt(_localctx, 1);
				{
				setState(2017);
				null_specification();
				}
				break;
			case T__4:
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				setState(2018);
				empty_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_specificationContext extends ParserRuleContext {
		public Null_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_specification; }
	}

	public final Null_specificationContext null_specification() throws RecognitionException {
		Null_specificationContext _localctx = new Null_specificationContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_null_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021);
			match(T__55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Empty_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_specification; }
	}

	public final Empty_specificationContext empty_specification() throws RecognitionException {
		Empty_specificationContext _localctx = new Empty_specificationContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_empty_specification);
		try {
			setState(2029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				match(T__4);
				setState(2024);
				match(LEFT_BRACKET_OR_TRIGRAPH);
				setState(2025);
				match(RIGHT_BRACKET_OR_TRIGRAPH);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				setState(2026);
				match(T__5);
				setState(2027);
				match(LEFT_BRACKET_OR_TRIGRAPH);
				setState(2028);
				match(RIGHT_BRACKET_OR_TRIGRAPH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_specificationContext extends ParserRuleContext {
		public Default_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_specification; }
	}

	public final Default_specificationContext default_specification() throws RecognitionException {
		Default_specificationContext _localctx = new Default_specificationContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_default_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2031);
			match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_chainContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(SQL2011Parser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(SQL2011Parser.PERIOD, i);
		}
		public Identifier_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_chain; }
	}

	public final Identifier_chainContext identifier_chain() throws RecognitionException {
		Identifier_chainContext _localctx = new Identifier_chainContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_identifier_chain);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2033);
			identifier();
			setState(2038);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2034);
					match(PERIOD);
					setState(2035);
					identifier();
					}
					} 
				}
				setState(2040);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Basic_identifier_chainContext extends ParserRuleContext {
		public Identifier_chainContext identifier_chain() {
			return getRuleContext(Identifier_chainContext.class,0);
		}
		public Basic_identifier_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basic_identifier_chain; }
	}

	public final Basic_identifier_chainContext basic_identifier_chain() throws RecognitionException {
		Basic_identifier_chainContext _localctx = new Basic_identifier_chainContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_basic_identifier_chain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2041);
			identifier_chain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_referenceContext extends ParserRuleContext {
		public Basic_identifier_chainContext basic_identifier_chain() {
			return getRuleContext(Basic_identifier_chainContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(SQL2011Parser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(SQL2011Parser.PERIOD, i);
		}
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference; }
	}

	public final Column_referenceContext column_reference() throws RecognitionException {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_column_reference);
		try {
			setState(2050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2043);
				basic_identifier_chain();
				}
				break;
			case T__1:
				enterOuterAlt(_localctx, 2);
				{
				setState(2044);
				match(T__1);
				setState(2045);
				match(PERIOD);
				setState(2046);
				qualified_identifier();
				setState(2047);
				match(PERIOD);
				setState(2048);
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_parameter_referenceContext extends ParserRuleContext {
		public Basic_identifier_chainContext basic_identifier_chain() {
			return getRuleContext(Basic_identifier_chainContext.class,0);
		}
		public Sql_parameter_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_parameter_reference; }
	}

	public final Sql_parameter_referenceContext sql_parameter_reference() throws RecognitionException {
		Sql_parameter_referenceContext _localctx = new Sql_parameter_referenceContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_sql_parameter_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			basic_identifier_chain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_specificationContext extends ParserRuleContext {
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Grouping_operationContext grouping_operation() {
			return getRuleContext(Grouping_operationContext.class,0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_specification; }
	}

	public final Set_function_specificationContext set_function_specification() throws RecognitionException {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_set_function_specification);
		try {
			setState(2056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
				enterOuterAlt(_localctx, 1);
				{
				setState(2054);
				aggregate_function();
				}
				break;
			case T__57:
				enterOuterAlt(_localctx, 2);
				{
				setState(2055);
				grouping_operation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_operationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Column_referenceContext> column_reference() {
			return getRuleContexts(Column_referenceContext.class);
		}
		public Column_referenceContext column_reference(int i) {
			return getRuleContext(Column_referenceContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Grouping_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_operation; }
	}

	public final Grouping_operationContext grouping_operation() throws RecognitionException {
		Grouping_operationContext _localctx = new Grouping_operationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_grouping_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2058);
			match(T__57);
			setState(2059);
			match(LEFT_PAREN);
			setState(2060);
			column_reference();
			setState(2065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2061);
				match(COMMA);
				setState(2062);
				column_reference();
				}
				}
				setState(2067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2068);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_functionContext extends ParserRuleContext {
		public Window_function_typeContext window_function_type() {
			return getRuleContext(Window_function_typeContext.class,0);
		}
		public Window_name_or_specificationContext window_name_or_specification() {
			return getRuleContext(Window_name_or_specificationContext.class,0);
		}
		public Window_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_function; }
	}

	public final Window_functionContext window_function() throws RecognitionException {
		Window_functionContext _localctx = new Window_functionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_window_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2070);
			window_function_type();
			setState(2071);
			match(T__58);
			setState(2072);
			window_name_or_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_function_typeContext extends ParserRuleContext {
		public Rank_function_typeContext rank_function_type() {
			return getRuleContext(Rank_function_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Ntile_functionContext ntile_function() {
			return getRuleContext(Ntile_functionContext.class,0);
		}
		public Lead_or_lag_functionContext lead_or_lag_function() {
			return getRuleContext(Lead_or_lag_functionContext.class,0);
		}
		public First_or_last_value_functionContext first_or_last_value_function() {
			return getRuleContext(First_or_last_value_functionContext.class,0);
		}
		public Nth_value_functionContext nth_value_function() {
			return getRuleContext(Nth_value_functionContext.class,0);
		}
		public Window_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_function_type; }
	}

	public final Window_function_typeContext window_function_type() throws RecognitionException {
		Window_function_typeContext _localctx = new Window_function_typeContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_window_function_type);
		try {
			setState(2086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2074);
				rank_function_type();
				setState(2075);
				match(LEFT_PAREN);
				setState(2076);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2078);
				match(T__59);
				setState(2079);
				match(LEFT_PAREN);
				setState(2080);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2081);
				aggregate_function();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2082);
				ntile_function();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2083);
				lead_or_lag_function();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2084);
				first_or_last_value_function();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2085);
				nth_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rank_function_typeContext extends ParserRuleContext {
		public Rank_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rank_function_type; }
	}

	public final Rank_function_typeContext rank_function_type() throws RecognitionException {
		Rank_function_typeContext _localctx = new Rank_function_typeContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_rank_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088);
			_la = _input.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (T__60 - 61)) | (1L << (T__61 - 61)) | (1L << (T__62 - 61)) | (1L << (T__63 - 61)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ntile_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Number_of_tilesContext number_of_tiles() {
			return getRuleContext(Number_of_tilesContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Ntile_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ntile_function; }
	}

	public final Ntile_functionContext ntile_function() throws RecognitionException {
		Ntile_functionContext _localctx = new Ntile_functionContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_ntile_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2090);
			match(T__64);
			setState(2091);
			match(LEFT_PAREN);
			setState(2092);
			number_of_tiles();
			setState(2093);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_of_tilesContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Number_of_tilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_of_tiles; }
	}

	public final Number_of_tilesContext number_of_tiles() throws RecognitionException {
		Number_of_tilesContext _localctx = new Number_of_tilesContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_number_of_tiles);
		try {
			setState(2097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2095);
				simple_value_specification();
				}
				break;
			case QUESTION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2096);
				dynamic_parameter_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lead_or_lag_functionContext extends ParserRuleContext {
		public Lead_or_lagContext lead_or_lag() {
			return getRuleContext(Lead_or_lagContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Lead_or_lag_extentContext lead_or_lag_extent() {
			return getRuleContext(Lead_or_lag_extentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public OffsetContext offset() {
			return getRuleContext(OffsetContext.class,0);
		}
		public Null_treatmentContext null_treatment() {
			return getRuleContext(Null_treatmentContext.class,0);
		}
		public Default_expressionContext default_expression() {
			return getRuleContext(Default_expressionContext.class,0);
		}
		public Lead_or_lag_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lead_or_lag_function; }
	}

	public final Lead_or_lag_functionContext lead_or_lag_function() throws RecognitionException {
		Lead_or_lag_functionContext _localctx = new Lead_or_lag_functionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_lead_or_lag_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2099);
			lead_or_lag();
			setState(2100);
			match(LEFT_PAREN);
			setState(2101);
			lead_or_lag_extent();
			setState(2108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2102);
				match(COMMA);
				setState(2103);
				offset();
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2104);
					match(COMMA);
					setState(2105);
					default_expression();
					}
				}

				}
			}

			setState(2110);
			match(RIGHT_PAREN);
			setState(2112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__67 || _la==T__69) {
				{
				setState(2111);
				null_treatment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lead_or_lagContext extends ParserRuleContext {
		public Lead_or_lagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lead_or_lag; }
	}

	public final Lead_or_lagContext lead_or_lag() throws RecognitionException {
		Lead_or_lagContext _localctx = new Lead_or_lagContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_lead_or_lag);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2114);
			_la = _input.LA(1);
			if ( !(_la==T__65 || _la==T__66) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lead_or_lag_extentContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Lead_or_lag_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lead_or_lag_extent; }
	}

	public final Lead_or_lag_extentContext lead_or_lag_extent() throws RecognitionException {
		Lead_or_lag_extentContext _localctx = new Lead_or_lag_extentContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_lead_or_lag_extent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2116);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetContext extends ParserRuleContext {
		public Exact_numeric_literalContext exact_numeric_literal() {
			return getRuleContext(Exact_numeric_literalContext.class,0);
		}
		public OffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset; }
	}

	public final OffsetContext offset() throws RecognitionException {
		OffsetContext _localctx = new OffsetContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_offset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2118);
			exact_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Default_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_expression; }
	}

	public final Default_expressionContext default_expression() throws RecognitionException {
		Default_expressionContext _localctx = new Default_expressionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_default_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2120);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_treatmentContext extends ParserRuleContext {
		public Null_treatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_treatment; }
	}

	public final Null_treatmentContext null_treatment() throws RecognitionException {
		Null_treatmentContext _localctx = new Null_treatmentContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_null_treatment);
		try {
			setState(2126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__67:
				enterOuterAlt(_localctx, 1);
				{
				setState(2122);
				match(T__67);
				setState(2123);
				match(T__68);
				}
				break;
			case T__69:
				enterOuterAlt(_localctx, 2);
				{
				setState(2124);
				match(T__69);
				setState(2125);
				match(T__68);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_last_value_functionContext extends ParserRuleContext {
		public First_or_last_valueContext first_or_last_value() {
			return getRuleContext(First_or_last_valueContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Null_treatmentContext null_treatment() {
			return getRuleContext(Null_treatmentContext.class,0);
		}
		public First_or_last_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_last_value_function; }
	}

	public final First_or_last_value_functionContext first_or_last_value_function() throws RecognitionException {
		First_or_last_value_functionContext _localctx = new First_or_last_value_functionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_first_or_last_value_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128);
			first_or_last_value();
			setState(2129);
			match(LEFT_PAREN);
			setState(2130);
			value_expression();
			setState(2131);
			match(RIGHT_PAREN);
			setState(2133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__67 || _la==T__69) {
				{
				setState(2132);
				null_treatment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_last_valueContext extends ParserRuleContext {
		public First_or_last_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_last_value; }
	}

	public final First_or_last_valueContext first_or_last_value() throws RecognitionException {
		First_or_last_valueContext _localctx = new First_or_last_valueContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_first_or_last_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			_la = _input.LA(1);
			if ( !(_la==T__70 || _la==T__71) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nth_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Nth_rowContext nth_row() {
			return getRuleContext(Nth_rowContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public From_first_or_lastContext from_first_or_last() {
			return getRuleContext(From_first_or_lastContext.class,0);
		}
		public Null_treatmentContext null_treatment() {
			return getRuleContext(Null_treatmentContext.class,0);
		}
		public Nth_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nth_value_function; }
	}

	public final Nth_value_functionContext nth_value_function() throws RecognitionException {
		Nth_value_functionContext _localctx = new Nth_value_functionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_nth_value_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2137);
			match(T__72);
			setState(2138);
			match(LEFT_PAREN);
			setState(2139);
			value_expression();
			setState(2140);
			match(COMMA);
			setState(2141);
			nth_row();
			setState(2142);
			match(RIGHT_PAREN);
			setState(2144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__73) {
				{
				setState(2143);
				from_first_or_last();
				}
			}

			setState(2147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__67 || _la==T__69) {
				{
				setState(2146);
				null_treatment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nth_rowContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Nth_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nth_row; }
	}

	public final Nth_rowContext nth_row() throws RecognitionException {
		Nth_rowContext _localctx = new Nth_rowContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_nth_row);
		try {
			setState(2151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2149);
				simple_value_specification();
				}
				break;
			case QUESTION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2150);
				dynamic_parameter_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_first_or_lastContext extends ParserRuleContext {
		public From_first_or_lastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_first_or_last; }
	}

	public final From_first_or_lastContext from_first_or_last() throws RecognitionException {
		From_first_or_lastContext _localctx = new From_first_or_lastContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_from_first_or_last);
		try {
			setState(2157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2153);
				match(T__73);
				setState(2154);
				match(T__74);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2155);
				match(T__73);
				setState(2156);
				match(T__75);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_name_or_specificationContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public In_line_window_specificationContext in_line_window_specification() {
			return getRuleContext(In_line_window_specificationContext.class,0);
		}
		public Window_name_or_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_name_or_specification; }
	}

	public final Window_name_or_specificationContext window_name_or_specification() throws RecognitionException {
		Window_name_or_specificationContext _localctx = new Window_name_or_specificationContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_window_name_or_specification);
		try {
			setState(2161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2159);
				window_name();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2160);
				in_line_window_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_line_window_specificationContext extends ParserRuleContext {
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public In_line_window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_line_window_specification; }
	}

	public final In_line_window_specificationContext in_line_window_specification() throws RecognitionException {
		In_line_window_specificationContext _localctx = new In_line_window_specificationContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_in_line_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_window_functionContext extends ParserRuleContext {
		public Nested_row_number_functionContext nested_row_number_function() {
			return getRuleContext(Nested_row_number_functionContext.class,0);
		}
		public Value_of_expression_at_rowContext value_of_expression_at_row() {
			return getRuleContext(Value_of_expression_at_rowContext.class,0);
		}
		public Nested_window_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_window_function; }
	}

	public final Nested_window_functionContext nested_window_function() throws RecognitionException {
		Nested_window_functionContext _localctx = new Nested_window_functionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_nested_window_function);
		try {
			setState(2167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__59:
				enterOuterAlt(_localctx, 1);
				{
				setState(2165);
				nested_row_number_function();
				}
				break;
			case T__76:
				enterOuterAlt(_localctx, 2);
				{
				setState(2166);
				value_of_expression_at_row();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_row_number_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Row_markerContext row_marker() {
			return getRuleContext(Row_markerContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Nested_row_number_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_row_number_function; }
	}

	public final Nested_row_number_functionContext nested_row_number_function() throws RecognitionException {
		Nested_row_number_functionContext _localctx = new Nested_row_number_functionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_nested_row_number_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2169);
			match(T__59);
			setState(2170);
			match(LEFT_PAREN);
			setState(2171);
			row_marker();
			setState(2172);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_expression_at_rowContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Row_marker_expressionContext row_marker_expression() {
			return getRuleContext(Row_marker_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Value_of_default_valueContext value_of_default_value() {
			return getRuleContext(Value_of_default_valueContext.class,0);
		}
		public Value_of_expression_at_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_expression_at_row; }
	}

	public final Value_of_expression_at_rowContext value_of_expression_at_row() throws RecognitionException {
		Value_of_expression_at_rowContext _localctx = new Value_of_expression_at_rowContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_value_of_expression_at_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			match(T__76);
			setState(2175);
			match(LEFT_PAREN);
			setState(2176);
			value_expression();
			setState(2177);
			match(T__77);
			setState(2178);
			row_marker_expression();
			setState(2181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2179);
				match(COMMA);
				setState(2180);
				value_of_default_value();
				}
			}

			setState(2183);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_markerContext extends ParserRuleContext {
		public Row_markerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_marker; }
	}

	public final Row_markerContext row_marker() throws RecognitionException {
		Row_markerContext _localctx = new Row_markerContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_row_marker);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			_la = _input.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (T__78 - 79)) | (1L << (T__79 - 79)) | (1L << (T__80 - 79)) | (1L << (T__81 - 79)) | (1L << (T__82 - 79)) | (1L << (T__83 - 79)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_marker_expressionContext extends ParserRuleContext {
		public Row_markerContext row_marker() {
			return getRuleContext(Row_markerContext.class,0);
		}
		public Row_marker_deltaContext row_marker_delta() {
			return getRuleContext(Row_marker_deltaContext.class,0);
		}
		public Row_marker_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_marker_expression; }
	}

	public final Row_marker_expressionContext row_marker_expression() throws RecognitionException {
		Row_marker_expressionContext _localctx = new Row_marker_expressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_row_marker_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			row_marker();
			setState(2189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2188);
				row_marker_delta();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_marker_deltaContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public Row_marker_offsetContext row_marker_offset() {
			return getRuleContext(Row_marker_offsetContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public Row_marker_deltaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_marker_delta; }
	}

	public final Row_marker_deltaContext row_marker_delta() throws RecognitionException {
		Row_marker_deltaContext _localctx = new Row_marker_deltaContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_row_marker_delta);
		try {
			setState(2195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2191);
				match(PLUS_SIGN);
				setState(2192);
				row_marker_offset();
				}
				break;
			case MINUS_SIGN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2193);
				match(MINUS_SIGN);
				setState(2194);
				row_marker_offset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_marker_offsetContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Row_marker_offsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_marker_offset; }
	}

	public final Row_marker_offsetContext row_marker_offset() throws RecognitionException {
		Row_marker_offsetContext _localctx = new Row_marker_offsetContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_row_marker_offset);
		try {
			setState(2199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2197);
				simple_value_specification();
				}
				break;
			case QUESTION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2198);
				dynamic_parameter_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_default_valueContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Value_of_default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_default_value; }
	}

	public final Value_of_default_valueContext value_of_default_value() throws RecognitionException {
		Value_of_default_valueContext _localctx = new Value_of_default_valueContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_value_of_default_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public Case_abbreviationContext case_abbreviation() {
			return getRuleContext(Case_abbreviationContext.class,0);
		}
		public Case_specificationContext case_specification() {
			return getRuleContext(Case_specificationContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_case_expression);
		try {
			setState(2205);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__84:
			case T__85:
				enterOuterAlt(_localctx, 1);
				{
				setState(2203);
				case_abbreviation();
				}
				break;
			case T__86:
				enterOuterAlt(_localctx, 2);
				{
				setState(2204);
				case_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_abbreviationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_abbreviation; }
	}

	public final Case_abbreviationContext case_abbreviation() throws RecognitionException {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_case_abbreviation);
		int _la;
		try {
			setState(2225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__84:
				enterOuterAlt(_localctx, 1);
				{
				setState(2207);
				match(T__84);
				setState(2208);
				match(LEFT_PAREN);
				setState(2209);
				value_expression();
				setState(2210);
				match(COMMA);
				setState(2211);
				value_expression();
				setState(2212);
				match(RIGHT_PAREN);
				}
				break;
			case T__85:
				enterOuterAlt(_localctx, 2);
				{
				setState(2214);
				match(T__85);
				setState(2215);
				match(LEFT_PAREN);
				setState(2216);
				value_expression();
				setState(2219); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2217);
					match(COMMA);
					setState(2218);
					value_expression();
					}
					}
					setState(2221); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2223);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_specificationContext extends ParserRuleContext {
		public Simple_caseContext simple_case() {
			return getRuleContext(Simple_caseContext.class,0);
		}
		public Searched_caseContext searched_case() {
			return getRuleContext(Searched_caseContext.class,0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_specification; }
	}

	public final Case_specificationContext case_specification() throws RecognitionException {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_case_specification);
		try {
			setState(2229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2227);
				simple_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2228);
				searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_caseContext extends ParserRuleContext {
		public Case_operandContext case_operand() {
			return getRuleContext(Case_operandContext.class,0);
		}
		public List<Simple_when_clauseContext> simple_when_clause() {
			return getRuleContexts(Simple_when_clauseContext.class);
		}
		public Simple_when_clauseContext simple_when_clause(int i) {
			return getRuleContext(Simple_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public Simple_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case; }
	}

	public final Simple_caseContext simple_case() throws RecognitionException {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_simple_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2231);
			match(T__86);
			setState(2232);
			case_operand();
			setState(2234); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2233);
				simple_when_clause();
				}
				}
				setState(2236); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__88 );
			setState(2239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__90) {
				{
				setState(2238);
				else_clause();
				}
			}

			setState(2241);
			match(T__87);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_caseContext extends ParserRuleContext {
		public List<Searched_when_clauseContext> searched_when_clause() {
			return getRuleContexts(Searched_when_clauseContext.class);
		}
		public Searched_when_clauseContext searched_when_clause(int i) {
			return getRuleContext(Searched_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public Searched_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case; }
	}

	public final Searched_caseContext searched_case() throws RecognitionException {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_searched_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			match(T__86);
			setState(2245); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2244);
				searched_when_clause();
				}
				}
				setState(2247); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__88 );
			setState(2250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__90) {
				{
				setState(2249);
				else_clause();
				}
			}

			setState(2252);
			match(T__87);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_when_clauseContext extends ParserRuleContext {
		public When_operand_listContext when_operand_list() {
			return getRuleContext(When_operand_listContext.class,0);
		}
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_when_clause; }
	}

	public final Simple_when_clauseContext simple_when_clause() throws RecognitionException {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_simple_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			match(T__88);
			setState(2255);
			when_operand_list();
			setState(2256);
			match(T__89);
			setState(2257);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_when_clauseContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_when_clause; }
	}

	public final Searched_when_clauseContext searched_when_clause() throws RecognitionException {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_searched_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(T__88);
			setState(2260);
			search_condition();
			setState(2261);
			match(T__89);
			setState(2262);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_clause; }
	}

	public final Else_clauseContext else_clause() throws RecognitionException {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_else_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			match(T__90);
			setState(2265);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_operandContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Overlaps_predicate_part_1Context overlaps_predicate_part_1() {
			return getRuleContext(Overlaps_predicate_part_1Context.class,0);
		}
		public Case_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_operand; }
	}

	public final Case_operandContext case_operand() throws RecognitionException {
		Case_operandContext _localctx = new Case_operandContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_case_operand);
		try {
			setState(2269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2267);
				row_value_predicand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2268);
				overlaps_predicate_part_1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_operand_listContext extends ParserRuleContext {
		public List<When_operandContext> when_operand() {
			return getRuleContexts(When_operandContext.class);
		}
		public When_operandContext when_operand(int i) {
			return getRuleContext(When_operandContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public When_operand_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_operand_list; }
	}

	public final When_operand_listContext when_operand_list() throws RecognitionException {
		When_operand_listContext _localctx = new When_operand_listContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_when_operand_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2271);
			when_operand();
			setState(2276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2272);
				match(COMMA);
				setState(2273);
				when_operand();
				}
				}
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_operandContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Comparison_predicate_part_2Context comparison_predicate_part_2() {
			return getRuleContext(Comparison_predicate_part_2Context.class,0);
		}
		public Between_predicate_part_2Context between_predicate_part_2() {
			return getRuleContext(Between_predicate_part_2Context.class,0);
		}
		public In_predicate_part_2Context in_predicate_part_2() {
			return getRuleContext(In_predicate_part_2Context.class,0);
		}
		public Character_like_predicate_part_2Context character_like_predicate_part_2() {
			return getRuleContext(Character_like_predicate_part_2Context.class,0);
		}
		public Octet_like_predicate_part_2Context octet_like_predicate_part_2() {
			return getRuleContext(Octet_like_predicate_part_2Context.class,0);
		}
		public Similar_predicate_part_2Context similar_predicate_part_2() {
			return getRuleContext(Similar_predicate_part_2Context.class,0);
		}
		public Regex_like_predicate_part_2Context regex_like_predicate_part_2() {
			return getRuleContext(Regex_like_predicate_part_2Context.class,0);
		}
		public Null_predicate_part_2Context null_predicate_part_2() {
			return getRuleContext(Null_predicate_part_2Context.class,0);
		}
		public Quantified_comparison_predicate_part_2Context quantified_comparison_predicate_part_2() {
			return getRuleContext(Quantified_comparison_predicate_part_2Context.class,0);
		}
		public Normalized_predicate_part_2Context normalized_predicate_part_2() {
			return getRuleContext(Normalized_predicate_part_2Context.class,0);
		}
		public Match_predicate_part_2Context match_predicate_part_2() {
			return getRuleContext(Match_predicate_part_2Context.class,0);
		}
		public Overlaps_predicate_part_2Context overlaps_predicate_part_2() {
			return getRuleContext(Overlaps_predicate_part_2Context.class,0);
		}
		public Distinct_predicate_part_2Context distinct_predicate_part_2() {
			return getRuleContext(Distinct_predicate_part_2Context.class,0);
		}
		public Member_predicate_part_2Context member_predicate_part_2() {
			return getRuleContext(Member_predicate_part_2Context.class,0);
		}
		public Submultiset_predicate_part_2Context submultiset_predicate_part_2() {
			return getRuleContext(Submultiset_predicate_part_2Context.class,0);
		}
		public Set_predicate_part_2Context set_predicate_part_2() {
			return getRuleContext(Set_predicate_part_2Context.class,0);
		}
		public Type_predicate_part_2Context type_predicate_part_2() {
			return getRuleContext(Type_predicate_part_2Context.class,0);
		}
		public When_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_operand; }
	}

	public final When_operandContext when_operand() throws RecognitionException {
		When_operandContext _localctx = new When_operandContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_when_operand);
		try {
			setState(2297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2279);
				row_value_predicand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2280);
				comparison_predicate_part_2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2281);
				between_predicate_part_2();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2282);
				in_predicate_part_2();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2283);
				character_like_predicate_part_2();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2284);
				octet_like_predicate_part_2();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2285);
				similar_predicate_part_2();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2286);
				regex_like_predicate_part_2();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2287);
				null_predicate_part_2();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2288);
				quantified_comparison_predicate_part_2();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2289);
				normalized_predicate_part_2();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2290);
				match_predicate_part_2();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2291);
				overlaps_predicate_part_2();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2292);
				distinct_predicate_part_2();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2293);
				member_predicate_part_2();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2294);
				submultiset_predicate_part_2();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2295);
				set_predicate_part_2();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2296);
				type_predicate_part_2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultContext extends ParserRuleContext {
		public Result_expressionContext result_expression() {
			return getRuleContext(Result_expressionContext.class,0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_result);
		try {
			setState(2301);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__7:
			case T__38:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__136:
			case T__140:
			case T__142:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__155:
			case T__160:
			case T__162:
			case T__165:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__236:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2299);
				result_expression();
				}
				break;
			case T__55:
				enterOuterAlt(_localctx, 2);
				{
				setState(2300);
				match(T__55);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Result_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_expression; }
	}

	public final Result_expressionContext result_expression() throws RecognitionException {
		Result_expressionContext _localctx = new Result_expressionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_result_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Cast_operandContext cast_operand() {
			return getRuleContext(Cast_operandContext.class,0);
		}
		public Cast_targetContext cast_target() {
			return getRuleContext(Cast_targetContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_cast_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			match(T__91);
			setState(2306);
			match(LEFT_PAREN);
			setState(2307);
			cast_operand();
			setState(2308);
			match(T__92);
			setState(2309);
			cast_target();
			setState(2310);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Implicitly_typed_value_specificationContext implicitly_typed_value_specification() {
			return getRuleContext(Implicitly_typed_value_specificationContext.class,0);
		}
		public Cast_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_operand; }
	}

	public final Cast_operandContext cast_operand() throws RecognitionException {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_cast_operand);
		try {
			setState(2314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2312);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2313);
				implicitly_typed_value_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_targetContext extends ParserRuleContext {
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_target; }
	}

	public final Cast_targetContext cast_target() throws RecognitionException {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_cast_target);
		try {
			setState(2318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2316);
				domain_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2317);
				data_type(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Next_value_expressionContext extends ParserRuleContext {
		public Sequence_generator_nameContext sequence_generator_name() {
			return getRuleContext(Sequence_generator_nameContext.class,0);
		}
		public Next_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_next_value_expression; }
	}

	public final Next_value_expressionContext next_value_expression() throws RecognitionException {
		Next_value_expressionContext _localctx = new Next_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_next_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2320);
			match(T__93);
			setState(2321);
			match(T__51);
			setState(2322);
			match(T__54);
			setState(2323);
			sequence_generator_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_treatmentContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Subtype_operandContext subtype_operand() {
			return getRuleContext(Subtype_operandContext.class,0);
		}
		public Target_subtypeContext target_subtype() {
			return getRuleContext(Target_subtypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Subtype_treatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_treatment; }
	}

	public final Subtype_treatmentContext subtype_treatment() throws RecognitionException {
		Subtype_treatmentContext _localctx = new Subtype_treatmentContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_subtype_treatment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325);
			match(T__94);
			setState(2326);
			match(LEFT_PAREN);
			setState(2327);
			subtype_operand();
			setState(2328);
			match(T__92);
			setState(2329);
			target_subtype();
			setState(2330);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Subtype_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_operand; }
	}

	public final Subtype_operandContext subtype_operand() throws RecognitionException {
		Subtype_operandContext _localctx = new Subtype_operandContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_subtype_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_subtypeContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Reference_typeContext reference_type() {
			return getRuleContext(Reference_typeContext.class,0);
		}
		public Target_subtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_subtype; }
	}

	public final Target_subtypeContext target_subtype() throws RecognitionException {
		Target_subtypeContext _localctx = new Target_subtypeContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_target_subtype);
		try {
			setState(2336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2334);
				path_resolved_user_defined_type_name();
				}
				break;
			case T__39:
				enterOuterAlt(_localctx, 2);
				{
				setState(2335);
				reference_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_invocationContext extends ParserRuleContext {
		public Direct_invocationContext direct_invocation() {
			return getRuleContext(Direct_invocationContext.class,0);
		}
		public Generalized_invocationContext generalized_invocation() {
			return getRuleContext(Generalized_invocationContext.class,0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_invocation; }
	}

	public final Method_invocationContext method_invocation() throws RecognitionException {
		Method_invocationContext _localctx = new Method_invocationContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_method_invocation);
		try {
			setState(2340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2338);
				direct_invocation();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2339);
				generalized_invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_invocationContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Direct_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_invocation; }
	}

	public final Direct_invocationContext direct_invocation() throws RecognitionException {
		Direct_invocationContext _localctx = new Direct_invocationContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_direct_invocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			value_expression_primary(0);
			setState(2343);
			match(PERIOD);
			setState(2344);
			method_name();
			setState(2346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2345);
				sql_argument_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generalized_invocationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Generalized_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalized_invocation; }
	}

	public final Generalized_invocationContext generalized_invocation() throws RecognitionException {
		Generalized_invocationContext _localctx = new Generalized_invocationContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_generalized_invocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			match(LEFT_PAREN);
			setState(2349);
			value_expression_primary(0);
			setState(2350);
			match(T__92);
			setState(2351);
			data_type(0);
			setState(2352);
			match(RIGHT_PAREN);
			setState(2353);
			match(PERIOD);
			setState(2354);
			method_name();
			setState(2356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(2355);
				sql_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_selectionContext extends ParserRuleContext {
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Method_selectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_selection; }
	}

	public final Method_selectionContext method_selection() throws RecognitionException {
		Method_selectionContext _localctx = new Method_selectionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_method_selection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2358);
			routine_invocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_method_selectionContext extends ParserRuleContext {
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Constructor_method_selectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_method_selection; }
	}

	public final Constructor_method_selectionContext constructor_method_selection() throws RecognitionException {
		Constructor_method_selectionContext _localctx = new Constructor_method_selectionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_constructor_method_selection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2360);
			routine_invocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_method_invocationContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(SQL2011Parser.DOUBLE_COLON, 0); }
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Static_method_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_method_invocation; }
	}

	public final Static_method_invocationContext static_method_invocation() throws RecognitionException {
		Static_method_invocationContext _localctx = new Static_method_invocationContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_static_method_invocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			path_resolved_user_defined_type_name();
			setState(2363);
			match(DOUBLE_COLON);
			setState(2364);
			method_name();
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(2365);
				sql_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_method_selectionContext extends ParserRuleContext {
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Static_method_selectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_method_selection; }
	}

	public final Static_method_selectionContext static_method_selection() throws RecognitionException {
		Static_method_selectionContext _localctx = new Static_method_selectionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_static_method_selection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			routine_invocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_specificationContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public New_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_specification; }
	}

	public final New_specificationContext new_specification() throws RecognitionException {
		New_specificationContext _localctx = new New_specificationContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_new_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(T__95);
			setState(2371);
			path_resolved_user_defined_type_name();
			setState(2372);
			sql_argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_invocationContext extends ParserRuleContext {
		public Method_invocationContext method_invocation() {
			return getRuleContext(Method_invocationContext.class,0);
		}
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public New_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_invocation; }
	}

	public final New_invocationContext new_invocation() throws RecognitionException {
		New_invocationContext _localctx = new New_invocationContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_new_invocation);
		try {
			setState(2376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2374);
				method_invocation();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2375);
				routine_invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dereference_operatorContext extends ParserRuleContext {
		public TerminalNode RIGHT_ARROW() { return getToken(SQL2011Parser.RIGHT_ARROW, 0); }
		public Dereference_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dereference_operator; }
	}

	public final Dereference_operatorContext dereference_operator() throws RecognitionException {
		Dereference_operatorContext _localctx = new Dereference_operatorContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_dereference_operator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2378);
			match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dereference_operationContext extends ParserRuleContext {
		public Reference_value_expressionContext reference_value_expression() {
			return getRuleContext(Reference_value_expressionContext.class,0);
		}
		public Dereference_operatorContext dereference_operator() {
			return getRuleContext(Dereference_operatorContext.class,0);
		}
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Dereference_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dereference_operation; }
	}

	public final Dereference_operationContext dereference_operation() throws RecognitionException {
		Dereference_operationContext _localctx = new Dereference_operationContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_dereference_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			reference_value_expression();
			setState(2381);
			dereference_operator();
			setState(2382);
			attribute_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_referenceContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Dereference_operatorContext dereference_operator() {
			return getRuleContext(Dereference_operatorContext.class,0);
		}
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Method_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_reference; }
	}

	public final Method_referenceContext method_reference() throws RecognitionException {
		Method_referenceContext _localctx = new Method_referenceContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_method_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			value_expression_primary(0);
			setState(2385);
			dereference_operator();
			setState(2386);
			method_name();
			setState(2387);
			sql_argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_resolutionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Reference_value_expressionContext reference_value_expression() {
			return getRuleContext(Reference_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Reference_resolutionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_resolution; }
	}

	public final Reference_resolutionContext reference_resolution() throws RecognitionException {
		Reference_resolutionContext _localctx = new Reference_resolutionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_reference_resolution);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2389);
			match(T__96);
			setState(2390);
			match(LEFT_PAREN);
			setState(2391);
			reference_value_expression();
			setState(2392);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_element_referenceContext extends ParserRuleContext {
		public Array_value_expressionContext array_value_expression() {
			return getRuleContext(Array_value_expressionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Array_element_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_element_reference; }
	}

	public final Array_element_referenceContext array_element_reference() throws RecognitionException {
		Array_element_referenceContext _localctx = new Array_element_referenceContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_array_element_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			array_value_expression(0);
			setState(2395);
			match(LEFT_BRACKET_OR_TRIGRAPH);
			setState(2396);
			numeric_value_expression(0);
			setState(2397);
			match(RIGHT_BRACKET_OR_TRIGRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_element_referenceContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Multiset_element_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_element_reference; }
	}

	public final Multiset_element_referenceContext multiset_element_reference() throws RecognitionException {
		Multiset_element_referenceContext _localctx = new Multiset_element_referenceContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_multiset_element_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(T__97);
			setState(2400);
			match(LEFT_PAREN);
			setState(2401);
			multiset_value_expression(0);
			setState(2402);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expressionContext extends ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Row_value_expressionContext row_value_expression() {
			return getRuleContext(Row_value_expressionContext.class,0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression; }
	}

	public final Value_expressionContext value_expression() throws RecognitionException {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_value_expression);
		try {
			setState(2407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2404);
				common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2405);
				boolean_value_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2406);
				row_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_value_expressionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public User_defined_type_value_expressionContext user_defined_type_value_expression() {
			return getRuleContext(User_defined_type_value_expressionContext.class,0);
		}
		public Reference_value_expressionContext reference_value_expression() {
			return getRuleContext(Reference_value_expressionContext.class,0);
		}
		public Collection_value_expressionContext collection_value_expression() {
			return getRuleContext(Collection_value_expressionContext.class,0);
		}
		public Common_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_value_expression; }
	}

	public final Common_value_expressionContext common_value_expression() throws RecognitionException {
		Common_value_expressionContext _localctx = new Common_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_common_value_expression);
		try {
			setState(2416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2409);
				numeric_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2410);
				string_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2411);
				datetime_value_expression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2412);
				interval_value_expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2413);
				user_defined_type_value_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2414);
				reference_value_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2415);
				collection_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_defined_type_value_expressionContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public User_defined_type_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_defined_type_value_expression; }
	}

	public final User_defined_type_value_expressionContext user_defined_type_value_expression() throws RecognitionException {
		User_defined_type_value_expressionContext _localctx = new User_defined_type_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_user_defined_type_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			value_expression_primary(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_value_expressionContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Reference_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_value_expression; }
	}

	public final Reference_value_expressionContext reference_value_expression() throws RecognitionException {
		Reference_value_expressionContext _localctx = new Reference_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_reference_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			value_expression_primary(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_value_expressionContext extends ParserRuleContext {
		public Array_value_expressionContext array_value_expression() {
			return getRuleContext(Array_value_expressionContext.class,0);
		}
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public Collection_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_value_expression; }
	}

	public final Collection_value_expressionContext collection_value_expression() throws RecognitionException {
		Collection_value_expressionContext _localctx = new Collection_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_collection_value_expression);
		try {
			setState(2424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2422);
				array_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2423);
				multiset_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expressionContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression; }
	}

	public final Numeric_value_expressionContext numeric_value_expression() throws RecognitionException {
		return numeric_value_expression(0);
	}

	private Numeric_value_expressionContext numeric_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, _parentState);
		Numeric_value_expressionContext _prevctx = _localctx;
		int _startState = 382;
		enterRecursionRule(_localctx, 382, RULE_numeric_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2427);
			term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2437);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2435);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
					case 1:
						{
						_localctx = new Numeric_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_numeric_value_expression);
						setState(2429);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2430);
						match(PLUS_SIGN);
						setState(2431);
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new Numeric_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_numeric_value_expression);
						setState(2432);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2433);
						match(MINUS_SIGN);
						setState(2434);
						term(0);
						}
						break;
					}
					} 
				}
				setState(2439);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(SQL2011Parser.SOLIDUS, 0); }
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
	}

	public final TermContext term() throws RecognitionException {
		return term(0);
	}

	private TermContext term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 384;
		enterRecursionRule(_localctx, 384, RULE_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2441);
			factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2451);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2449);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_term);
						setState(2443);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2444);
						match(ASTERISK);
						setState(2445);
						factor();
						}
						break;
					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_term);
						setState(2446);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2447);
						match(SOLIDUS);
						setState(2448);
						factor();
						}
						break;
					}
					} 
				}
				setState(2453);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return getRuleContext(Numeric_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2454);
				sign();
				}
			}

			setState(2457);
			numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_primaryContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Numeric_value_functionContext numeric_value_function() {
			return getRuleContext(Numeric_value_functionContext.class,0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_primary; }
	}

	public final Numeric_primaryContext numeric_primary() throws RecognitionException {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_numeric_primary);
		try {
			setState(2461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__160:
			case T__165:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case LEFT_PAREN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2459);
				value_expression_primary(0);
				}
				break;
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
				enterOuterAlt(_localctx, 2);
				{
				setState(2460);
				numeric_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_functionContext extends ParserRuleContext {
		public Position_expressionContext position_expression() {
			return getRuleContext(Position_expressionContext.class,0);
		}
		public Regex_occurrences_functionContext regex_occurrences_function() {
			return getRuleContext(Regex_occurrences_functionContext.class,0);
		}
		public Regex_position_expressionContext regex_position_expression() {
			return getRuleContext(Regex_position_expressionContext.class,0);
		}
		public Extract_expressionContext extract_expression() {
			return getRuleContext(Extract_expressionContext.class,0);
		}
		public Length_expressionContext length_expression() {
			return getRuleContext(Length_expressionContext.class,0);
		}
		public Cardinality_expressionContext cardinality_expression() {
			return getRuleContext(Cardinality_expressionContext.class,0);
		}
		public Max_cardinality_expressionContext max_cardinality_expression() {
			return getRuleContext(Max_cardinality_expressionContext.class,0);
		}
		public Absolute_value_expressionContext absolute_value_expression() {
			return getRuleContext(Absolute_value_expressionContext.class,0);
		}
		public Modulus_expressionContext modulus_expression() {
			return getRuleContext(Modulus_expressionContext.class,0);
		}
		public Trigonometric_functionContext trigonometric_function() {
			return getRuleContext(Trigonometric_functionContext.class,0);
		}
		public General_logarithm_functionContext general_logarithm_function() {
			return getRuleContext(General_logarithm_functionContext.class,0);
		}
		public Common_logarithmContext common_logarithm() {
			return getRuleContext(Common_logarithmContext.class,0);
		}
		public Natural_logarithmContext natural_logarithm() {
			return getRuleContext(Natural_logarithmContext.class,0);
		}
		public Exponential_functionContext exponential_function() {
			return getRuleContext(Exponential_functionContext.class,0);
		}
		public Power_functionContext power_function() {
			return getRuleContext(Power_functionContext.class,0);
		}
		public Square_rootContext square_root() {
			return getRuleContext(Square_rootContext.class,0);
		}
		public Floor_functionContext floor_function() {
			return getRuleContext(Floor_functionContext.class,0);
		}
		public Ceiling_functionContext ceiling_function() {
			return getRuleContext(Ceiling_functionContext.class,0);
		}
		public Width_bucket_functionContext width_bucket_function() {
			return getRuleContext(Width_bucket_functionContext.class,0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_function; }
	}

	public final Numeric_value_functionContext numeric_value_function() throws RecognitionException {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_numeric_value_function);
		try {
			setState(2482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__107:
				enterOuterAlt(_localctx, 1);
				{
				setState(2463);
				position_expression();
				}
				break;
			case T__98:
				enterOuterAlt(_localctx, 2);
				{
				setState(2464);
				regex_occurrences_function();
				}
				break;
			case T__102:
				enterOuterAlt(_localctx, 3);
				{
				setState(2465);
				regex_position_expression();
				}
				break;
			case T__111:
				enterOuterAlt(_localctx, 4);
				{
				setState(2466);
				extract_expression();
				}
				break;
			case T__108:
			case T__109:
			case T__110:
				enterOuterAlt(_localctx, 5);
				{
				setState(2467);
				length_expression();
				}
				break;
			case T__114:
				enterOuterAlt(_localctx, 6);
				{
				setState(2468);
				cardinality_expression();
				}
				break;
			case T__115:
				enterOuterAlt(_localctx, 7);
				{
				setState(2469);
				max_cardinality_expression();
				}
				break;
			case T__116:
				enterOuterAlt(_localctx, 8);
				{
				setState(2470);
				absolute_value_expression();
				}
				break;
			case T__117:
				enterOuterAlt(_localctx, 9);
				{
				setState(2471);
				modulus_expression();
				}
				break;
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
				enterOuterAlt(_localctx, 10);
				{
				setState(2472);
				trigonometric_function();
				}
				break;
			case T__352:
				enterOuterAlt(_localctx, 11);
				{
				setState(2473);
				general_logarithm_function();
				}
				break;
			case T__353:
				enterOuterAlt(_localctx, 12);
				{
				setState(2474);
				common_logarithm();
				}
				break;
			case T__118:
				enterOuterAlt(_localctx, 13);
				{
				setState(2475);
				natural_logarithm();
				}
				break;
			case T__119:
				enterOuterAlt(_localctx, 14);
				{
				setState(2476);
				exponential_function();
				}
				break;
			case T__120:
				enterOuterAlt(_localctx, 15);
				{
				setState(2477);
				power_function();
				}
				break;
			case T__121:
				enterOuterAlt(_localctx, 16);
				{
				setState(2478);
				square_root();
				}
				break;
			case T__122:
				enterOuterAlt(_localctx, 17);
				{
				setState(2479);
				floor_function();
				}
				break;
			case T__123:
			case T__124:
				enterOuterAlt(_localctx, 18);
				{
				setState(2480);
				ceiling_function();
				}
				break;
			case T__125:
				enterOuterAlt(_localctx, 19);
				{
				setState(2481);
				width_bucket_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_expressionContext extends ParserRuleContext {
		public Character_position_expressionContext character_position_expression() {
			return getRuleContext(Character_position_expressionContext.class,0);
		}
		public Binary_position_expressionContext binary_position_expression() {
			return getRuleContext(Binary_position_expressionContext.class,0);
		}
		public Position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_expression; }
	}

	public final Position_expressionContext position_expression() throws RecognitionException {
		Position_expressionContext _localctx = new Position_expressionContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_position_expression);
		try {
			setState(2486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2484);
				character_position_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2485);
				binary_position_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_occurrences_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Xquery_patternContext xquery_pattern() {
			return getRuleContext(Xquery_patternContext.class,0);
		}
		public Regex_subject_stringContext regex_subject_string() {
			return getRuleContext(Regex_subject_stringContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Xquery_option_flagContext xquery_option_flag() {
			return getRuleContext(Xquery_option_flagContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Regex_occurrences_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_occurrences_function; }
	}

	public final Regex_occurrences_functionContext regex_occurrences_function() throws RecognitionException {
		Regex_occurrences_functionContext _localctx = new Regex_occurrences_functionContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_regex_occurrences_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			match(T__98);
			setState(2489);
			match(LEFT_PAREN);
			setState(2490);
			xquery_pattern();
			setState(2493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__99) {
				{
				setState(2491);
				match(T__99);
				setState(2492);
				xquery_option_flag();
				}
			}

			setState(2495);
			match(T__100);
			setState(2496);
			regex_subject_string();
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__73) {
				{
				setState(2497);
				match(T__73);
				setState(2498);
				start_position();
				}
			}

			setState(2503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2501);
				match(T__101);
				setState(2502);
				char_length_units();
				}
			}

			setState(2505);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xquery_patternContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Xquery_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xquery_pattern; }
	}

	public final Xquery_patternContext xquery_pattern() throws RecognitionException {
		Xquery_patternContext _localctx = new Xquery_patternContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_xquery_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2507);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xquery_option_flagContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Xquery_option_flagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xquery_option_flag; }
	}

	public final Xquery_option_flagContext xquery_option_flag() throws RecognitionException {
		Xquery_option_flagContext _localctx = new Xquery_option_flagContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_xquery_option_flag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_subject_stringContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Regex_subject_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_subject_string; }
	}

	public final Regex_subject_stringContext regex_subject_string() throws RecognitionException {
		Regex_subject_stringContext _localctx = new Regex_subject_stringContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_regex_subject_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_position_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Xquery_patternContext xquery_pattern() {
			return getRuleContext(Xquery_patternContext.class,0);
		}
		public Regex_subject_stringContext regex_subject_string() {
			return getRuleContext(Regex_subject_stringContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Regex_position_start_or_afterContext regex_position_start_or_after() {
			return getRuleContext(Regex_position_start_or_afterContext.class,0);
		}
		public Xquery_option_flagContext xquery_option_flag() {
			return getRuleContext(Xquery_option_flagContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Regex_occurrenceContext regex_occurrence() {
			return getRuleContext(Regex_occurrenceContext.class,0);
		}
		public Regex_capture_groupContext regex_capture_group() {
			return getRuleContext(Regex_capture_groupContext.class,0);
		}
		public Regex_position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_position_expression; }
	}

	public final Regex_position_expressionContext regex_position_expression() throws RecognitionException {
		Regex_position_expressionContext _localctx = new Regex_position_expressionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_regex_position_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2513);
			match(T__102);
			setState(2514);
			match(LEFT_PAREN);
			setState(2516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__105 || _la==T__106) {
				{
				setState(2515);
				regex_position_start_or_after();
				}
			}

			setState(2518);
			xquery_pattern();
			setState(2521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__99) {
				{
				setState(2519);
				match(T__99);
				setState(2520);
				xquery_option_flag();
				}
			}

			setState(2523);
			match(T__100);
			setState(2524);
			regex_subject_string();
			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__73) {
				{
				setState(2525);
				match(T__73);
				setState(2526);
				start_position();
				}
			}

			setState(2531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2529);
				match(T__101);
				setState(2530);
				char_length_units();
				}
			}

			setState(2535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__103) {
				{
				setState(2533);
				match(T__103);
				setState(2534);
				regex_occurrence();
				}
			}

			setState(2539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__104) {
				{
				setState(2537);
				match(T__104);
				setState(2538);
				regex_capture_group();
				}
			}

			setState(2541);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_position_start_or_afterContext extends ParserRuleContext {
		public Regex_position_start_or_afterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_position_start_or_after; }
	}

	public final Regex_position_start_or_afterContext regex_position_start_or_after() throws RecognitionException {
		Regex_position_start_or_afterContext _localctx = new Regex_position_start_or_afterContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_regex_position_start_or_after);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2543);
			_la = _input.LA(1);
			if ( !(_la==T__105 || _la==T__106) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_occurrenceContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Regex_occurrenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_occurrence; }
	}

	public final Regex_occurrenceContext regex_occurrence() throws RecognitionException {
		Regex_occurrenceContext _localctx = new Regex_occurrenceContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_regex_occurrence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2545);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_capture_groupContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Regex_capture_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_capture_group; }
	}

	public final Regex_capture_groupContext regex_capture_group() throws RecognitionException {
		Regex_capture_groupContext _localctx = new Regex_capture_groupContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_regex_capture_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2547);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_position_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expression_1Context character_value_expression_1() {
			return getRuleContext(Character_value_expression_1Context.class,0);
		}
		public Character_value_expression_2Context character_value_expression_2() {
			return getRuleContext(Character_value_expression_2Context.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Character_position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_position_expression; }
	}

	public final Character_position_expressionContext character_position_expression() throws RecognitionException {
		Character_position_expressionContext _localctx = new Character_position_expressionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_character_position_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2549);
			match(T__107);
			setState(2550);
			match(LEFT_PAREN);
			setState(2551);
			character_value_expression_1();
			setState(2552);
			match(T__100);
			setState(2553);
			character_value_expression_2();
			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2554);
				match(T__101);
				setState(2555);
				char_length_units();
				}
			}

			setState(2558);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expression_1Context extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Character_value_expression_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression_1; }
	}

	public final Character_value_expression_1Context character_value_expression_1() throws RecognitionException {
		Character_value_expression_1Context _localctx = new Character_value_expression_1Context(_ctx, getState());
		enterRule(_localctx, 412, RULE_character_value_expression_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2560);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expression_2Context extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Character_value_expression_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression_2; }
	}

	public final Character_value_expression_2Context character_value_expression_2() throws RecognitionException {
		Character_value_expression_2Context _localctx = new Character_value_expression_2Context(_ctx, getState());
		enterRule(_localctx, 414, RULE_character_value_expression_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_position_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Binary_value_expressionContext> binary_value_expression() {
			return getRuleContexts(Binary_value_expressionContext.class);
		}
		public Binary_value_expressionContext binary_value_expression(int i) {
			return getRuleContext(Binary_value_expressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Binary_position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_position_expression; }
	}

	public final Binary_position_expressionContext binary_position_expression() throws RecognitionException {
		Binary_position_expressionContext _localctx = new Binary_position_expressionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_binary_position_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2564);
			match(T__107);
			setState(2565);
			match(LEFT_PAREN);
			setState(2566);
			binary_value_expression(0);
			setState(2567);
			match(T__100);
			setState(2568);
			binary_value_expression(0);
			setState(2569);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_expressionContext extends ParserRuleContext {
		public Char_length_expressionContext char_length_expression() {
			return getRuleContext(Char_length_expressionContext.class,0);
		}
		public Octet_length_expressionContext octet_length_expression() {
			return getRuleContext(Octet_length_expressionContext.class,0);
		}
		public Length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_expression; }
	}

	public final Length_expressionContext length_expression() throws RecognitionException {
		Length_expressionContext _localctx = new Length_expressionContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_length_expression);
		try {
			setState(2573);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__108:
			case T__109:
				enterOuterAlt(_localctx, 1);
				{
				setState(2571);
				char_length_expression();
				}
				break;
			case T__110:
				enterOuterAlt(_localctx, 2);
				{
				setState(2572);
				octet_length_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_length_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Char_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_length_expression; }
	}

	public final Char_length_expressionContext char_length_expression() throws RecognitionException {
		Char_length_expressionContext _localctx = new Char_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_char_length_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2575);
			_la = _input.LA(1);
			if ( !(_la==T__108 || _la==T__109) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2576);
			match(LEFT_PAREN);
			setState(2577);
			character_value_expression(0);
			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2578);
				match(T__101);
				setState(2579);
				char_length_units();
				}
			}

			setState(2582);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_length_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Octet_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_length_expression; }
	}

	public final Octet_length_expressionContext octet_length_expression() throws RecognitionException {
		Octet_length_expressionContext _localctx = new Octet_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_octet_length_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2584);
			match(T__110);
			setState(2585);
			match(LEFT_PAREN);
			setState(2586);
			string_value_expression();
			setState(2587);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Extract_fieldContext extract_field() {
			return getRuleContext(Extract_fieldContext.class,0);
		}
		public Extract_sourceContext extract_source() {
			return getRuleContext(Extract_sourceContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Extract_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_expression; }
	}

	public final Extract_expressionContext extract_expression() throws RecognitionException {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_extract_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2589);
			match(T__111);
			setState(2590);
			match(LEFT_PAREN);
			setState(2591);
			extract_field();
			setState(2592);
			match(T__73);
			setState(2593);
			extract_source();
			setState(2594);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_fieldContext extends ParserRuleContext {
		public TerminalNode PRIMARY_DATETIME_FIELD() { return getToken(SQL2011Parser.PRIMARY_DATETIME_FIELD, 0); }
		public Time_zone_fieldContext time_zone_field() {
			return getRuleContext(Time_zone_fieldContext.class,0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_field; }
	}

	public final Extract_fieldContext extract_field() throws RecognitionException {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_extract_field);
		try {
			setState(2598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY_DATETIME_FIELD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2596);
				match(PRIMARY_DATETIME_FIELD);
				}
				break;
			case T__112:
			case T__113:
				enterOuterAlt(_localctx, 2);
				{
				setState(2597);
				time_zone_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_fieldContext extends ParserRuleContext {
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_field; }
	}

	public final Time_zone_fieldContext time_zone_field() throws RecognitionException {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_time_zone_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			_la = _input.LA(1);
			if ( !(_la==T__112 || _la==T__113) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_sourceContext extends ParserRuleContext {
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_source; }
	}

	public final Extract_sourceContext extract_source() throws RecognitionException {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_extract_source);
		try {
			setState(2604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2602);
				datetime_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2603);
				interval_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cardinality_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Collection_value_expressionContext collection_value_expression() {
			return getRuleContext(Collection_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Cardinality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinality_expression; }
	}

	public final Cardinality_expressionContext cardinality_expression() throws RecognitionException {
		Cardinality_expressionContext _localctx = new Cardinality_expressionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_cardinality_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2606);
			match(T__114);
			setState(2607);
			match(LEFT_PAREN);
			setState(2608);
			collection_value_expression();
			setState(2609);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Max_cardinality_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Array_value_expressionContext array_value_expression() {
			return getRuleContext(Array_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Max_cardinality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_max_cardinality_expression; }
	}

	public final Max_cardinality_expressionContext max_cardinality_expression() throws RecognitionException {
		Max_cardinality_expressionContext _localctx = new Max_cardinality_expressionContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_max_cardinality_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(T__115);
			setState(2612);
			match(LEFT_PAREN);
			setState(2613);
			array_value_expression(0);
			setState(2614);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Absolute_value_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Absolute_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absolute_value_expression; }
	}

	public final Absolute_value_expressionContext absolute_value_expression() throws RecognitionException {
		Absolute_value_expressionContext _localctx = new Absolute_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_absolute_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			match(T__116);
			setState(2617);
			match(LEFT_PAREN);
			setState(2618);
			numeric_value_expression(0);
			setState(2619);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modulus_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expression_dividendContext numeric_value_expression_dividend() {
			return getRuleContext(Numeric_value_expression_dividendContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Numeric_value_expression_divisorContext numeric_value_expression_divisor() {
			return getRuleContext(Numeric_value_expression_divisorContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Modulus_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modulus_expression; }
	}

	public final Modulus_expressionContext modulus_expression() throws RecognitionException {
		Modulus_expressionContext _localctx = new Modulus_expressionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_modulus_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			match(T__117);
			setState(2622);
			match(LEFT_PAREN);
			setState(2623);
			numeric_value_expression_dividend();
			setState(2624);
			match(COMMA);
			setState(2625);
			numeric_value_expression_divisor();
			setState(2626);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expression_dividendContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expression_dividendContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression_dividend; }
	}

	public final Numeric_value_expression_dividendContext numeric_value_expression_dividend() throws RecognitionException {
		Numeric_value_expression_dividendContext _localctx = new Numeric_value_expression_dividendContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_numeric_value_expression_dividend);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expression_divisorContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expression_divisorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression_divisor; }
	}

	public final Numeric_value_expression_divisorContext numeric_value_expression_divisor() throws RecognitionException {
		Numeric_value_expression_divisorContext _localctx = new Numeric_value_expression_divisorContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_numeric_value_expression_divisor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Natural_logarithmContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Natural_logarithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_natural_logarithm; }
	}

	public final Natural_logarithmContext natural_logarithm() throws RecognitionException {
		Natural_logarithmContext _localctx = new Natural_logarithmContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_natural_logarithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632);
			match(T__118);
			setState(2633);
			match(LEFT_PAREN);
			setState(2634);
			numeric_value_expression(0);
			setState(2635);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exponential_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Exponential_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exponential_function; }
	}

	public final Exponential_functionContext exponential_function() throws RecognitionException {
		Exponential_functionContext _localctx = new Exponential_functionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_exponential_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2637);
			match(T__119);
			setState(2638);
			match(LEFT_PAREN);
			setState(2639);
			numeric_value_expression(0);
			setState(2640);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Power_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expression_baseContext numeric_value_expression_base() {
			return getRuleContext(Numeric_value_expression_baseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Numeric_value_expression_exponentContext numeric_value_expression_exponent() {
			return getRuleContext(Numeric_value_expression_exponentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Power_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_power_function; }
	}

	public final Power_functionContext power_function() throws RecognitionException {
		Power_functionContext _localctx = new Power_functionContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_power_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			match(T__120);
			setState(2643);
			match(LEFT_PAREN);
			setState(2644);
			numeric_value_expression_base();
			setState(2645);
			match(COMMA);
			setState(2646);
			numeric_value_expression_exponent();
			setState(2647);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expression_baseContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expression_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression_base; }
	}

	public final Numeric_value_expression_baseContext numeric_value_expression_base() throws RecognitionException {
		Numeric_value_expression_baseContext _localctx = new Numeric_value_expression_baseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_numeric_value_expression_base);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expression_exponentContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expression_exponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression_exponent; }
	}

	public final Numeric_value_expression_exponentContext numeric_value_expression_exponent() throws RecognitionException {
		Numeric_value_expression_exponentContext _localctx = new Numeric_value_expression_exponentContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_numeric_value_expression_exponent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Square_rootContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Square_rootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_square_root; }
	}

	public final Square_rootContext square_root() throws RecognitionException {
		Square_rootContext _localctx = new Square_rootContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_square_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2653);
			match(T__121);
			setState(2654);
			match(LEFT_PAREN);
			setState(2655);
			numeric_value_expression(0);
			setState(2656);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Floor_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Floor_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floor_function; }
	}

	public final Floor_functionContext floor_function() throws RecognitionException {
		Floor_functionContext _localctx = new Floor_functionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_floor_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			match(T__122);
			setState(2659);
			match(LEFT_PAREN);
			setState(2660);
			numeric_value_expression(0);
			setState(2661);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ceiling_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Ceiling_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ceiling_function; }
	}

	public final Ceiling_functionContext ceiling_function() throws RecognitionException {
		Ceiling_functionContext _localctx = new Ceiling_functionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_ceiling_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			_la = _input.LA(1);
			if ( !(_la==T__123 || _la==T__124) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2664);
			match(LEFT_PAREN);
			setState(2665);
			numeric_value_expression(0);
			setState(2666);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Width_bucket_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Width_bucket_operandContext width_bucket_operand() {
			return getRuleContext(Width_bucket_operandContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Width_bucket_bound_1Context width_bucket_bound_1() {
			return getRuleContext(Width_bucket_bound_1Context.class,0);
		}
		public Width_bucket_bound_2Context width_bucket_bound_2() {
			return getRuleContext(Width_bucket_bound_2Context.class,0);
		}
		public Width_bucket_countContext width_bucket_count() {
			return getRuleContext(Width_bucket_countContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Width_bucket_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_width_bucket_function; }
	}

	public final Width_bucket_functionContext width_bucket_function() throws RecognitionException {
		Width_bucket_functionContext _localctx = new Width_bucket_functionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_width_bucket_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2668);
			match(T__125);
			setState(2669);
			match(LEFT_PAREN);
			setState(2670);
			width_bucket_operand();
			setState(2671);
			match(COMMA);
			setState(2672);
			width_bucket_bound_1();
			setState(2673);
			match(COMMA);
			setState(2674);
			width_bucket_bound_2();
			setState(2675);
			match(COMMA);
			setState(2676);
			width_bucket_count();
			setState(2677);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Width_bucket_operandContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Width_bucket_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_width_bucket_operand; }
	}

	public final Width_bucket_operandContext width_bucket_operand() throws RecognitionException {
		Width_bucket_operandContext _localctx = new Width_bucket_operandContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_width_bucket_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Width_bucket_bound_1Context extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Width_bucket_bound_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_width_bucket_bound_1; }
	}

	public final Width_bucket_bound_1Context width_bucket_bound_1() throws RecognitionException {
		Width_bucket_bound_1Context _localctx = new Width_bucket_bound_1Context(_ctx, getState());
		enterRule(_localctx, 464, RULE_width_bucket_bound_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2681);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Width_bucket_bound_2Context extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Width_bucket_bound_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_width_bucket_bound_2; }
	}

	public final Width_bucket_bound_2Context width_bucket_bound_2() throws RecognitionException {
		Width_bucket_bound_2Context _localctx = new Width_bucket_bound_2Context(_ctx, getState());
		enterRule(_localctx, 466, RULE_width_bucket_bound_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Width_bucket_countContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Width_bucket_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_width_bucket_count; }
	}

	public final Width_bucket_countContext width_bucket_count() throws RecognitionException {
		Width_bucket_countContext _localctx = new Width_bucket_countContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_width_bucket_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2685);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_expressionContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_expression; }
	}

	public final String_value_expressionContext string_value_expression() throws RecognitionException {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_string_value_expression);
		try {
			setState(2689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2687);
				character_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2688);
				binary_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expressionContext extends ParserRuleContext {
		public Character_factorContext character_factor() {
			return getRuleContext(Character_factorContext.class,0);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(SQL2011Parser.CONCATENATION_OPERATOR, 0); }
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression; }
	}

	public final Character_value_expressionContext character_value_expression() throws RecognitionException {
		return character_value_expression(0);
	}

	private Character_value_expressionContext character_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, _parentState);
		Character_value_expressionContext _prevctx = _localctx;
		int _startState = 472;
		enterRecursionRule(_localctx, 472, RULE_character_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2692);
			character_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2699);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Character_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_character_value_expression);
					setState(2694);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2695);
					match(CONCATENATION_OPERATOR);
					setState(2696);
					character_factor();
					}
					} 
				}
				setState(2701);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Character_factorContext extends ParserRuleContext {
		public Character_primaryContext character_primary() {
			return getRuleContext(Character_primaryContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_factor; }
	}

	public final Character_factorContext character_factor() throws RecognitionException {
		Character_factorContext _localctx = new Character_factorContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_character_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2702);
			character_primary();
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2703);
				collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_primaryContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_primary; }
	}

	public final Character_primaryContext character_primary() throws RecognitionException {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_character_primary);
		try {
			setState(2708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				value_expression_primary(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2707);
				string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_value_expressionContext extends ParserRuleContext {
		public Binary_factorContext binary_factor() {
			return getRuleContext(Binary_factorContext.class,0);
		}
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(SQL2011Parser.CONCATENATION_OPERATOR, 0); }
		public Binary_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_value_expression; }
	}

	public final Binary_value_expressionContext binary_value_expression() throws RecognitionException {
		return binary_value_expression(0);
	}

	private Binary_value_expressionContext binary_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Binary_value_expressionContext _localctx = new Binary_value_expressionContext(_ctx, _parentState);
		Binary_value_expressionContext _prevctx = _localctx;
		int _startState = 478;
		enterRecursionRule(_localctx, 478, RULE_binary_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2711);
			binary_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2718);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Binary_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_binary_value_expression);
					setState(2713);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2714);
					match(CONCATENATION_OPERATOR);
					setState(2715);
					binary_factor();
					}
					} 
				}
				setState(2720);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Binary_factorContext extends ParserRuleContext {
		public Binary_primaryContext binary_primary() {
			return getRuleContext(Binary_primaryContext.class,0);
		}
		public Binary_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_factor; }
	}

	public final Binary_factorContext binary_factor() throws RecognitionException {
		Binary_factorContext _localctx = new Binary_factorContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_binary_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			binary_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_primaryContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Binary_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_primary; }
	}

	public final Binary_primaryContext binary_primary() throws RecognitionException {
		Binary_primaryContext _localctx = new Binary_primaryContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_binary_primary);
		try {
			setState(2725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2723);
				value_expression_primary(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2724);
				string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public Character_value_functionContext character_value_function() {
			return getRuleContext(Character_value_functionContext.class,0);
		}
		public Binary_value_functionContext binary_value_function() {
			return getRuleContext(Binary_value_functionContext.class,0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_string_value_function);
		try {
			setState(2729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2727);
				character_value_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2728);
				binary_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_functionContext extends ParserRuleContext {
		public Character_substring_functionContext character_substring_function() {
			return getRuleContext(Character_substring_functionContext.class,0);
		}
		public Regular_expression_substring_functionContext regular_expression_substring_function() {
			return getRuleContext(Regular_expression_substring_functionContext.class,0);
		}
		public Regex_substring_functionContext regex_substring_function() {
			return getRuleContext(Regex_substring_functionContext.class,0);
		}
		public FoldContext fold() {
			return getRuleContext(FoldContext.class,0);
		}
		public TranscodingContext transcoding() {
			return getRuleContext(TranscodingContext.class,0);
		}
		public Character_transliterationContext character_transliteration() {
			return getRuleContext(Character_transliterationContext.class,0);
		}
		public Regex_transliterationContext regex_transliteration() {
			return getRuleContext(Regex_transliterationContext.class,0);
		}
		public Trim_functionContext trim_function() {
			return getRuleContext(Trim_functionContext.class,0);
		}
		public Character_overlay_functionContext character_overlay_function() {
			return getRuleContext(Character_overlay_functionContext.class,0);
		}
		public Normalize_functionContext normalize_function() {
			return getRuleContext(Normalize_functionContext.class,0);
		}
		public Specific_type_methodContext specific_type_method() {
			return getRuleContext(Specific_type_methodContext.class,0);
		}
		public Character_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_function; }
	}

	public final Character_value_functionContext character_value_function() throws RecognitionException {
		Character_value_functionContext _localctx = new Character_value_functionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_character_value_function);
		try {
			setState(2742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2731);
				character_substring_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2732);
				regular_expression_substring_function();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2733);
				regex_substring_function();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2734);
				fold();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2735);
				transcoding();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2736);
				character_transliteration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2737);
				regex_transliteration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2738);
				trim_function();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2739);
				character_overlay_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2740);
				normalize_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2741);
				specific_type_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_substring_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Character_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_substring_function; }
	}

	public final Character_substring_functionContext character_substring_function() throws RecognitionException {
		Character_substring_functionContext _localctx = new Character_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_character_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2744);
			match(T__126);
			setState(2745);
			match(LEFT_PAREN);
			setState(2746);
			character_value_expression(0);
			setState(2747);
			match(T__73);
			setState(2748);
			start_position();
			setState(2751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(2749);
				match(T__54);
				setState(2750);
				string_length();
				}
			}

			setState(2755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2753);
				match(T__101);
				setState(2754);
				char_length_units();
				}
			}

			setState(2757);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_expression_substring_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public Escape_characterContext escape_character() {
			return getRuleContext(Escape_characterContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Regular_expression_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_expression_substring_function; }
	}

	public final Regular_expression_substring_functionContext regular_expression_substring_function() throws RecognitionException {
		Regular_expression_substring_functionContext _localctx = new Regular_expression_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_regular_expression_substring_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2759);
			match(T__126);
			setState(2760);
			match(LEFT_PAREN);
			setState(2761);
			character_value_expression(0);
			setState(2762);
			match(T__127);
			setState(2763);
			character_value_expression(0);
			setState(2764);
			match(T__128);
			setState(2765);
			escape_character();
			setState(2766);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_substring_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Xquery_patternContext xquery_pattern() {
			return getRuleContext(Xquery_patternContext.class,0);
		}
		public Regex_subject_stringContext regex_subject_string() {
			return getRuleContext(Regex_subject_stringContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Xquery_option_flagContext xquery_option_flag() {
			return getRuleContext(Xquery_option_flagContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Regex_occurrenceContext regex_occurrence() {
			return getRuleContext(Regex_occurrenceContext.class,0);
		}
		public Regex_capture_groupContext regex_capture_group() {
			return getRuleContext(Regex_capture_groupContext.class,0);
		}
		public Regex_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_substring_function; }
	}

	public final Regex_substring_functionContext regex_substring_function() throws RecognitionException {
		Regex_substring_functionContext _localctx = new Regex_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_regex_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			match(T__129);
			setState(2769);
			match(LEFT_PAREN);
			setState(2770);
			xquery_pattern();
			setState(2773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__99) {
				{
				setState(2771);
				match(T__99);
				setState(2772);
				xquery_option_flag();
				}
			}

			setState(2775);
			match(T__100);
			setState(2776);
			regex_subject_string();
			setState(2779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__73) {
				{
				setState(2777);
				match(T__73);
				setState(2778);
				start_position();
				}
			}

			setState(2783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2781);
				match(T__101);
				setState(2782);
				char_length_units();
				}
			}

			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__103) {
				{
				setState(2785);
				match(T__103);
				setState(2786);
				regex_occurrence();
				}
			}

			setState(2791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__104) {
				{
				setState(2789);
				match(T__104);
				setState(2790);
				regex_capture_group();
				}
			}

			setState(2793);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FoldContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public FoldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fold; }
	}

	public final FoldContext fold() throws RecognitionException {
		FoldContext _localctx = new FoldContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_fold);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2795);
			_la = _input.LA(1);
			if ( !(_la==T__130 || _la==T__131) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2796);
			match(LEFT_PAREN);
			setState(2797);
			character_value_expression(0);
			setState(2798);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TranscodingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Transcoding_nameContext transcoding_name() {
			return getRuleContext(Transcoding_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public TranscodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transcoding; }
	}

	public final TranscodingContext transcoding() throws RecognitionException {
		TranscodingContext _localctx = new TranscodingContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_transcoding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2800);
			match(T__132);
			setState(2801);
			match(LEFT_PAREN);
			setState(2802);
			character_value_expression(0);
			setState(2803);
			match(T__101);
			setState(2804);
			transcoding_name();
			setState(2805);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_transliterationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Transliteration_nameContext transliteration_name() {
			return getRuleContext(Transliteration_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Character_transliterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_transliteration; }
	}

	public final Character_transliterationContext character_transliteration() throws RecognitionException {
		Character_transliterationContext _localctx = new Character_transliterationContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_character_transliteration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2807);
			match(T__133);
			setState(2808);
			match(LEFT_PAREN);
			setState(2809);
			character_value_expression(0);
			setState(2810);
			match(T__101);
			setState(2811);
			transliteration_name();
			setState(2812);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_transliterationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Xquery_patternContext xquery_pattern() {
			return getRuleContext(Xquery_patternContext.class,0);
		}
		public Regex_subject_stringContext regex_subject_string() {
			return getRuleContext(Regex_subject_stringContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Xquery_option_flagContext xquery_option_flag() {
			return getRuleContext(Xquery_option_flagContext.class,0);
		}
		public Xquery_replacement_stringContext xquery_replacement_string() {
			return getRuleContext(Xquery_replacement_stringContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Regex_transliteration_occurrenceContext regex_transliteration_occurrence() {
			return getRuleContext(Regex_transliteration_occurrenceContext.class,0);
		}
		public Regex_transliterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_transliteration; }
	}

	public final Regex_transliterationContext regex_transliteration() throws RecognitionException {
		Regex_transliterationContext _localctx = new Regex_transliterationContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_regex_transliteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2814);
			match(T__134);
			setState(2815);
			match(LEFT_PAREN);
			setState(2816);
			xquery_pattern();
			setState(2819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__99) {
				{
				setState(2817);
				match(T__99);
				setState(2818);
				xquery_option_flag();
				}
			}

			setState(2821);
			match(T__100);
			setState(2822);
			regex_subject_string();
			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__34) {
				{
				setState(2823);
				match(T__34);
				setState(2824);
				xquery_replacement_string();
				}
			}

			setState(2829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__73) {
				{
				setState(2827);
				match(T__73);
				setState(2828);
				start_position();
				}
			}

			setState(2833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2831);
				match(T__101);
				setState(2832);
				char_length_units();
				}
			}

			setState(2837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__103) {
				{
				setState(2835);
				match(T__103);
				setState(2836);
				regex_transliteration_occurrence();
				}
			}

			setState(2839);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xquery_replacement_stringContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Xquery_replacement_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xquery_replacement_string; }
	}

	public final Xquery_replacement_stringContext xquery_replacement_string() throws RecognitionException {
		Xquery_replacement_stringContext _localctx = new Xquery_replacement_stringContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_xquery_replacement_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2841);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_transliteration_occurrenceContext extends ParserRuleContext {
		public Regex_occurrenceContext regex_occurrence() {
			return getRuleContext(Regex_occurrenceContext.class,0);
		}
		public Regex_transliteration_occurrenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_transliteration_occurrence; }
	}

	public final Regex_transliteration_occurrenceContext regex_transliteration_occurrence() throws RecognitionException {
		Regex_transliteration_occurrenceContext _localctx = new Regex_transliteration_occurrenceContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_regex_transliteration_occurrence);
		try {
			setState(2845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__160:
			case T__165:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2843);
				regex_occurrence();
				}
				break;
			case T__135:
				enterOuterAlt(_localctx, 2);
				{
				setState(2844);
				match(T__135);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return getRuleContext(Trim_operandsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_function; }
	}

	public final Trim_functionContext trim_function() throws RecognitionException {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(T__136);
			setState(2848);
			match(LEFT_PAREN);
			setState(2849);
			trim_operands();
			setState(2850);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_operandsContext extends ParserRuleContext {
		public Trim_sourceContext trim_source() {
			return getRuleContext(Trim_sourceContext.class,0);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public Trim_characterContext trim_character() {
			return getRuleContext(Trim_characterContext.class,0);
		}
		public Trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_operands; }
	}

	public final Trim_operandsContext trim_operands() throws RecognitionException {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_trim_operands);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (T__137 - 138)) | (1L << (T__138 - 138)) | (1L << (T__139 - 138)))) != 0)) {
					{
					setState(2852);
					trim_specification();
					}
				}

				setState(2856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__53) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__76 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__91 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (T__129 - 130)) | (1L << (T__130 - 130)) | (1L << (T__131 - 130)) | (1L << (T__132 - 130)) | (1L << (T__133 - 130)) | (1L << (T__134 - 130)) | (1L << (T__136 - 130)) | (1L << (T__140 - 130)) | (1L << (T__142 - 130)) | (1L << (T__160 - 130)) | (1L << (T__165 - 130)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (T__224 - 225)) | (1L << (T__225 - 225)) | (1L << (T__268 - 225)) | (1L << (T__269 - 225)) | (1L << (T__270 - 225)) | (1L << (T__271 - 225)) | (1L << (T__272 - 225)) | (1L << (T__273 - 225)) | (1L << (T__274 - 225)) | (1L << (T__275 - 225)) | (1L << (T__276 - 225)) | (1L << (T__277 - 225)) | (1L << (T__278 - 225)) | (1L << (T__279 - 225)) | (1L << (T__280 - 225)) | (1L << (T__282 - 225)) | (1L << (T__283 - 225)) | (1L << (T__284 - 225)) | (1L << (T__285 - 225)) | (1L << (T__286 - 225)) | (1L << (T__287 - 225)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (T__288 - 289)) | (1L << (T__289 - 289)) | (1L << (T__290 - 289)) | (1L << (T__291 - 289)) | (1L << (T__292 - 289)) | (1L << (T__293 - 289)) | (1L << (T__295 - 289)) | (1L << (T__296 - 289)) | (1L << (T__297 - 289)))) != 0) || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (LEFT_PAREN - 359)) | (1L << (PERIOD - 359)) | (1L << (COLON - 359)) | (1L << (QUESTION_MARK - 359)) | (1L << (IDENTIFIER_BODY - 359)) | (1L << (DELIMITED_IDENTIFIER - 359)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 359)) | (1L << (CHARACTER_STRING_LITERAL - 359)) | (1L << (UNICODE_CHARACTER_STRING_LITERAL - 359)) | (1L << (BINARY_STRING_LITERAL - 359)) | (1L << (UNSIGNED_INTEGER - 359)) | (1L << (DATE_LITERAL - 359)) | (1L << (TIME_LITERAL - 359)) | (1L << (TIMESTAMP_LITERAL - 359)) | (1L << (INTERVAL_LITERAL - 359)) | (1L << (BOOLEAN_LITERAL - 359)))) != 0)) {
					{
					setState(2855);
					trim_character();
					}
				}

				setState(2858);
				match(T__73);
				}
				break;
			}
			setState(2861);
			trim_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_sourceContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_source; }
	}

	public final Trim_sourceContext trim_source() throws RecognitionException {
		Trim_sourceContext _localctx = new Trim_sourceContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_trim_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_specificationContext extends ParserRuleContext {
		public Trim_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_specification; }
	}

	public final Trim_specificationContext trim_specification() throws RecognitionException {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_trim_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			_la = _input.LA(1);
			if ( !(((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (T__137 - 138)) | (1L << (T__138 - 138)) | (1L << (T__139 - 138)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_character; }
	}

	public final Trim_characterContext trim_character() throws RecognitionException {
		Trim_characterContext _localctx = new Trim_characterContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_trim_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2867);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_overlay_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Char_length_unitsContext char_length_units() {
			return getRuleContext(Char_length_unitsContext.class,0);
		}
		public Character_overlay_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_overlay_function; }
	}

	public final Character_overlay_functionContext character_overlay_function() throws RecognitionException {
		Character_overlay_functionContext _localctx = new Character_overlay_functionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_character_overlay_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			match(T__140);
			setState(2870);
			match(LEFT_PAREN);
			setState(2871);
			character_value_expression(0);
			setState(2872);
			match(T__141);
			setState(2873);
			character_value_expression(0);
			setState(2874);
			match(T__73);
			setState(2875);
			start_position();
			setState(2878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(2876);
				match(T__54);
				setState(2877);
				string_length();
				}
			}

			setState(2882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__101) {
				{
				setState(2880);
				match(T__101);
				setState(2881);
				char_length_units();
				}
			}

			setState(2884);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normalize_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Normal_formContext normal_form() {
			return getRuleContext(Normal_formContext.class,0);
		}
		public Normalize_function_result_lengthContext normalize_function_result_length() {
			return getRuleContext(Normalize_function_result_lengthContext.class,0);
		}
		public Normalize_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalize_function; }
	}

	public final Normalize_functionContext normalize_function() throws RecognitionException {
		Normalize_functionContext _localctx = new Normalize_functionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_normalize_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2886);
			match(T__142);
			setState(2887);
			match(LEFT_PAREN);
			setState(2888);
			character_value_expression(0);
			setState(2895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2889);
				match(COMMA);
				setState(2890);
				normal_form();
				setState(2893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2891);
					match(COMMA);
					setState(2892);
					normalize_function_result_length();
					}
				}

				}
			}

			setState(2897);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normal_formContext extends ParserRuleContext {
		public Normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normal_form; }
	}

	public final Normal_formContext normal_form() throws RecognitionException {
		Normal_formContext _localctx = new Normal_formContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2899);
			_la = _input.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (T__143 - 144)) | (1L << (T__144 - 144)) | (1L << (T__145 - 144)) | (1L << (T__146 - 144)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normalize_function_result_lengthContext extends ParserRuleContext {
		public Character_lengthContext character_length() {
			return getRuleContext(Character_lengthContext.class,0);
		}
		public Character_large_object_lengthContext character_large_object_length() {
			return getRuleContext(Character_large_object_lengthContext.class,0);
		}
		public Normalize_function_result_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalize_function_result_length; }
	}

	public final Normalize_function_result_lengthContext normalize_function_result_length() throws RecognitionException {
		Normalize_function_result_lengthContext _localctx = new Normalize_function_result_lengthContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_normalize_function_result_length);
		try {
			setState(2903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2901);
				character_length();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2902);
				character_large_object_length();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_type_methodContext extends ParserRuleContext {
		public User_defined_type_value_expressionContext user_defined_type_value_expression() {
			return getRuleContext(User_defined_type_value_expressionContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Specific_type_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_type_method; }
	}

	public final Specific_type_methodContext specific_type_method() throws RecognitionException {
		Specific_type_methodContext _localctx = new Specific_type_methodContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_specific_type_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905);
			user_defined_type_value_expression();
			setState(2906);
			match(PERIOD);
			setState(2907);
			match(T__147);
			setState(2910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2908);
				match(LEFT_PAREN);
				setState(2909);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_value_functionContext extends ParserRuleContext {
		public Binary_substring_functionContext binary_substring_function() {
			return getRuleContext(Binary_substring_functionContext.class,0);
		}
		public Binary_trim_functionContext binary_trim_function() {
			return getRuleContext(Binary_trim_functionContext.class,0);
		}
		public Binary_overlay_functionContext binary_overlay_function() {
			return getRuleContext(Binary_overlay_functionContext.class,0);
		}
		public Binary_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_value_function; }
	}

	public final Binary_value_functionContext binary_value_function() throws RecognitionException {
		Binary_value_functionContext _localctx = new Binary_value_functionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_binary_value_function);
		try {
			setState(2915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__126:
				enterOuterAlt(_localctx, 1);
				{
				setState(2912);
				binary_substring_function();
				}
				break;
			case T__136:
				enterOuterAlt(_localctx, 2);
				{
				setState(2913);
				binary_trim_function();
				}
				break;
			case T__140:
				enterOuterAlt(_localctx, 3);
				{
				setState(2914);
				binary_overlay_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_substring_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Binary_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_substring_function; }
	}

	public final Binary_substring_functionContext binary_substring_function() throws RecognitionException {
		Binary_substring_functionContext _localctx = new Binary_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_binary_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2917);
			match(T__126);
			setState(2918);
			match(LEFT_PAREN);
			setState(2919);
			binary_value_expression(0);
			setState(2920);
			match(T__73);
			setState(2921);
			start_position();
			setState(2924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(2922);
				match(T__54);
				setState(2923);
				string_length();
				}
			}

			setState(2926);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_trim_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Binary_trim_operandsContext binary_trim_operands() {
			return getRuleContext(Binary_trim_operandsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Binary_trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_trim_function; }
	}

	public final Binary_trim_functionContext binary_trim_function() throws RecognitionException {
		Binary_trim_functionContext _localctx = new Binary_trim_functionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_binary_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			match(T__136);
			setState(2929);
			match(LEFT_PAREN);
			setState(2930);
			binary_trim_operands();
			setState(2931);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_trim_operandsContext extends ParserRuleContext {
		public Binary_trim_sourceContext binary_trim_source() {
			return getRuleContext(Binary_trim_sourceContext.class,0);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public Trim_octetContext trim_octet() {
			return getRuleContext(Trim_octetContext.class,0);
		}
		public Binary_trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_trim_operands; }
	}

	public final Binary_trim_operandsContext binary_trim_operands() throws RecognitionException {
		Binary_trim_operandsContext _localctx = new Binary_trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_binary_trim_operands);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (T__137 - 138)) | (1L << (T__138 - 138)) | (1L << (T__139 - 138)))) != 0)) {
					{
					setState(2933);
					trim_specification();
					}
				}

				setState(2937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__53) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__76 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__91 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (T__129 - 130)) | (1L << (T__130 - 130)) | (1L << (T__131 - 130)) | (1L << (T__132 - 130)) | (1L << (T__133 - 130)) | (1L << (T__134 - 130)) | (1L << (T__136 - 130)) | (1L << (T__140 - 130)) | (1L << (T__142 - 130)) | (1L << (T__160 - 130)) | (1L << (T__165 - 130)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (T__224 - 225)) | (1L << (T__225 - 225)) | (1L << (T__268 - 225)) | (1L << (T__269 - 225)) | (1L << (T__270 - 225)) | (1L << (T__271 - 225)) | (1L << (T__272 - 225)) | (1L << (T__273 - 225)) | (1L << (T__274 - 225)) | (1L << (T__275 - 225)) | (1L << (T__276 - 225)) | (1L << (T__277 - 225)) | (1L << (T__278 - 225)) | (1L << (T__279 - 225)) | (1L << (T__280 - 225)) | (1L << (T__282 - 225)) | (1L << (T__283 - 225)) | (1L << (T__284 - 225)) | (1L << (T__285 - 225)) | (1L << (T__286 - 225)) | (1L << (T__287 - 225)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (T__288 - 289)) | (1L << (T__289 - 289)) | (1L << (T__290 - 289)) | (1L << (T__291 - 289)) | (1L << (T__292 - 289)) | (1L << (T__293 - 289)) | (1L << (T__295 - 289)) | (1L << (T__296 - 289)) | (1L << (T__297 - 289)))) != 0) || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (LEFT_PAREN - 359)) | (1L << (PERIOD - 359)) | (1L << (COLON - 359)) | (1L << (QUESTION_MARK - 359)) | (1L << (IDENTIFIER_BODY - 359)) | (1L << (DELIMITED_IDENTIFIER - 359)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 359)) | (1L << (CHARACTER_STRING_LITERAL - 359)) | (1L << (UNICODE_CHARACTER_STRING_LITERAL - 359)) | (1L << (BINARY_STRING_LITERAL - 359)) | (1L << (UNSIGNED_INTEGER - 359)) | (1L << (DATE_LITERAL - 359)) | (1L << (TIME_LITERAL - 359)) | (1L << (TIMESTAMP_LITERAL - 359)) | (1L << (INTERVAL_LITERAL - 359)) | (1L << (BOOLEAN_LITERAL - 359)))) != 0)) {
					{
					setState(2936);
					trim_octet();
					}
				}

				setState(2939);
				match(T__73);
				}
				break;
			}
			setState(2942);
			binary_trim_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_trim_sourceContext extends ParserRuleContext {
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public Binary_trim_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_trim_source; }
	}

	public final Binary_trim_sourceContext binary_trim_source() throws RecognitionException {
		Binary_trim_sourceContext _localctx = new Binary_trim_sourceContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_binary_trim_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2944);
			binary_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_octetContext extends ParserRuleContext {
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public Trim_octetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_octet; }
	}

	public final Trim_octetContext trim_octet() throws RecognitionException {
		Trim_octetContext _localctx = new Trim_octetContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_trim_octet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			binary_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_overlay_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Binary_value_expressionContext> binary_value_expression() {
			return getRuleContexts(Binary_value_expressionContext.class);
		}
		public Binary_value_expressionContext binary_value_expression(int i) {
			return getRuleContext(Binary_value_expressionContext.class,i);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Binary_overlay_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_overlay_function; }
	}

	public final Binary_overlay_functionContext binary_overlay_function() throws RecognitionException {
		Binary_overlay_functionContext _localctx = new Binary_overlay_functionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_binary_overlay_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			match(T__140);
			setState(2949);
			match(LEFT_PAREN);
			setState(2950);
			binary_value_expression(0);
			setState(2951);
			match(T__141);
			setState(2952);
			binary_value_expression(0);
			setState(2953);
			match(T__73);
			setState(2954);
			start_position();
			setState(2957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(2955);
				match(T__54);
				setState(2956);
				string_length();
				}
			}

			setState(2959);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_positionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Start_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_position; }
	}

	public final Start_positionContext start_position() throws RecognitionException {
		Start_positionContext _localctx = new Start_positionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_start_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2961);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_lengthContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public String_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_length; }
	}

	public final String_lengthContext string_length() throws RecognitionException {
		String_lengthContext _localctx = new String_lengthContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_string_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_expressionContext extends ParserRuleContext {
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public Datetime_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_expression; }
	}

	public final Datetime_value_expressionContext datetime_value_expression() throws RecognitionException {
		return datetime_value_expression(0);
	}

	private Datetime_value_expressionContext datetime_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Datetime_value_expressionContext _localctx = new Datetime_value_expressionContext(_ctx, _parentState);
		Datetime_value_expressionContext _prevctx = _localctx;
		int _startState = 544;
		enterRecursionRule(_localctx, 544, RULE_datetime_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2966);
				datetime_term();
				}
				break;
			case 2:
				{
				setState(2967);
				interval_value_expression(0);
				setState(2968);
				match(PLUS_SIGN);
				setState(2969);
				datetime_term();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2981);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2979);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
					case 1:
						{
						_localctx = new Datetime_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_datetime_value_expression);
						setState(2973);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2974);
						match(PLUS_SIGN);
						setState(2975);
						interval_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Datetime_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_datetime_value_expression);
						setState(2976);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2977);
						match(MINUS_SIGN);
						setState(2978);
						interval_term(0);
						}
						break;
					}
					} 
				}
				setState(2983);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Datetime_termContext extends ParserRuleContext {
		public Datetime_factorContext datetime_factor() {
			return getRuleContext(Datetime_factorContext.class,0);
		}
		public Datetime_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_term; }
	}

	public final Datetime_termContext datetime_term() throws RecognitionException {
		Datetime_termContext _localctx = new Datetime_termContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_datetime_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2984);
			datetime_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_factorContext extends ParserRuleContext {
		public Datetime_primaryContext datetime_primary() {
			return getRuleContext(Datetime_primaryContext.class,0);
		}
		public Time_zoneContext time_zone() {
			return getRuleContext(Time_zoneContext.class,0);
		}
		public Datetime_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_factor; }
	}

	public final Datetime_factorContext datetime_factor() throws RecognitionException {
		Datetime_factorContext _localctx = new Datetime_factorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_datetime_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2986);
			datetime_primary();
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2987);
				time_zone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_primaryContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Datetime_value_functionContext datetime_value_function() {
			return getRuleContext(Datetime_value_functionContext.class,0);
		}
		public Datetime_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_primary; }
	}

	public final Datetime_primaryContext datetime_primary() throws RecognitionException {
		Datetime_primaryContext _localctx = new Datetime_primaryContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_datetime_primary);
		try {
			setState(2992);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__160:
			case T__165:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case LEFT_PAREN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2990);
				value_expression_primary(0);
				}
				break;
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
				enterOuterAlt(_localctx, 2);
				{
				setState(2991);
				datetime_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zoneContext extends ParserRuleContext {
		public Time_zone_specifierContext time_zone_specifier() {
			return getRuleContext(Time_zone_specifierContext.class,0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone; }
	}

	public final Time_zoneContext time_zone() throws RecognitionException {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994);
			match(T__77);
			setState(2995);
			time_zone_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_specifierContext extends ParserRuleContext {
		public Interval_primaryContext interval_primary() {
			return getRuleContext(Interval_primaryContext.class,0);
		}
		public Time_zone_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_specifier; }
	}

	public final Time_zone_specifierContext time_zone_specifier() throws RecognitionException {
		Time_zone_specifierContext _localctx = new Time_zone_specifierContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_time_zone_specifier);
		try {
			setState(3001);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__3:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997);
				match(T__3);
				}
				break;
			case T__32:
				enterOuterAlt(_localctx, 2);
				{
				setState(2998);
				match(T__32);
				setState(2999);
				match(T__35);
				setState(3000);
				interval_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_functionContext extends ParserRuleContext {
		public Current_date_value_functionContext current_date_value_function() {
			return getRuleContext(Current_date_value_functionContext.class,0);
		}
		public Current_time_value_functionContext current_time_value_function() {
			return getRuleContext(Current_time_value_functionContext.class,0);
		}
		public Current_timestamp_value_functionContext current_timestamp_value_function() {
			return getRuleContext(Current_timestamp_value_functionContext.class,0);
		}
		public Current_local_time_value_functionContext current_local_time_value_function() {
			return getRuleContext(Current_local_time_value_functionContext.class,0);
		}
		public Current_local_timestamp_value_functionContext current_local_timestamp_value_function() {
			return getRuleContext(Current_local_timestamp_value_functionContext.class,0);
		}
		public Datetime_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_function; }
	}

	public final Datetime_value_functionContext datetime_value_function() throws RecognitionException {
		Datetime_value_functionContext _localctx = new Datetime_value_functionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_datetime_value_function);
		try {
			setState(3008);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__148:
				enterOuterAlt(_localctx, 1);
				{
				setState(3003);
				current_date_value_function();
				}
				break;
			case T__149:
				enterOuterAlt(_localctx, 2);
				{
				setState(3004);
				current_time_value_function();
				}
				break;
			case T__151:
				enterOuterAlt(_localctx, 3);
				{
				setState(3005);
				current_timestamp_value_function();
				}
				break;
			case T__150:
				enterOuterAlt(_localctx, 4);
				{
				setState(3006);
				current_local_time_value_function();
				}
				break;
			case T__152:
				enterOuterAlt(_localctx, 5);
				{
				setState(3007);
				current_local_timestamp_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_date_value_functionContext extends ParserRuleContext {
		public Current_date_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_date_value_function; }
	}

	public final Current_date_value_functionContext current_date_value_function() throws RecognitionException {
		Current_date_value_functionContext _localctx = new Current_date_value_functionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_current_date_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			match(T__148);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_time_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Current_time_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_time_value_function; }
	}

	public final Current_time_value_functionContext current_time_value_function() throws RecognitionException {
		Current_time_value_functionContext _localctx = new Current_time_value_functionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_current_time_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012);
			match(T__149);
			setState(3017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(3013);
				match(LEFT_PAREN);
				setState(3014);
				time_precision();
				setState(3015);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_local_time_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Current_local_time_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_local_time_value_function; }
	}

	public final Current_local_time_value_functionContext current_local_time_value_function() throws RecognitionException {
		Current_local_time_value_functionContext _localctx = new Current_local_time_value_functionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_current_local_time_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			match(T__150);
			setState(3024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(3020);
				match(LEFT_PAREN);
				setState(3021);
				time_precision();
				setState(3022);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_timestamp_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Current_timestamp_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_timestamp_value_function; }
	}

	public final Current_timestamp_value_functionContext current_timestamp_value_function() throws RecognitionException {
		Current_timestamp_value_functionContext _localctx = new Current_timestamp_value_functionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_current_timestamp_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3026);
			match(T__151);
			setState(3031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(3027);
				match(LEFT_PAREN);
				setState(3028);
				timestamp_precision();
				setState(3029);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_local_timestamp_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Current_local_timestamp_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_local_timestamp_value_function; }
	}

	public final Current_local_timestamp_value_functionContext current_local_timestamp_value_function() throws RecognitionException {
		Current_local_timestamp_value_functionContext _localctx = new Current_local_timestamp_value_functionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_current_local_timestamp_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(T__152);
			setState(3038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(3034);
				match(LEFT_PAREN);
				setState(3035);
				timestamp_precision();
				setState(3036);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_value_expressionContext extends ParserRuleContext {
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public TerminalNode INTERVAL_QUALIFIER() { return getToken(SQL2011Parser.INTERVAL_QUALIFIER, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public Interval_term_1Context interval_term_1() {
			return getRuleContext(Interval_term_1Context.class,0);
		}
		public Interval_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_value_expression; }
	}

	public final Interval_value_expressionContext interval_value_expression() throws RecognitionException {
		return interval_value_expression(0);
	}

	private Interval_value_expressionContext interval_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_value_expressionContext _localctx = new Interval_value_expressionContext(_ctx, _parentState);
		Interval_value_expressionContext _prevctx = _localctx;
		int _startState = 568;
		enterRecursionRule(_localctx, 568, RULE_interval_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(3041);
				interval_term(0);
				}
				break;
			case 2:
				{
				setState(3042);
				match(LEFT_PAREN);
				setState(3043);
				datetime_value_expression(0);
				setState(3044);
				match(MINUS_SIGN);
				setState(3045);
				datetime_term();
				setState(3046);
				match(RIGHT_PAREN);
				setState(3047);
				match(INTERVAL_QUALIFIER);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3059);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3057);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
					case 1:
						{
						_localctx = new Interval_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_interval_value_expression);
						setState(3051);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3052);
						match(PLUS_SIGN);
						setState(3053);
						interval_term_1();
						}
						break;
					case 2:
						{
						_localctx = new Interval_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_interval_value_expression);
						setState(3054);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3055);
						match(MINUS_SIGN);
						setState(3056);
						interval_term_1();
						}
						break;
					}
					} 
				}
				setState(3061);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_termContext extends ParserRuleContext {
		public Interval_factorContext interval_factor() {
			return getRuleContext(Interval_factorContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(SQL2011Parser.SOLIDUS, 0); }
		public Interval_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_term; }
	}

	public final Interval_termContext interval_term() throws RecognitionException {
		return interval_term(0);
	}

	private Interval_termContext interval_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_termContext _localctx = new Interval_termContext(_ctx, _parentState);
		Interval_termContext _prevctx = _localctx;
		int _startState = 570;
		enterRecursionRule(_localctx, 570, RULE_interval_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(3063);
				interval_factor();
				}
				break;
			case 2:
				{
				setState(3064);
				term(0);
				setState(3065);
				match(ASTERISK);
				setState(3066);
				interval_factor();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3078);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3076);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						_localctx = new Interval_termContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_interval_term);
						setState(3070);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3071);
						match(ASTERISK);
						setState(3072);
						factor();
						}
						break;
					case 2:
						{
						_localctx = new Interval_termContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_interval_term);
						setState(3073);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3074);
						match(SOLIDUS);
						setState(3075);
						factor();
						}
						break;
					}
					} 
				}
				setState(3080);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_factorContext extends ParserRuleContext {
		public Interval_primaryContext interval_primary() {
			return getRuleContext(Interval_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Interval_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_factor; }
	}

	public final Interval_factorContext interval_factor() throws RecognitionException {
		Interval_factorContext _localctx = new Interval_factorContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_interval_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(3081);
				sign();
				}
			}

			setState(3084);
			interval_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_primaryContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode INTERVAL_QUALIFIER() { return getToken(SQL2011Parser.INTERVAL_QUALIFIER, 0); }
		public Interval_value_functionContext interval_value_function() {
			return getRuleContext(Interval_value_functionContext.class,0);
		}
		public Interval_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_primary; }
	}

	public final Interval_primaryContext interval_primary() throws RecognitionException {
		Interval_primaryContext _localctx = new Interval_primaryContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_interval_primary);
		try {
			setState(3091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__160:
			case T__165:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case LEFT_PAREN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3086);
				value_expression_primary(0);
				setState(3088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(3087);
					match(INTERVAL_QUALIFIER);
					}
					break;
				}
				}
				break;
			case T__116:
				enterOuterAlt(_localctx, 2);
				{
				setState(3090);
				interval_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_term_1Context extends ParserRuleContext {
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public Interval_term_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_term_1; }
	}

	public final Interval_term_1Context interval_term_1() throws RecognitionException {
		Interval_term_1Context _localctx = new Interval_term_1Context(_ctx, getState());
		enterRule(_localctx, 576, RULE_interval_term_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3093);
			interval_term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_value_functionContext extends ParserRuleContext {
		public Interval_absolute_value_functionContext interval_absolute_value_function() {
			return getRuleContext(Interval_absolute_value_functionContext.class,0);
		}
		public Interval_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_value_function; }
	}

	public final Interval_value_functionContext interval_value_function() throws RecognitionException {
		Interval_value_functionContext _localctx = new Interval_value_functionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_interval_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			interval_absolute_value_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_absolute_value_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Interval_absolute_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_absolute_value_function; }
	}

	public final Interval_absolute_value_functionContext interval_absolute_value_function() throws RecognitionException {
		Interval_absolute_value_functionContext _localctx = new Interval_absolute_value_functionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_interval_absolute_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3097);
			match(T__116);
			setState(3098);
			match(LEFT_PAREN);
			setState(3099);
			interval_value_expression(0);
			setState(3100);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_value_expressionContext extends ParserRuleContext {
		public Boolean_termContext boolean_term() {
			return getRuleContext(Boolean_termContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_value_expression; }
	}

	public final Boolean_value_expressionContext boolean_value_expression() throws RecognitionException {
		return boolean_value_expression(0);
	}

	private Boolean_value_expressionContext boolean_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Boolean_value_expressionContext _localctx = new Boolean_value_expressionContext(_ctx, _parentState);
		Boolean_value_expressionContext _prevctx = _localctx;
		int _startState = 582;
		enterRecursionRule(_localctx, 582, RULE_boolean_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3103);
			boolean_term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(3110);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_boolean_value_expression);
					setState(3105);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3106);
					match(T__153);
					setState(3107);
					boolean_term(0);
					}
					} 
				}
				setState(3112);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Boolean_termContext extends ParserRuleContext {
		public Boolean_factorContext boolean_factor() {
			return getRuleContext(Boolean_factorContext.class,0);
		}
		public Boolean_termContext boolean_term() {
			return getRuleContext(Boolean_termContext.class,0);
		}
		public Boolean_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_term; }
	}

	public final Boolean_termContext boolean_term() throws RecognitionException {
		return boolean_term(0);
	}

	private Boolean_termContext boolean_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Boolean_termContext _localctx = new Boolean_termContext(_ctx, _parentState);
		Boolean_termContext _prevctx = _localctx;
		int _startState = 584;
		enterRecursionRule(_localctx, 584, RULE_boolean_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3114);
			boolean_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(3121);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_boolean_term);
					setState(3116);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3117);
					match(T__154);
					setState(3118);
					boolean_factor();
					}
					} 
				}
				setState(3123);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Boolean_factorContext extends ParserRuleContext {
		public Boolean_testContext boolean_test() {
			return getRuleContext(Boolean_testContext.class,0);
		}
		public Boolean_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_factor; }
	}

	public final Boolean_factorContext boolean_factor() throws RecognitionException {
		Boolean_factorContext _localctx = new Boolean_factorContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_boolean_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(3124);
				match(T__155);
				}
			}

			setState(3127);
			boolean_test();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_testContext extends ParserRuleContext {
		public Boolean_primaryContext boolean_primary() {
			return getRuleContext(Boolean_primaryContext.class,0);
		}
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public Boolean_testContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_test; }
	}

	public final Boolean_testContext boolean_test() throws RecognitionException {
		Boolean_testContext _localctx = new Boolean_testContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_boolean_test);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			boolean_primary();
			setState(3135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(3130);
				match(T__156);
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__155) {
					{
					setState(3131);
					match(T__155);
					}
				}

				setState(3134);
				truth_value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3137);
			_la = _input.LA(1);
			if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (T__157 - 158)) | (1L << (T__158 - 158)) | (1L << (T__159 - 158)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_primaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_primary; }
	}

	public final Boolean_primaryContext boolean_primary() throws RecognitionException {
		Boolean_primaryContext _localctx = new Boolean_primaryContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_boolean_primary);
		try {
			setState(3141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3139);
				predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140);
				boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_predicandContext extends ParserRuleContext {
		public Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() {
			return getRuleContext(Parenthesized_boolean_value_expressionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Boolean_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_predicand; }
	}

	public final Boolean_predicandContext boolean_predicand() throws RecognitionException {
		Boolean_predicandContext _localctx = new Boolean_predicandContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_boolean_predicand);
		try {
			setState(3145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3143);
				parenthesized_boolean_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3144);
				value_expression_primary(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_boolean_value_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Parenthesized_boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_boolean_value_expression; }
	}

	public final Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() throws RecognitionException {
		Parenthesized_boolean_value_expressionContext _localctx = new Parenthesized_boolean_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_parenthesized_boolean_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3147);
			match(LEFT_PAREN);
			setState(3148);
			boolean_value_expression(0);
			setState(3149);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_value_expressionContext extends ParserRuleContext {
		public Array_primaryContext array_primary() {
			return getRuleContext(Array_primaryContext.class,0);
		}
		public Array_value_expressionContext array_value_expression() {
			return getRuleContext(Array_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(SQL2011Parser.CONCATENATION_OPERATOR, 0); }
		public Array_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_value_expression; }
	}

	public final Array_value_expressionContext array_value_expression() throws RecognitionException {
		return array_value_expression(0);
	}

	private Array_value_expressionContext array_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_value_expressionContext _localctx = new Array_value_expressionContext(_ctx, _parentState);
		Array_value_expressionContext _prevctx = _localctx;
		int _startState = 598;
		enterRecursionRule(_localctx, 598, RULE_array_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3152);
			array_primary();
			}
			_ctx.stop = _input.LT(-1);
			setState(3159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_value_expression);
					setState(3154);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3155);
					match(CONCATENATION_OPERATOR);
					setState(3156);
					array_primary();
					}
					} 
				}
				setState(3161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_primaryContext extends ParserRuleContext {
		public Array_value_functionContext array_value_function() {
			return getRuleContext(Array_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Array_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_primary; }
	}

	public final Array_primaryContext array_primary() throws RecognitionException {
		Array_primaryContext _localctx = new Array_primaryContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_array_primary);
		try {
			setState(3164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3162);
				array_value_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3163);
				value_expression_primary(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_value_functionContext extends ParserRuleContext {
		public Trim_array_functionContext trim_array_function() {
			return getRuleContext(Trim_array_functionContext.class,0);
		}
		public Array_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_value_function; }
	}

	public final Array_value_functionContext array_value_function() throws RecognitionException {
		Array_value_functionContext _localctx = new Array_value_functionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_array_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			trim_array_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_array_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Array_value_expressionContext array_value_expression() {
			return getRuleContext(Array_value_expressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Trim_array_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_array_function; }
	}

	public final Trim_array_functionContext trim_array_function() throws RecognitionException {
		Trim_array_functionContext _localctx = new Trim_array_functionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_trim_array_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3168);
			match(T__160);
			setState(3169);
			match(LEFT_PAREN);
			setState(3170);
			array_value_expression(0);
			setState(3171);
			match(COMMA);
			setState(3172);
			numeric_value_expression(0);
			setState(3173);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_value_constructorContext extends ParserRuleContext {
		public Array_value_constructor_by_enumerationContext array_value_constructor_by_enumeration() {
			return getRuleContext(Array_value_constructor_by_enumerationContext.class,0);
		}
		public Array_value_constructor_by_queryContext array_value_constructor_by_query() {
			return getRuleContext(Array_value_constructor_by_queryContext.class,0);
		}
		public Array_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_value_constructor; }
	}

	public final Array_value_constructorContext array_value_constructor() throws RecognitionException {
		Array_value_constructorContext _localctx = new Array_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_array_value_constructor);
		try {
			setState(3177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3175);
				array_value_constructor_by_enumeration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3176);
				array_value_constructor_by_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_value_constructor_by_enumerationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Array_element_listContext array_element_list() {
			return getRuleContext(Array_element_listContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Array_value_constructor_by_enumerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_value_constructor_by_enumeration; }
	}

	public final Array_value_constructor_by_enumerationContext array_value_constructor_by_enumeration() throws RecognitionException {
		Array_value_constructor_by_enumerationContext _localctx = new Array_value_constructor_by_enumerationContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_array_value_constructor_by_enumeration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3179);
			match(T__4);
			setState(3180);
			match(LEFT_BRACKET_OR_TRIGRAPH);
			setState(3181);
			array_element_list();
			setState(3182);
			match(RIGHT_BRACKET_OR_TRIGRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_element_listContext extends ParserRuleContext {
		public List<Array_elementContext> array_element() {
			return getRuleContexts(Array_elementContext.class);
		}
		public Array_elementContext array_element(int i) {
			return getRuleContext(Array_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Array_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_element_list; }
	}

	public final Array_element_listContext array_element_list() throws RecognitionException {
		Array_element_listContext _localctx = new Array_element_listContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_array_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			array_element();
			setState(3189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3185);
				match(COMMA);
				setState(3186);
				array_element();
				}
				}
				setState(3191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_elementContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Array_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_element; }
	}

	public final Array_elementContext array_element() throws RecognitionException {
		Array_elementContext _localctx = new Array_elementContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_array_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_value_constructor_by_queryContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Array_value_constructor_by_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_value_constructor_by_query; }
	}

	public final Array_value_constructor_by_queryContext array_value_constructor_by_query() throws RecognitionException {
		Array_value_constructor_by_queryContext _localctx = new Array_value_constructor_by_queryContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_array_value_constructor_by_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			match(T__4);
			setState(3195);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_value_expressionContext extends ParserRuleContext {
		public Multiset_termContext multiset_term() {
			return getRuleContext(Multiset_termContext.class,0);
		}
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public Multiset_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_value_expression; }
	}

	public final Multiset_value_expressionContext multiset_value_expression() throws RecognitionException {
		return multiset_value_expression(0);
	}

	private Multiset_value_expressionContext multiset_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Multiset_value_expressionContext _localctx = new Multiset_value_expressionContext(_ctx, _parentState);
		Multiset_value_expressionContext _prevctx = _localctx;
		int _startState = 616;
		enterRecursionRule(_localctx, 616, RULE_multiset_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(3198);
				multiset_term(0);
				}
				break;
			case 2:
				{
				setState(3200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(3199);
					match(T__162);
					}
					break;
				}
				setState(3202);
				multiset_term(0);
				}
				break;
			case 3:
				{
				setState(3204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(3203);
					match(T__162);
					}
					break;
				}
				setState(3206);
				multiset_term(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3219);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3217);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
					case 1:
						{
						_localctx = new Multiset_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_multiset_value_expression);
						setState(3209);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3210);
						match(T__5);
						setState(3211);
						match(T__161);
						setState(3212);
						match(T__135);
						}
						break;
					case 2:
						{
						_localctx = new Multiset_value_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_multiset_value_expression);
						setState(3213);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3214);
						match(T__5);
						setState(3215);
						match(T__163);
						setState(3216);
						match(T__135);
						}
						break;
					}
					} 
				}
				setState(3221);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Multiset_termContext extends ParserRuleContext {
		public Multiset_primaryContext multiset_primary() {
			return getRuleContext(Multiset_primaryContext.class,0);
		}
		public Multiset_termContext multiset_term() {
			return getRuleContext(Multiset_termContext.class,0);
		}
		public Multiset_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_term; }
	}

	public final Multiset_termContext multiset_term() throws RecognitionException {
		return multiset_term(0);
	}

	private Multiset_termContext multiset_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Multiset_termContext _localctx = new Multiset_termContext(_ctx, _parentState);
		Multiset_termContext _prevctx = _localctx;
		int _startState = 618;
		enterRecursionRule(_localctx, 618, RULE_multiset_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(3223);
				multiset_primary();
				}
				break;
			case 2:
				{
				setState(3225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__162) {
					{
					setState(3224);
					match(T__162);
					}
				}

				setState(3227);
				multiset_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3236);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiset_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_multiset_term);
					setState(3230);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3231);
					match(T__5);
					setState(3232);
					match(T__164);
					setState(3233);
					match(T__135);
					}
					} 
				}
				setState(3238);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Multiset_primaryContext extends ParserRuleContext {
		public Multiset_value_functionContext multiset_value_function() {
			return getRuleContext(Multiset_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Multiset_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_primary; }
	}

	public final Multiset_primaryContext multiset_primary() throws RecognitionException {
		Multiset_primaryContext _localctx = new Multiset_primaryContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_multiset_primary);
		try {
			setState(3241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
				enterOuterAlt(_localctx, 1);
				{
				setState(3239);
				multiset_value_function();
				}
				break;
			case T__1:
			case T__4:
			case T__5:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__160:
			case T__165:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case LEFT_PAREN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240);
				value_expression_primary(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_value_functionContext extends ParserRuleContext {
		public Multiset_set_functionContext multiset_set_function() {
			return getRuleContext(Multiset_set_functionContext.class,0);
		}
		public Multiset_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_value_function; }
	}

	public final Multiset_value_functionContext multiset_value_function() throws RecognitionException {
		Multiset_value_functionContext _localctx = new Multiset_value_functionContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_multiset_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			multiset_set_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_set_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Multiset_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_set_function; }
	}

	public final Multiset_set_functionContext multiset_set_function() throws RecognitionException {
		Multiset_set_functionContext _localctx = new Multiset_set_functionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_multiset_set_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3245);
			match(T__7);
			setState(3246);
			match(LEFT_PAREN);
			setState(3247);
			multiset_value_expression(0);
			setState(3248);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_value_constructorContext extends ParserRuleContext {
		public Multiset_value_constructor_by_enumerationContext multiset_value_constructor_by_enumeration() {
			return getRuleContext(Multiset_value_constructor_by_enumerationContext.class,0);
		}
		public Multiset_value_constructor_by_queryContext multiset_value_constructor_by_query() {
			return getRuleContext(Multiset_value_constructor_by_queryContext.class,0);
		}
		public Table_value_constructor_by_queryContext table_value_constructor_by_query() {
			return getRuleContext(Table_value_constructor_by_queryContext.class,0);
		}
		public Multiset_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_value_constructor; }
	}

	public final Multiset_value_constructorContext multiset_value_constructor() throws RecognitionException {
		Multiset_value_constructorContext _localctx = new Multiset_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_multiset_value_constructor);
		try {
			setState(3253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3250);
				multiset_value_constructor_by_enumeration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3251);
				multiset_value_constructor_by_query();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3252);
				table_value_constructor_by_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_value_constructor_by_enumerationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Multiset_element_listContext multiset_element_list() {
			return getRuleContext(Multiset_element_listContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Multiset_value_constructor_by_enumerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_value_constructor_by_enumeration; }
	}

	public final Multiset_value_constructor_by_enumerationContext multiset_value_constructor_by_enumeration() throws RecognitionException {
		Multiset_value_constructor_by_enumerationContext _localctx = new Multiset_value_constructor_by_enumerationContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_multiset_value_constructor_by_enumeration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3255);
			match(T__5);
			setState(3256);
			match(LEFT_BRACKET_OR_TRIGRAPH);
			setState(3257);
			multiset_element_list();
			setState(3258);
			match(RIGHT_BRACKET_OR_TRIGRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_element_listContext extends ParserRuleContext {
		public List<Multiset_elementContext> multiset_element() {
			return getRuleContexts(Multiset_elementContext.class);
		}
		public Multiset_elementContext multiset_element(int i) {
			return getRuleContext(Multiset_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Multiset_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_element_list; }
	}

	public final Multiset_element_listContext multiset_element_list() throws RecognitionException {
		Multiset_element_listContext _localctx = new Multiset_element_listContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_multiset_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3260);
			multiset_element();
			setState(3265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3261);
				match(COMMA);
				setState(3262);
				multiset_element();
				}
				}
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_elementContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Multiset_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_element; }
	}

	public final Multiset_elementContext multiset_element() throws RecognitionException {
		Multiset_elementContext _localctx = new Multiset_elementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_multiset_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3268);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_value_constructor_by_queryContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Multiset_value_constructor_by_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_value_constructor_by_query; }
	}

	public final Multiset_value_constructor_by_queryContext multiset_value_constructor_by_query() throws RecognitionException {
		Multiset_value_constructor_by_queryContext _localctx = new Multiset_value_constructor_by_queryContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_multiset_value_constructor_by_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			match(T__5);
			setState(3271);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructor_by_queryContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Table_value_constructor_by_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor_by_query; }
	}

	public final Table_value_constructor_by_queryContext table_value_constructor_by_query() throws RecognitionException {
		Table_value_constructor_by_queryContext _localctx = new Table_value_constructor_by_queryContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_table_value_constructor_by_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			match(T__165);
			setState(3274);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructorContext extends ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return getRuleContext(Explicit_row_value_constructorContext.class,0);
		}
		public Row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor; }
	}

	public final Row_value_constructorContext row_value_constructor() throws RecognitionException {
		Row_value_constructorContext _localctx = new Row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_row_value_constructor);
		try {
			setState(3279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3276);
				common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3277);
				boolean_value_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3278);
				explicit_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_row_value_constructorContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Row_value_constructor_elementContext row_value_constructor_element() {
			return getRuleContext(Row_value_constructor_elementContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Row_value_constructor_element_listContext row_value_constructor_element_list() {
			return getRuleContext(Row_value_constructor_element_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Row_subqueryContext row_subquery() {
			return getRuleContext(Row_subqueryContext.class,0);
		}
		public Explicit_row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row_value_constructor; }
	}

	public final Explicit_row_value_constructorContext explicit_row_value_constructor() throws RecognitionException {
		Explicit_row_value_constructorContext _localctx = new Explicit_row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_explicit_row_value_constructor);
		try {
			setState(3293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3281);
				match(LEFT_PAREN);
				setState(3282);
				row_value_constructor_element();
				setState(3283);
				match(COMMA);
				setState(3284);
				row_value_constructor_element_list();
				setState(3285);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3287);
				match(T__38);
				setState(3288);
				match(LEFT_PAREN);
				setState(3289);
				row_value_constructor_element_list();
				setState(3290);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3292);
				row_subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_element_listContext extends ParserRuleContext {
		public List<Row_value_constructor_elementContext> row_value_constructor_element() {
			return getRuleContexts(Row_value_constructor_elementContext.class);
		}
		public Row_value_constructor_elementContext row_value_constructor_element(int i) {
			return getRuleContext(Row_value_constructor_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Row_value_constructor_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_element_list; }
	}

	public final Row_value_constructor_element_listContext row_value_constructor_element_list() throws RecognitionException {
		Row_value_constructor_element_listContext _localctx = new Row_value_constructor_element_listContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_row_value_constructor_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3295);
			row_value_constructor_element();
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3296);
				match(COMMA);
				setState(3297);
				row_value_constructor_element();
				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_elementContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Row_value_constructor_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_element; }
	}

	public final Row_value_constructor_elementContext row_value_constructor_element() throws RecognitionException {
		Row_value_constructor_elementContext _localctx = new Row_value_constructor_elementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_row_value_constructor_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_row_value_constructorContext extends ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Contextually_typed_row_value_constructor_elementContext contextually_typed_row_value_constructor_element() {
			return getRuleContext(Contextually_typed_row_value_constructor_elementContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Contextually_typed_row_value_constructor_element_listContext contextually_typed_row_value_constructor_element_list() {
			return getRuleContext(Contextually_typed_row_value_constructor_element_listContext.class,0);
		}
		public Contextually_typed_row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_row_value_constructor; }
	}

	public final Contextually_typed_row_value_constructorContext contextually_typed_row_value_constructor() throws RecognitionException {
		Contextually_typed_row_value_constructorContext _localctx = new Contextually_typed_row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_contextually_typed_row_value_constructor);
		try {
			setState(3323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3305);
				common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3306);
				boolean_value_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3307);
				contextually_typed_value_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3308);
				match(LEFT_PAREN);
				setState(3309);
				contextually_typed_value_specification();
				setState(3310);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3312);
				match(LEFT_PAREN);
				setState(3313);
				contextually_typed_row_value_constructor_element();
				setState(3314);
				match(COMMA);
				setState(3315);
				contextually_typed_row_value_constructor_element_list();
				setState(3316);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3318);
				match(T__38);
				setState(3319);
				match(LEFT_PAREN);
				setState(3320);
				contextually_typed_row_value_constructor_element_list();
				setState(3321);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_row_value_constructor_element_listContext extends ParserRuleContext {
		public List<Contextually_typed_row_value_constructor_elementContext> contextually_typed_row_value_constructor_element() {
			return getRuleContexts(Contextually_typed_row_value_constructor_elementContext.class);
		}
		public Contextually_typed_row_value_constructor_elementContext contextually_typed_row_value_constructor_element(int i) {
			return getRuleContext(Contextually_typed_row_value_constructor_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Contextually_typed_row_value_constructor_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_row_value_constructor_element_list; }
	}

	public final Contextually_typed_row_value_constructor_element_listContext contextually_typed_row_value_constructor_element_list() throws RecognitionException {
		Contextually_typed_row_value_constructor_element_listContext _localctx = new Contextually_typed_row_value_constructor_element_listContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_contextually_typed_row_value_constructor_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3325);
			contextually_typed_row_value_constructor_element();
			setState(3330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3326);
				match(COMMA);
				setState(3327);
				contextually_typed_row_value_constructor_element();
				}
				}
				setState(3332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_row_value_constructor_elementContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public Contextually_typed_row_value_constructor_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_row_value_constructor_element; }
	}

	public final Contextually_typed_row_value_constructor_elementContext contextually_typed_row_value_constructor_element() throws RecognitionException {
		Contextually_typed_row_value_constructor_elementContext _localctx = new Contextually_typed_row_value_constructor_elementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_contextually_typed_row_value_constructor_element);
		try {
			setState(3335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3333);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3334);
				contextually_typed_value_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_predicandContext extends ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return getRuleContext(Explicit_row_value_constructorContext.class,0);
		}
		public Row_value_constructor_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_predicand; }
	}

	public final Row_value_constructor_predicandContext row_value_constructor_predicand() throws RecognitionException {
		Row_value_constructor_predicandContext _localctx = new Row_value_constructor_predicandContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_row_value_constructor_predicand);
		try {
			setState(3340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3337);
				common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3338);
				boolean_predicand();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3339);
				explicit_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_expressionContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return getRuleContext(Explicit_row_value_constructorContext.class,0);
		}
		public Row_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_expression; }
	}

	public final Row_value_expressionContext row_value_expression() throws RecognitionException {
		Row_value_expressionContext _localctx = new Row_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_row_value_expression);
		try {
			setState(3344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3342);
				row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3343);
				explicit_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_row_value_expressionContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public Table_row_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_row_value_expression; }
	}

	public final Table_row_value_expressionContext table_row_value_expression() throws RecognitionException {
		Table_row_value_expressionContext _localctx = new Table_row_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_table_row_value_expression);
		try {
			setState(3348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3346);
				row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3347);
				row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_row_value_expressionContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Contextually_typed_row_value_constructorContext contextually_typed_row_value_constructor() {
			return getRuleContext(Contextually_typed_row_value_constructorContext.class,0);
		}
		public Contextually_typed_row_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_row_value_expression; }
	}

	public final Contextually_typed_row_value_expressionContext contextually_typed_row_value_expression() throws RecognitionException {
		Contextually_typed_row_value_expressionContext _localctx = new Contextually_typed_row_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_contextually_typed_row_value_expression);
		try {
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3350);
				row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3351);
				contextually_typed_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicandContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Row_value_constructor_predicandContext row_value_constructor_predicand() {
			return getRuleContext(Row_value_constructor_predicandContext.class,0);
		}
		public Row_value_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand; }
	}

	public final Row_value_predicandContext row_value_predicand() throws RecognitionException {
		Row_value_predicandContext _localctx = new Row_value_predicandContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_row_value_predicand);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3354);
				row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3355);
				row_value_constructor_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_special_caseContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Row_value_special_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_special_case; }
	}

	public final Row_value_special_caseContext row_value_special_case() throws RecognitionException {
		Row_value_special_caseContext _localctx = new Row_value_special_caseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_row_value_special_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			value_expression_primary(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public Row_value_expression_listContext row_value_expression_list() {
			return getRuleContext(Row_value_expression_listContext.class,0);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_table_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3360);
			match(T__166);
			setState(3361);
			row_value_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_expression_listContext extends ParserRuleContext {
		public List<Table_row_value_expressionContext> table_row_value_expression() {
			return getRuleContexts(Table_row_value_expressionContext.class);
		}
		public Table_row_value_expressionContext table_row_value_expression(int i) {
			return getRuleContext(Table_row_value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Row_value_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_expression_list; }
	}

	public final Row_value_expression_listContext row_value_expression_list() throws RecognitionException {
		Row_value_expression_listContext _localctx = new Row_value_expression_listContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_row_value_expression_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3363);
			table_row_value_expression();
			setState(3368);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3364);
					match(COMMA);
					setState(3365);
					table_row_value_expression();
					}
					} 
				}
				setState(3370);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_table_value_constructorContext extends ParserRuleContext {
		public Contextually_typed_row_value_expression_listContext contextually_typed_row_value_expression_list() {
			return getRuleContext(Contextually_typed_row_value_expression_listContext.class,0);
		}
		public Contextually_typed_table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_table_value_constructor; }
	}

	public final Contextually_typed_table_value_constructorContext contextually_typed_table_value_constructor() throws RecognitionException {
		Contextually_typed_table_value_constructorContext _localctx = new Contextually_typed_table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_contextually_typed_table_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3371);
			match(T__166);
			setState(3372);
			contextually_typed_row_value_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contextually_typed_row_value_expression_listContext extends ParserRuleContext {
		public List<Contextually_typed_row_value_expressionContext> contextually_typed_row_value_expression() {
			return getRuleContexts(Contextually_typed_row_value_expressionContext.class);
		}
		public Contextually_typed_row_value_expressionContext contextually_typed_row_value_expression(int i) {
			return getRuleContext(Contextually_typed_row_value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Contextually_typed_row_value_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextually_typed_row_value_expression_list; }
	}

	public final Contextually_typed_row_value_expression_listContext contextually_typed_row_value_expression_list() throws RecognitionException {
		Contextually_typed_row_value_expression_listContext _localctx = new Contextually_typed_row_value_expression_listContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_contextually_typed_row_value_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			contextually_typed_row_value_expression();
			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3375);
				match(COMMA);
				setState(3376);
				contextually_typed_row_value_expression();
				}
				}
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_expressionContext extends ParserRuleContext {
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_expression; }
	}

	public final Table_expressionContext table_expression() throws RecognitionException {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_table_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			from_clause();
			setState(3384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(3383);
				where_clause();
				}
				break;
			}
			setState(3387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				setState(3386);
				group_by_clause();
				}
				break;
			}
			setState(3390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				setState(3389);
				having_clause();
				}
				break;
			}
			setState(3393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(3392);
				window_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public Table_reference_listContext table_reference_list() {
			return getRuleContext(Table_reference_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			match(T__73);
			setState(3396);
			table_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_reference_listContext extends ParserRuleContext {
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Table_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference_list; }
	}

	public final Table_reference_listContext table_reference_list() throws RecognitionException {
		Table_reference_listContext _localctx = new Table_reference_listContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_table_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			table_reference(0);
			setState(3403);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3399);
					match(COMMA);
					setState(3400);
					table_reference(0);
					}
					} 
				}
				setState(3405);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Table_factorContext table_factor() {
			return getRuleContext(Table_factorContext.class,0);
		}
		public List<Partitioned_join_tableContext> partitioned_join_table() {
			return getRuleContexts(Partitioned_join_tableContext.class);
		}
		public Partitioned_join_tableContext partitioned_join_table(int i) {
			return getRuleContext(Partitioned_join_tableContext.class,i);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		return table_reference(0);
	}

	private Table_referenceContext table_reference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, _parentState);
		Table_referenceContext _prevctx = _localctx;
		int _startState = 678;
		enterRecursionRule(_localctx, 678, RULE_table_reference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(3407);
				table_factor();
				}
				break;
			case 2:
				{
				setState(3408);
				partitioned_join_table();
				setState(3410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (T__189 - 190)) | (1L << (T__191 - 190)) | (1L << (T__192 - 190)) | (1L << (T__193 - 190)))) != 0)) {
					{
					setState(3409);
					join_type();
					}
				}

				setState(3412);
				match(T__168);
				setState(3415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(3413);
					table_reference(0);
					}
					break;
				case 2:
					{
					setState(3414);
					partitioned_join_table();
					}
					break;
				}
				setState(3417);
				join_specification();
				}
				break;
			case 3:
				{
				setState(3419);
				partitioned_join_table();
				setState(3420);
				match(T__169);
				setState(3422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (T__189 - 190)) | (1L << (T__191 - 190)) | (1L << (T__192 - 190)) | (1L << (T__193 - 190)))) != 0)) {
					{
					setState(3421);
					join_type();
					}
				}

				setState(3424);
				match(T__168);
				setState(3427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(3425);
					table_factor();
					}
					break;
				case 2:
					{
					setState(3426);
					partitioned_join_table();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(3429);
				match(LEFT_PAREN);
				setState(3430);
				table_reference(0);
				setState(3431);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3462);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3460);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
					case 1:
						{
						_localctx = new Table_referenceContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_table_reference);
						setState(3435);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3436);
						match(T__167);
						setState(3437);
						match(T__168);
						setState(3438);
						table_factor();
						}
						break;
					case 2:
						{
						_localctx = new Table_referenceContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_table_reference);
						setState(3439);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3441);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (T__189 - 190)) | (1L << (T__191 - 190)) | (1L << (T__192 - 190)) | (1L << (T__193 - 190)))) != 0)) {
							{
							setState(3440);
							join_type();
							}
						}

						setState(3443);
						match(T__168);
						setState(3446);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
						case 1:
							{
							setState(3444);
							table_reference(0);
							}
							break;
						case 2:
							{
							setState(3445);
							partitioned_join_table();
							}
							break;
						}
						setState(3448);
						join_specification();
						}
						break;
					case 3:
						{
						_localctx = new Table_referenceContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_table_reference);
						setState(3450);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3451);
						match(T__169);
						setState(3453);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (T__189 - 190)) | (1L << (T__191 - 190)) | (1L << (T__192 - 190)) | (1L << (T__193 - 190)))) != 0)) {
							{
							setState(3452);
							join_type();
							}
						}

						setState(3455);
						match(T__168);
						setState(3458);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
						case 1:
							{
							setState(3456);
							table_factor();
							}
							break;
						case 2:
							{
							setState(3457);
							partitioned_join_table();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(3464);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_factorContext extends ParserRuleContext {
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Table_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_factor; }
	}

	public final Table_factorContext table_factor() throws RecognitionException {
		Table_factorContext _localctx = new Table_factorContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_table_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			table_primary();
			setState(3467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(3466);
				sample_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public Sample_methodContext sample_method() {
			return getRuleContext(Sample_methodContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Sample_percentageContext sample_percentage() {
			return getRuleContext(Sample_percentageContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Repeatable_clauseContext repeatable_clause() {
			return getRuleContext(Repeatable_clauseContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_sample_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3469);
			match(T__170);
			setState(3470);
			sample_method();
			setState(3471);
			match(LEFT_PAREN);
			setState(3472);
			sample_percentage();
			setState(3473);
			match(RIGHT_PAREN);
			setState(3475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				{
				setState(3474);
				repeatable_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_methodContext extends ParserRuleContext {
		public Sample_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_method; }
	}

	public final Sample_methodContext sample_method() throws RecognitionException {
		Sample_methodContext _localctx = new Sample_methodContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_sample_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3477);
			_la = _input.LA(1);
			if ( !(_la==T__171 || _la==T__172) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repeatable_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Repeat_argumentContext repeat_argument() {
			return getRuleContext(Repeat_argumentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Repeatable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatable_clause; }
	}

	public final Repeatable_clauseContext repeatable_clause() throws RecognitionException {
		Repeatable_clauseContext _localctx = new Repeatable_clauseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_repeatable_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			match(T__173);
			setState(3480);
			match(LEFT_PAREN);
			setState(3481);
			repeat_argument();
			setState(3482);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_percentageContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Sample_percentageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_percentage; }
	}

	public final Sample_percentageContext sample_percentage() throws RecognitionException {
		Sample_percentageContext _localctx = new Sample_percentageContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_sample_percentage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repeat_argumentContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Repeat_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeat_argument; }
	}

	public final Repeat_argumentContext repeat_argument() throws RecognitionException {
		Repeat_argumentContext _localctx = new Repeat_argumentContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_repeat_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3486);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_primaryContext extends ParserRuleContext {
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public Query_system_time_period_specificationContext query_system_time_period_specification() {
			return getRuleContext(Query_system_time_period_specificationContext.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Derived_column_listContext derived_column_list() {
			return getRuleContext(Derived_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Lateral_derived_tableContext lateral_derived_table() {
			return getRuleContext(Lateral_derived_tableContext.class,0);
		}
		public Collection_derived_tableContext collection_derived_table() {
			return getRuleContext(Collection_derived_tableContext.class,0);
		}
		public Table_function_derived_tableContext table_function_derived_table() {
			return getRuleContext(Table_function_derived_tableContext.class,0);
		}
		public Only_specContext only_spec() {
			return getRuleContext(Only_specContext.class,0);
		}
		public Data_change_delta_tableContext data_change_delta_table() {
			return getRuleContext(Data_change_delta_tableContext.class,0);
		}
		public Table_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_primary; }
	}

	public final Table_primaryContext table_primary() throws RecognitionException {
		Table_primaryContext _localctx = new Table_primaryContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_table_primary);
		int _la;
		try {
			setState(3574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3488);
				table_or_query_name();
				setState(3490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					setState(3489);
					query_system_time_period_specification();
					}
					break;
				}
				setState(3502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(3493);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__92) {
						{
						setState(3492);
						match(T__92);
						}
					}

					setState(3495);
					correlation_name();
					setState(3500);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
					case 1:
						{
						setState(3496);
						match(LEFT_PAREN);
						setState(3497);
						derived_column_list();
						setState(3498);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3504);
				derived_table();
				setState(3506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(3505);
					match(T__92);
					}
				}

				setState(3508);
				correlation_name();
				setState(3513);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(3509);
					match(LEFT_PAREN);
					setState(3510);
					derived_column_list();
					setState(3511);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__181:
				enterOuterAlt(_localctx, 3);
				{
				setState(3515);
				lateral_derived_table();
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(3516);
					match(T__92);
					}
				}

				setState(3519);
				correlation_name();
				setState(3524);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3520);
					match(LEFT_PAREN);
					setState(3521);
					derived_column_list();
					setState(3522);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__182:
				enterOuterAlt(_localctx, 4);
				{
				setState(3526);
				collection_derived_table();
				setState(3528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(3527);
					match(T__92);
					}
				}

				setState(3530);
				correlation_name();
				setState(3535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(3531);
					match(LEFT_PAREN);
					setState(3532);
					derived_column_list();
					setState(3533);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__165:
				enterOuterAlt(_localctx, 5);
				{
				setState(3537);
				table_function_derived_table();
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(3538);
					match(T__92);
					}
				}

				setState(3541);
				correlation_name();
				setState(3546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(3542);
					match(LEFT_PAREN);
					setState(3543);
					derived_column_list();
					setState(3544);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__180:
				enterOuterAlt(_localctx, 6);
				{
				setState(3548);
				only_spec();
				setState(3559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(3550);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__92) {
						{
						setState(3549);
						match(T__92);
						}
					}

					setState(3552);
					correlation_name();
					setState(3557);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
					case 1:
						{
						setState(3553);
						match(LEFT_PAREN);
						setState(3554);
						derived_column_list();
						setState(3555);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case T__95:
			case T__184:
			case T__185:
				enterOuterAlt(_localctx, 7);
				{
				setState(3561);
				data_change_delta_table();
				setState(3572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(3563);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__92) {
						{
						setState(3562);
						match(T__92);
						}
					}

					setState(3565);
					correlation_name();
					setState(3570);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
					case 1:
						{
						setState(3566);
						match(LEFT_PAREN);
						setState(3567);
						derived_column_list();
						setState(3568);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_system_time_period_specificationContext extends ParserRuleContext {
		public Point_in_time_1Context point_in_time_1() {
			return getRuleContext(Point_in_time_1Context.class,0);
		}
		public Point_in_time_2Context point_in_time_2() {
			return getRuleContext(Point_in_time_2Context.class,0);
		}
		public Query_system_time_period_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_system_time_period_specification; }
	}

	public final Query_system_time_period_specificationContext query_system_time_period_specification() throws RecognitionException {
		Query_system_time_period_specificationContext _localctx = new Query_system_time_period_specificationContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_query_system_time_period_specification);
		int _la;
		try {
			setState(3599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3576);
				match(T__54);
				setState(3577);
				match(T__174);
				setState(3578);
				match(T__92);
				setState(3579);
				match(T__175);
				setState(3580);
				point_in_time_1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3581);
				match(T__54);
				setState(3582);
				match(T__174);
				setState(3583);
				match(T__176);
				setState(3584);
				match(T__177);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__178) {
					{
					setState(3585);
					match(T__178);
					}
				}

				setState(3588);
				point_in_time_1();
				setState(3589);
				match(T__154);
				setState(3590);
				point_in_time_2();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3592);
				match(T__54);
				setState(3593);
				match(T__174);
				setState(3594);
				match(T__73);
				setState(3595);
				point_in_time_1();
				setState(3596);
				match(T__179);
				setState(3597);
				point_in_time_2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Point_in_time_1Context extends ParserRuleContext {
		public Point_in_timeContext point_in_time() {
			return getRuleContext(Point_in_timeContext.class,0);
		}
		public Point_in_time_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_point_in_time_1; }
	}

	public final Point_in_time_1Context point_in_time_1() throws RecognitionException {
		Point_in_time_1Context _localctx = new Point_in_time_1Context(_ctx, getState());
		enterRule(_localctx, 696, RULE_point_in_time_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			point_in_time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Point_in_time_2Context extends ParserRuleContext {
		public Point_in_timeContext point_in_time() {
			return getRuleContext(Point_in_timeContext.class,0);
		}
		public Point_in_time_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_point_in_time_2; }
	}

	public final Point_in_time_2Context point_in_time_2() throws RecognitionException {
		Point_in_time_2Context _localctx = new Point_in_time_2Context(_ctx, getState());
		enterRule(_localctx, 698, RULE_point_in_time_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			point_in_time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Point_in_timeContext extends ParserRuleContext {
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Point_in_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_point_in_time; }
	}

	public final Point_in_timeContext point_in_time() throws RecognitionException {
		Point_in_timeContext _localctx = new Point_in_timeContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_point_in_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3605);
			datetime_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Only_specContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Only_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_only_spec; }
	}

	public final Only_specContext only_spec() throws RecognitionException {
		Only_specContext _localctx = new Only_specContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_only_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			match(T__180);
			setState(3608);
			match(LEFT_PAREN);
			setState(3609);
			table_or_query_name();
			setState(3610);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lateral_derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Lateral_derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateral_derived_table; }
	}

	public final Lateral_derived_tableContext lateral_derived_table() throws RecognitionException {
		Lateral_derived_tableContext _localctx = new Lateral_derived_tableContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_lateral_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			match(T__181);
			setState(3613);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_derived_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Collection_value_expressionContext> collection_value_expression() {
			return getRuleContexts(Collection_value_expressionContext.class);
		}
		public Collection_value_expressionContext collection_value_expression(int i) {
			return getRuleContext(Collection_value_expressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Collection_derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_derived_table; }
	}

	public final Collection_derived_tableContext collection_derived_table() throws RecognitionException {
		Collection_derived_tableContext _localctx = new Collection_derived_tableContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_collection_derived_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			match(T__182);
			setState(3616);
			match(LEFT_PAREN);
			setState(3617);
			collection_value_expression();
			setState(3622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3618);
				match(COMMA);
				setState(3619);
				collection_value_expression();
				}
				}
				setState(3624);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3625);
			match(RIGHT_PAREN);
			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__34) {
				{
				setState(3626);
				match(T__34);
				setState(3627);
				match(T__183);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_function_derived_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Collection_value_expressionContext collection_value_expression() {
			return getRuleContext(Collection_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Table_function_derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_function_derived_table; }
	}

	public final Table_function_derived_tableContext table_function_derived_table() throws RecognitionException {
		Table_function_derived_tableContext _localctx = new Table_function_derived_tableContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_table_function_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(T__165);
			setState(3631);
			match(LEFT_PAREN);
			setState(3632);
			collection_value_expression();
			setState(3633);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_or_query_nameContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public Table_or_query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_or_query_name; }
	}

	public final Table_or_query_nameContext table_or_query_name() throws RecognitionException {
		Table_or_query_nameContext _localctx = new Table_or_query_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_table_or_query_name);
		try {
			setState(3639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3637);
				table_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3638);
				query_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Derived_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column_list; }
	}

	public final Derived_column_listContext derived_column_list() throws RecognitionException {
		Derived_column_listContext _localctx = new Derived_column_listContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_derived_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643);
			column_name();
			setState(3648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3644);
				match(COMMA);
				setState(3645);
				column_name();
				}
				}
				setState(3650);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_change_delta_tableContext extends ParserRuleContext {
		public Result_optionContext result_option() {
			return getRuleContext(Result_optionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Data_change_statementContext data_change_statement() {
			return getRuleContext(Data_change_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Data_change_delta_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_change_delta_table; }
	}

	public final Data_change_delta_tableContext data_change_delta_table() throws RecognitionException {
		Data_change_delta_tableContext _localctx = new Data_change_delta_tableContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_data_change_delta_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			result_option();
			setState(3652);
			match(T__165);
			setState(3653);
			match(LEFT_PAREN);
			setState(3654);
			data_change_statement();
			setState(3655);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_change_statementContext extends ParserRuleContext {
		public Delete_statement__searchedContext delete_statement__searched() {
			return getRuleContext(Delete_statement__searchedContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Update_statement__searchedContext update_statement__searched() {
			return getRuleContext(Update_statement__searchedContext.class,0);
		}
		public Data_change_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_change_statement; }
	}

	public final Data_change_statementContext data_change_statement() throws RecognitionException {
		Data_change_statementContext _localctx = new Data_change_statementContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_data_change_statement);
		try {
			setState(3661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__316:
				enterOuterAlt(_localctx, 1);
				{
				setState(3657);
				delete_statement__searched();
				}
				break;
			case T__322:
				enterOuterAlt(_localctx, 2);
				{
				setState(3658);
				insert_statement();
				}
				break;
			case T__324:
				enterOuterAlt(_localctx, 3);
				{
				setState(3659);
				merge_statement();
				}
				break;
			case T__309:
				enterOuterAlt(_localctx, 4);
				{
				setState(3660);
				update_statement__searched();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_optionContext extends ParserRuleContext {
		public Result_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_option; }
	}

	public final Result_optionContext result_option() throws RecognitionException {
		Result_optionContext _localctx = new Result_optionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_result_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3663);
			_la = _input.LA(1);
			if ( !(_la==T__95 || _la==T__184 || _la==T__185) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partitioned_join_tableContext extends ParserRuleContext {
		public Table_factorContext table_factor() {
			return getRuleContext(Table_factorContext.class,0);
		}
		public Partitioned_join_column_reference_listContext partitioned_join_column_reference_list() {
			return getRuleContext(Partitioned_join_column_reference_listContext.class,0);
		}
		public Partitioned_join_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioned_join_table; }
	}

	public final Partitioned_join_tableContext partitioned_join_table() throws RecognitionException {
		Partitioned_join_tableContext _localctx = new Partitioned_join_tableContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_partitioned_join_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			table_factor();
			setState(3666);
			match(T__186);
			setState(3667);
			match(T__187);
			setState(3668);
			partitioned_join_column_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partitioned_join_column_reference_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Partitioned_join_column_referenceContext> partitioned_join_column_reference() {
			return getRuleContexts(Partitioned_join_column_referenceContext.class);
		}
		public Partitioned_join_column_referenceContext partitioned_join_column_reference(int i) {
			return getRuleContext(Partitioned_join_column_referenceContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Partitioned_join_column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioned_join_column_reference_list; }
	}

	public final Partitioned_join_column_reference_listContext partitioned_join_column_reference_list() throws RecognitionException {
		Partitioned_join_column_reference_listContext _localctx = new Partitioned_join_column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_partitioned_join_column_reference_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			match(LEFT_PAREN);
			setState(3671);
			partitioned_join_column_reference();
			setState(3676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3672);
				match(COMMA);
				setState(3673);
				partitioned_join_column_reference();
				}
				}
				setState(3678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3679);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partitioned_join_column_referenceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Partitioned_join_column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioned_join_column_reference; }
	}

	public final Partitioned_join_column_referenceContext partitioned_join_column_reference() throws RecognitionException {
		Partitioned_join_column_referenceContext _localctx = new Partitioned_join_column_referenceContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_partitioned_join_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			column_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_specificationContext extends ParserRuleContext {
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Named_columns_joinContext named_columns_join() {
			return getRuleContext(Named_columns_joinContext.class,0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_specification; }
	}

	public final Join_specificationContext join_specification() throws RecognitionException {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_join_specification);
		try {
			setState(3685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__188:
				enterOuterAlt(_localctx, 1);
				{
				setState(3683);
				join_condition();
				}
				break;
			case T__101:
				enterOuterAlt(_localctx, 2);
				{
				setState(3684);
				named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_join_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3687);
			match(T__188);
			setState(3688);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_columns_joinContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Join_column_listContext join_column_list() {
			return getRuleContext(Join_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_columns_join; }
	}

	public final Named_columns_joinContext named_columns_join() throws RecognitionException {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_named_columns_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(T__101);
			setState(3691);
			match(LEFT_PAREN);
			setState(3692);
			join_column_list();
			setState(3693);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_join_type);
		int _la;
		try {
			setState(3700);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__189:
				enterOuterAlt(_localctx, 1);
				{
				setState(3695);
				match(T__189);
				}
				break;
			case T__191:
			case T__192:
			case T__193:
				enterOuterAlt(_localctx, 2);
				{
				setState(3696);
				outer_join_type();
				setState(3698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__190) {
					{
					setState(3697);
					match(T__190);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			_la = _input.LA(1);
			if ( !(((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Join_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_column_list; }
	}

	public final Join_column_listContext join_column_list() throws RecognitionException {
		Join_column_listContext _localctx = new Join_column_listContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_join_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			match(T__194);
			setState(3707);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public Grouping_element_listContext grouping_element_list() {
			return getRuleContext(Grouping_element_listContext.class,0);
		}
		public Set_quantifierContext set_quantifier() {
			return getRuleContext(Set_quantifierContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_group_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(T__104);
			setState(3710);
			match(T__187);
			setState(3712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__135 || _la==T__162) {
				{
				setState(3711);
				set_quantifier();
				}
			}

			setState(3714);
			grouping_element_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_element_listContext extends ParserRuleContext {
		public List<Grouping_elementContext> grouping_element() {
			return getRuleContexts(Grouping_elementContext.class);
		}
		public Grouping_elementContext grouping_element(int i) {
			return getRuleContext(Grouping_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element_list; }
	}

	public final Grouping_element_listContext grouping_element_list() throws RecognitionException {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_grouping_element_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3716);
			grouping_element();
			setState(3721);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3717);
					match(COMMA);
					setState(3718);
					grouping_element();
					}
					} 
				}
				setState(3723);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elementContext extends ParserRuleContext {
		public Ordinary_grouping_setContext ordinary_grouping_set() {
			return getRuleContext(Ordinary_grouping_setContext.class,0);
		}
		public Rollup_listContext rollup_list() {
			return getRuleContext(Rollup_listContext.class,0);
		}
		public Cube_listContext cube_list() {
			return getRuleContext(Cube_listContext.class,0);
		}
		public Grouping_sets_specificationContext grouping_sets_specification() {
			return getRuleContext(Grouping_sets_specificationContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element; }
	}

	public final Grouping_elementContext grouping_element() throws RecognitionException {
		Grouping_elementContext _localctx = new Grouping_elementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_grouping_element);
		try {
			setState(3729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3724);
				ordinary_grouping_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3725);
				rollup_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3726);
				cube_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3727);
				grouping_sets_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3728);
				empty_grouping_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_setContext extends ParserRuleContext {
		public Grouping_column_referenceContext grouping_column_reference() {
			return getRuleContext(Grouping_column_referenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Grouping_column_reference_listContext grouping_column_reference_list() {
			return getRuleContext(Grouping_column_reference_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set; }
	}

	public final Ordinary_grouping_setContext ordinary_grouping_set() throws RecognitionException {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_ordinary_grouping_set);
		try {
			setState(3736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3731);
				grouping_column_reference();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3732);
				match(LEFT_PAREN);
				setState(3733);
				grouping_column_reference_list();
				setState(3734);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_referenceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Grouping_column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference; }
	}

	public final Grouping_column_referenceContext grouping_column_reference() throws RecognitionException {
		Grouping_column_referenceContext _localctx = new Grouping_column_referenceContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_grouping_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3738);
			column_reference();
			setState(3740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				setState(3739);
				collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_reference_listContext extends ParserRuleContext {
		public List<Grouping_column_referenceContext> grouping_column_reference() {
			return getRuleContexts(Grouping_column_referenceContext.class);
		}
		public Grouping_column_referenceContext grouping_column_reference(int i) {
			return getRuleContext(Grouping_column_referenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Grouping_column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference_list; }
	}

	public final Grouping_column_reference_listContext grouping_column_reference_list() throws RecognitionException {
		Grouping_column_reference_listContext _localctx = new Grouping_column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_grouping_column_reference_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			grouping_column_reference();
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3743);
				match(COMMA);
				setState(3744);
				grouping_column_reference();
				}
				}
				setState(3749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Rollup_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_list; }
	}

	public final Rollup_listContext rollup_list() throws RecognitionException {
		Rollup_listContext _localctx = new Rollup_listContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_rollup_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3750);
			match(T__195);
			setState(3751);
			match(LEFT_PAREN);
			setState(3752);
			ordinary_grouping_set_list();
			setState(3753);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_set_listContext extends ParserRuleContext {
		public List<Ordinary_grouping_setContext> ordinary_grouping_set() {
			return getRuleContexts(Ordinary_grouping_setContext.class);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return getRuleContext(Ordinary_grouping_setContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set_list; }
	}

	public final Ordinary_grouping_set_listContext ordinary_grouping_set_list() throws RecognitionException {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3755);
			ordinary_grouping_set();
			setState(3760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3756);
				match(COMMA);
				setState(3757);
				ordinary_grouping_set();
				}
				}
				setState(3762);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Cube_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_list; }
	}

	public final Cube_listContext cube_list() throws RecognitionException {
		Cube_listContext _localctx = new Cube_listContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_cube_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			match(T__196);
			setState(3764);
			match(LEFT_PAREN);
			setState(3765);
			ordinary_grouping_set_list();
			setState(3766);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Grouping_set_listContext grouping_set_list() {
			return getRuleContext(Grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_specification; }
	}

	public final Grouping_sets_specificationContext grouping_sets_specification() throws RecognitionException {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_grouping_sets_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3768);
			match(T__57);
			setState(3769);
			match(T__197);
			setState(3770);
			match(LEFT_PAREN);
			setState(3771);
			grouping_set_list();
			setState(3772);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_set_listContext extends ParserRuleContext {
		public List<Grouping_setContext> grouping_set() {
			return getRuleContexts(Grouping_setContext.class);
		}
		public Grouping_setContext grouping_set(int i) {
			return getRuleContext(Grouping_setContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Grouping_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_set_list; }
	}

	public final Grouping_set_listContext grouping_set_list() throws RecognitionException {
		Grouping_set_listContext _localctx = new Grouping_set_listContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_grouping_set_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774);
			grouping_set();
			setState(3779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3775);
				match(COMMA);
				setState(3776);
				grouping_set();
				}
				}
				setState(3781);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_setContext extends ParserRuleContext {
		public Ordinary_grouping_setContext ordinary_grouping_set() {
			return getRuleContext(Ordinary_grouping_setContext.class,0);
		}
		public Rollup_listContext rollup_list() {
			return getRuleContext(Rollup_listContext.class,0);
		}
		public Cube_listContext cube_list() {
			return getRuleContext(Cube_listContext.class,0);
		}
		public Grouping_sets_specificationContext grouping_sets_specification() {
			return getRuleContext(Grouping_sets_specificationContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_set; }
	}

	public final Grouping_setContext grouping_set() throws RecognitionException {
		Grouping_setContext _localctx = new Grouping_setContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_grouping_set);
		try {
			setState(3787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3782);
				ordinary_grouping_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3783);
				rollup_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3784);
				cube_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3785);
				grouping_sets_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3786);
				empty_grouping_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3789);
			match(LEFT_PAREN);
			setState(3790);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3792);
			match(T__198);
			setState(3793);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_window_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3795);
			match(T__199);
			setState(3796);
			window_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_window_definition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3798);
			window_definition();
			setState(3803);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3799);
					match(COMMA);
					setState(3800);
					window_definition();
					}
					} 
				}
				setState(3805);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public New_window_nameContext new_window_name() {
			return getRuleContext(New_window_nameContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			new_window_name();
			setState(3807);
			match(T__92);
			setState(3808);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_window_nameContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public New_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_window_name; }
	}

	public final New_window_nameContext new_window_name() throws RecognitionException {
		New_window_nameContext _localctx = new New_window_nameContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_new_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Window_specification_detailsContext window_specification_details() {
			return getRuleContext(Window_specification_detailsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3812);
			match(LEFT_PAREN);
			setState(3813);
			window_specification_details();
			setState(3814);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specification_detailsContext extends ParserRuleContext {
		public Existing_window_nameContext existing_window_name() {
			return getRuleContext(Existing_window_nameContext.class,0);
		}
		public Window_partition_clauseContext window_partition_clause() {
			return getRuleContext(Window_partition_clauseContext.class,0);
		}
		public Window_order_clauseContext window_order_clause() {
			return getRuleContext(Window_order_clauseContext.class,0);
		}
		public Window_frame_clauseContext window_frame_clause() {
			return getRuleContext(Window_frame_clauseContext.class,0);
		}
		public Window_specification_detailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification_details; }
	}

	public final Window_specification_detailsContext window_specification_details() throws RecognitionException {
		Window_specification_detailsContext _localctx = new Window_specification_detailsContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_window_specification_details);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(3816);
				existing_window_name();
				}
			}

			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__186) {
				{
				setState(3819);
				window_partition_clause();
				}
			}

			setState(3823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__200) {
				{
				setState(3822);
				window_order_clause();
				}
			}

			setState(3826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (T__201 - 202)) | (1L << (T__202 - 202)) | (1L << (T__203 - 202)))) != 0)) {
				{
				setState(3825);
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_window_nameContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public Existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_window_name; }
	}

	public final Existing_window_nameContext existing_window_name() throws RecognitionException {
		Existing_window_nameContext _localctx = new Existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_existing_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3828);
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_partition_clauseContext extends ParserRuleContext {
		public Window_partition_column_reference_listContext window_partition_column_reference_list() {
			return getRuleContext(Window_partition_column_reference_listContext.class,0);
		}
		public Window_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_partition_clause; }
	}

	public final Window_partition_clauseContext window_partition_clause() throws RecognitionException {
		Window_partition_clauseContext _localctx = new Window_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_window_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			match(T__186);
			setState(3831);
			match(T__187);
			setState(3832);
			window_partition_column_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_partition_column_reference_listContext extends ParserRuleContext {
		public List<Window_partition_column_referenceContext> window_partition_column_reference() {
			return getRuleContexts(Window_partition_column_referenceContext.class);
		}
		public Window_partition_column_referenceContext window_partition_column_reference(int i) {
			return getRuleContext(Window_partition_column_referenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Window_partition_column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_partition_column_reference_list; }
	}

	public final Window_partition_column_reference_listContext window_partition_column_reference_list() throws RecognitionException {
		Window_partition_column_reference_listContext _localctx = new Window_partition_column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_window_partition_column_reference_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3834);
			window_partition_column_reference();
			setState(3839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3835);
				match(COMMA);
				setState(3836);
				window_partition_column_reference();
				}
				}
				setState(3841);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_partition_column_referenceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Window_partition_column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_partition_column_reference; }
	}

	public final Window_partition_column_referenceContext window_partition_column_reference() throws RecognitionException {
		Window_partition_column_referenceContext _localctx = new Window_partition_column_referenceContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_window_partition_column_reference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3842);
			column_reference();
			setState(3844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__261) {
				{
				setState(3843);
				collate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_order_clauseContext extends ParserRuleContext {
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public Window_order_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_order_clause; }
	}

	public final Window_order_clauseContext window_order_clause() throws RecognitionException {
		Window_order_clauseContext _localctx = new Window_order_clauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_window_order_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			match(T__200);
			setState(3847);
			match(T__187);
			setState(3848);
			sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_clauseContext extends ParserRuleContext {
		public Window_frame_unitsContext window_frame_units() {
			return getRuleContext(Window_frame_unitsContext.class,0);
		}
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public Window_frame_exclusionContext window_frame_exclusion() {
			return getRuleContext(Window_frame_exclusionContext.class,0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_clause; }
	}

	public final Window_frame_clauseContext window_frame_clause() throws RecognitionException {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_window_frame_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			window_frame_units();
			setState(3851);
			window_frame_extent();
			setState(3853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__208) {
				{
				setState(3852);
				window_frame_exclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_unitsContext extends ParserRuleContext {
		public Window_frame_unitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_units; }
	}

	public final Window_frame_unitsContext window_frame_units() throws RecognitionException {
		Window_frame_unitsContext _localctx = new Window_frame_unitsContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_window_frame_units);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3855);
			_la = _input.LA(1);
			if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (T__201 - 202)) | (1L << (T__202 - 202)) | (1L << (T__203 - 202)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_startContext window_frame_start() {
			return getRuleContext(Window_frame_startContext.class,0);
		}
		public Window_frame_betweenContext window_frame_between() {
			return getRuleContext(Window_frame_betweenContext.class,0);
		}
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_window_frame_extent);
		try {
			setState(3859);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__204:
			case T__206:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3857);
				window_frame_start();
				}
				break;
			case T__176:
				enterOuterAlt(_localctx, 2);
				{
				setState(3858);
				window_frame_between();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_startContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_start; }
	}

	public final Window_frame_startContext window_frame_start() throws RecognitionException {
		Window_frame_startContext _localctx = new Window_frame_startContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_window_frame_start);
		try {
			setState(3866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__204:
				enterOuterAlt(_localctx, 1);
				{
				setState(3861);
				match(T__204);
				setState(3862);
				match(T__205);
				}
				break;
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3863);
				window_frame_preceding();
				}
				break;
			case T__206:
				enterOuterAlt(_localctx, 3);
				{
				setState(3864);
				match(T__206);
				setState(3865);
				match(T__38);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_window_frame_preceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			unsigned_value_specification();
			setState(3869);
			match(T__205);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_betweenContext extends ParserRuleContext {
		public Window_frame_bound_1Context window_frame_bound_1() {
			return getRuleContext(Window_frame_bound_1Context.class,0);
		}
		public Window_frame_bound_2Context window_frame_bound_2() {
			return getRuleContext(Window_frame_bound_2Context.class,0);
		}
		public Window_frame_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_between; }
	}

	public final Window_frame_betweenContext window_frame_between() throws RecognitionException {
		Window_frame_betweenContext _localctx = new Window_frame_betweenContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_window_frame_between);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(T__176);
			setState(3872);
			window_frame_bound_1();
			setState(3873);
			match(T__154);
			setState(3874);
			window_frame_bound_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_bound_1Context extends ParserRuleContext {
		public Window_frame_boundContext window_frame_bound() {
			return getRuleContext(Window_frame_boundContext.class,0);
		}
		public Window_frame_bound_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound_1; }
	}

	public final Window_frame_bound_1Context window_frame_bound_1() throws RecognitionException {
		Window_frame_bound_1Context _localctx = new Window_frame_bound_1Context(_ctx, getState());
		enterRule(_localctx, 806, RULE_window_frame_bound_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3876);
			window_frame_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_bound_2Context extends ParserRuleContext {
		public Window_frame_boundContext window_frame_bound() {
			return getRuleContext(Window_frame_boundContext.class,0);
		}
		public Window_frame_bound_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound_2; }
	}

	public final Window_frame_bound_2Context window_frame_bound_2() throws RecognitionException {
		Window_frame_bound_2Context _localctx = new Window_frame_bound_2Context(_ctx, getState());
		enterRule(_localctx, 808, RULE_window_frame_bound_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			window_frame_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_startContext window_frame_start() {
			return getRuleContext(Window_frame_startContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_window_frame_bound);
		try {
			setState(3884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3880);
				window_frame_start();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3881);
				match(T__204);
				setState(3882);
				match(T__207);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3883);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_window_frame_following);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3886);
			unsigned_value_specification();
			setState(3887);
			match(T__207);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_exclusionContext extends ParserRuleContext {
		public Window_frame_exclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_exclusion; }
	}

	public final Window_frame_exclusionContext window_frame_exclusion() throws RecognitionException {
		Window_frame_exclusionContext _localctx = new Window_frame_exclusionContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_window_frame_exclusion);
		try {
			setState(3899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3889);
				match(T__208);
				setState(3890);
				match(T__206);
				setState(3891);
				match(T__38);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3892);
				match(T__208);
				setState(3893);
				match(T__104);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3894);
				match(T__208);
				setState(3895);
				match(T__209);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3896);
				match(T__208);
				setState(3897);
				match(T__210);
				setState(3898);
				match(T__211);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_quantifierContext set_quantifier() {
			return getRuleContext(Set_quantifierContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_query_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			match(T__212);
			setState(3903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(3902);
				set_quantifier();
				}
				break;
			}
			setState(3905);
			select_list();
			setState(3906);
			table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_select_list);
		int _la;
		try {
			setState(3917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3908);
				match(ASTERISK);
				}
				break;
			case T__1:
			case T__4:
			case T__5:
			case T__7:
			case T__38:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__136:
			case T__140:
			case T__142:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__155:
			case T__160:
			case T__162:
			case T__165:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__236:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3909);
				select_sublist();
				setState(3914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3910);
					match(COMMA);
					setState(3911);
					select_sublist();
					}
					}
					setState(3916);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public Derived_columnContext derived_column() {
			return getRuleContext(Derived_columnContext.class,0);
		}
		public Qualified_asteriskContext qualified_asterisk() {
			return getRuleContext(Qualified_asteriskContext.class,0);
		}
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_select_sublist);
		try {
			setState(3921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3919);
				derived_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3920);
				qualified_asterisk();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_asteriskContext extends ParserRuleContext {
		public Asterisked_identifier_chainContext asterisked_identifier_chain() {
			return getRuleContext(Asterisked_identifier_chainContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public All_fields_referenceContext all_fields_reference() {
			return getRuleContext(All_fields_referenceContext.class,0);
		}
		public Qualified_asteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_asterisk; }
	}

	public final Qualified_asteriskContext qualified_asterisk() throws RecognitionException {
		Qualified_asteriskContext _localctx = new Qualified_asteriskContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_qualified_asterisk);
		try {
			setState(3928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3923);
				asterisked_identifier_chain();
				setState(3924);
				match(PERIOD);
				setState(3925);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3927);
				all_fields_reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asterisked_identifier_chainContext extends ParserRuleContext {
		public List<Asterisked_identifierContext> asterisked_identifier() {
			return getRuleContexts(Asterisked_identifierContext.class);
		}
		public Asterisked_identifierContext asterisked_identifier(int i) {
			return getRuleContext(Asterisked_identifierContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(SQL2011Parser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(SQL2011Parser.PERIOD, i);
		}
		public Asterisked_identifier_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisked_identifier_chain; }
	}

	public final Asterisked_identifier_chainContext asterisked_identifier_chain() throws RecognitionException {
		Asterisked_identifier_chainContext _localctx = new Asterisked_identifier_chainContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_asterisked_identifier_chain);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3930);
			asterisked_identifier();
			setState(3935);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3931);
					match(PERIOD);
					setState(3932);
					asterisked_identifier();
					}
					} 
				}
				setState(3937);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asterisked_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Asterisked_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisked_identifier; }
	}

	public final Asterisked_identifierContext asterisked_identifier() throws RecognitionException {
		Asterisked_identifierContext _localctx = new Asterisked_identifierContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_asterisked_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_columnContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public As_clauseContext as_clause() {
			return getRuleContext(As_clauseContext.class,0);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column; }
	}

	public final Derived_columnContext derived_column() throws RecognitionException {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_derived_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3940);
			value_expression();
			setState(3942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(3941);
				as_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public As_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_clause; }
	}

	public final As_clauseContext as_clause() throws RecognitionException {
		As_clauseContext _localctx = new As_clauseContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_as_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92) {
				{
				setState(3944);
				match(T__92);
				}
			}

			setState(3947);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_fields_referenceContext extends ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public All_fields_column_name_listContext all_fields_column_name_list() {
			return getRuleContext(All_fields_column_name_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public All_fields_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_fields_reference; }
	}

	public final All_fields_referenceContext all_fields_reference() throws RecognitionException {
		All_fields_referenceContext _localctx = new All_fields_referenceContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_all_fields_reference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3949);
			value_expression_primary(0);
			setState(3950);
			match(PERIOD);
			setState(3951);
			match(ASTERISK);
			setState(3957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92) {
				{
				setState(3952);
				match(T__92);
				setState(3953);
				match(LEFT_PAREN);
				setState(3954);
				all_fields_column_name_list();
				setState(3955);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_fields_column_name_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public All_fields_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_fields_column_name_list; }
	}

	public final All_fields_column_name_listContext all_fields_column_name_list() throws RecognitionException {
		All_fields_column_name_listContext _localctx = new All_fields_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_all_fields_column_name_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_expression_bodyContext query_expression_body() {
			return getRuleContext(Query_expression_bodyContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Result_offset_clauseContext result_offset_clause() {
			return getRuleContext(Result_offset_clauseContext.class,0);
		}
		public Fetch_first_clauseContext fetch_first_clause() {
			return getRuleContext(Fetch_first_clauseContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_query_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__34) {
				{
				setState(3961);
				with_clause();
				}
			}

			setState(3964);
			query_expression_body(0);
			setState(3966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__200) {
				{
				setState(3965);
				order_by_clause();
				}
			}

			setState(3969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__215) {
				{
				setState(3968);
				result_offset_clause();
				}
			}

			setState(3972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__216) {
				{
				setState(3971);
				fetch_first_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public With_listContext with_list() {
			return getRuleContext(With_listContext.class,0);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_with_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			match(T__34);
			setState(3976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__213) {
				{
				setState(3975);
				match(T__213);
				}
			}

			setState(3978);
			with_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_listContext extends ParserRuleContext {
		public List<With_list_elementContext> with_list_element() {
			return getRuleContexts(With_list_elementContext.class);
		}
		public With_list_elementContext with_list_element(int i) {
			return getRuleContext(With_list_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public With_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_list; }
	}

	public final With_listContext with_list() throws RecognitionException {
		With_listContext _localctx = new With_listContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_with_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			with_list_element();
			setState(3985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3981);
				match(COMMA);
				setState(3982);
				with_list_element();
				}
				}
				setState(3987);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_list_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public With_column_listContext with_column_list() {
			return getRuleContext(With_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Search_or_cycle_clauseContext search_or_cycle_clause() {
			return getRuleContext(Search_or_cycle_clauseContext.class,0);
		}
		public With_list_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_list_element; }
	}

	public final With_list_elementContext with_list_element() throws RecognitionException {
		With_list_elementContext _localctx = new With_list_elementContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_with_list_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			query_name();
			setState(3993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3989);
				match(LEFT_PAREN);
				setState(3990);
				with_column_list();
				setState(3991);
				match(RIGHT_PAREN);
				}
			}

			setState(3995);
			match(T__92);
			setState(3996);
			table_subquery();
			setState(3998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__218 || _la==T__221) {
				{
				setState(3997);
				search_or_cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public With_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_column_list; }
	}

	public final With_column_listContext with_column_list() throws RecognitionException {
		With_column_listContext _localctx = new With_column_listContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_with_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_bodyContext extends ParserRuleContext {
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public Query_expression_bodyContext query_expression_body() {
			return getRuleContext(Query_expression_bodyContext.class,0);
		}
		public Query_expression_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_body; }
	}

	public final Query_expression_bodyContext query_expression_body() throws RecognitionException {
		return query_expression_body(0);
	}

	private Query_expression_bodyContext query_expression_body(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Query_expression_bodyContext _localctx = new Query_expression_bodyContext(_ctx, _parentState);
		Query_expression_bodyContext _prevctx = _localctx;
		int _startState = 846;
		enterRecursionRule(_localctx, 846, RULE_query_expression_body, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(4003);
				query_term(0);
				}
				break;
			case 2:
				{
				setState(4005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(4004);
					match(T__162);
					}
					break;
				}
				setState(4008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
				case 1:
					{
					setState(4007);
					corresponding_spec();
					}
					break;
				}
				setState(4010);
				query_term(0);
				}
				break;
			case 3:
				{
				setState(4012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(4011);
					match(T__162);
					}
					break;
				}
				setState(4015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(4014);
					corresponding_spec();
					}
					break;
				}
				setState(4017);
				query_term(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4028);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4026);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
					case 1:
						{
						_localctx = new Query_expression_bodyContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_query_expression_body);
						setState(4020);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(4021);
						match(T__161);
						setState(4022);
						match(T__135);
						}
						break;
					case 2:
						{
						_localctx = new Query_expression_bodyContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_query_expression_body);
						setState(4023);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4024);
						match(T__163);
						setState(4025);
						match(T__135);
						}
						break;
					}
					} 
				}
				setState(4030);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_termContext extends ParserRuleContext {
		public Query_primaryContext query_primary() {
			return getRuleContext(Query_primaryContext.class,0);
		}
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_term; }
	}

	public final Query_termContext query_term() throws RecognitionException {
		return query_term(0);
	}

	private Query_termContext query_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Query_termContext _localctx = new Query_termContext(_ctx, _parentState);
		Query_termContext _prevctx = _localctx;
		int _startState = 848;
		enterRecursionRule(_localctx, 848, RULE_query_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(4032);
				query_primary();
				}
				break;
			case 2:
				{
				setState(4034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__162) {
					{
					setState(4033);
					match(T__162);
					}
				}

				setState(4037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__214) {
					{
					setState(4036);
					corresponding_spec();
					}
				}

				setState(4039);
				query_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4047);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,339,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_query_term);
					setState(4042);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4043);
					match(T__164);
					setState(4044);
					match(T__135);
					}
					} 
				}
				setState(4049);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,339,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_primaryContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Query_expression_bodyContext query_expression_body() {
			return getRuleContext(Query_expression_bodyContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Result_offset_clauseContext result_offset_clause() {
			return getRuleContext(Result_offset_clauseContext.class,0);
		}
		public Fetch_first_clauseContext fetch_first_clause() {
			return getRuleContext(Fetch_first_clauseContext.class,0);
		}
		public Query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_primary; }
	}

	public final Query_primaryContext query_primary() throws RecognitionException {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_query_primary);
		int _la;
		try {
			setState(4064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__165:
			case T__166:
			case T__212:
				enterOuterAlt(_localctx, 1);
				{
				setState(4050);
				simple_table();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4051);
				match(LEFT_PAREN);
				setState(4052);
				query_expression_body(0);
				setState(4054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__200) {
					{
					setState(4053);
					order_by_clause();
					}
				}

				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__215) {
					{
					setState(4056);
					result_offset_clause();
					}
				}

				setState(4060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__216) {
					{
					setState(4059);
					fetch_first_clause();
					}
				}

				setState(4062);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_tableContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Explicit_tableContext explicit_table() {
			return getRuleContext(Explicit_tableContext.class,0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_table; }
	}

	public final Simple_tableContext simple_table() throws RecognitionException {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_simple_table);
		try {
			setState(4069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__212:
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				query_specification();
				}
				break;
			case T__166:
				enterOuterAlt(_localctx, 2);
				{
				setState(4067);
				table_value_constructor();
				}
				break;
			case T__165:
				enterOuterAlt(_localctx, 3);
				{
				setState(4068);
				explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_tableContext extends ParserRuleContext {
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public Explicit_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_table; }
	}

	public final Explicit_tableContext explicit_table() throws RecognitionException {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_explicit_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			match(T__165);
			setState(4072);
			table_or_query_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_specContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Corresponding_column_listContext corresponding_column_list() {
			return getRuleContext(Corresponding_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Corresponding_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_spec; }
	}

	public final Corresponding_specContext corresponding_spec() throws RecognitionException {
		Corresponding_specContext _localctx = new Corresponding_specContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_corresponding_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4074);
			match(T__214);
			setState(4080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__187) {
				{
				setState(4075);
				match(T__187);
				setState(4076);
				match(LEFT_PAREN);
				setState(4077);
				corresponding_column_list();
				setState(4078);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Corresponding_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_column_list; }
	}

	public final Corresponding_column_listContext corresponding_column_list() throws RecognitionException {
		Corresponding_column_listContext _localctx = new Corresponding_column_listContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_corresponding_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4082);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_order_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			match(T__200);
			setState(4085);
			match(T__187);
			setState(4086);
			sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_offset_clauseContext extends ParserRuleContext {
		public Offset_row_countContext offset_row_count() {
			return getRuleContext(Offset_row_countContext.class,0);
		}
		public Result_offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_offset_clause; }
	}

	public final Result_offset_clauseContext result_offset_clause() throws RecognitionException {
		Result_offset_clauseContext _localctx = new Result_offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_result_offset_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4088);
			match(T__215);
			setState(4089);
			offset_row_count();
			setState(4090);
			_la = _input.LA(1);
			if ( !(_la==T__38 || _la==T__201) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_first_clauseContext extends ParserRuleContext {
		public Fetch_first_quantityContext fetch_first_quantity() {
			return getRuleContext(Fetch_first_quantityContext.class,0);
		}
		public Fetch_first_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_first_clause; }
	}

	public final Fetch_first_clauseContext fetch_first_clause() throws RecognitionException {
		Fetch_first_clauseContext _localctx = new Fetch_first_clauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_fetch_first_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			match(T__216);
			setState(4093);
			_la = _input.LA(1);
			if ( !(_la==T__74 || _la==T__93) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (PLUS_SIGN - 362)) | (1L << (MINUS_SIGN - 362)) | (1L << (PERIOD - 362)) | (1L << (COLON - 362)) | (1L << (IDENTIFIER_BODY - 362)) | (1L << (DELIMITED_IDENTIFIER - 362)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 362)) | (1L << (CHARACTER_STRING_LITERAL - 362)) | (1L << (UNICODE_CHARACTER_STRING_LITERAL - 362)) | (1L << (BINARY_STRING_LITERAL - 362)) | (1L << (UNSIGNED_INTEGER - 362)) | (1L << (DATE_LITERAL - 362)) | (1L << (TIME_LITERAL - 362)) | (1L << (TIMESTAMP_LITERAL - 362)) | (1L << (INTERVAL_LITERAL - 362)) | (1L << (BOOLEAN_LITERAL - 362)))) != 0)) {
				{
				setState(4094);
				fetch_first_quantity();
				}
			}

			setState(4097);
			_la = _input.LA(1);
			if ( !(_la==T__38 || _la==T__201) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__180:
				{
				setState(4098);
				match(T__180);
				}
				break;
			case T__34:
				{
				setState(4099);
				match(T__34);
				setState(4100);
				match(T__209);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_first_quantityContext extends ParserRuleContext {
		public Fetch_first_row_countContext fetch_first_row_count() {
			return getRuleContext(Fetch_first_row_countContext.class,0);
		}
		public Fetch_first_percentageContext fetch_first_percentage() {
			return getRuleContext(Fetch_first_percentageContext.class,0);
		}
		public Fetch_first_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_first_quantity; }
	}

	public final Fetch_first_quantityContext fetch_first_quantity() throws RecognitionException {
		Fetch_first_quantityContext _localctx = new Fetch_first_quantityContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_fetch_first_quantity);
		try {
			setState(4105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4103);
				fetch_first_row_count();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4104);
				fetch_first_percentage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_row_countContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Offset_row_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_row_count; }
	}

	public final Offset_row_countContext offset_row_count() throws RecognitionException {
		Offset_row_countContext _localctx = new Offset_row_countContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_offset_row_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_first_row_countContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Fetch_first_row_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_first_row_count; }
	}

	public final Fetch_first_row_countContext fetch_first_row_count() throws RecognitionException {
		Fetch_first_row_countContext _localctx = new Fetch_first_row_countContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_fetch_first_row_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_first_percentageContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Fetch_first_percentageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_first_percentage; }
	}

	public final Fetch_first_percentageContext fetch_first_percentage() throws RecognitionException {
		Fetch_first_percentageContext _localctx = new Fetch_first_percentageContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_fetch_first_percentage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4111);
			simple_value_specification();
			setState(4112);
			match(T__217);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_or_cycle_clauseContext extends ParserRuleContext {
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Search_or_cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_or_cycle_clause; }
	}

	public final Search_or_cycle_clauseContext search_or_cycle_clause() throws RecognitionException {
		Search_or_cycle_clauseContext _localctx = new Search_or_cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_search_or_cycle_clause);
		try {
			setState(4119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4114);
				search_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4115);
				cycle_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4116);
				search_clause();
				setState(4117);
				cycle_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public Recursive_search_orderContext recursive_search_order() {
			return getRuleContext(Recursive_search_orderContext.class,0);
		}
		public Sequence_columnContext sequence_column() {
			return getRuleContext(Sequence_columnContext.class,0);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_search_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4121);
			match(T__218);
			setState(4122);
			recursive_search_order();
			setState(4123);
			match(T__7);
			setState(4124);
			sequence_column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recursive_search_orderContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Recursive_search_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recursive_search_order; }
	}

	public final Recursive_search_orderContext recursive_search_order() throws RecognitionException {
		Recursive_search_orderContext _localctx = new Recursive_search_orderContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_recursive_search_order);
		try {
			setState(4134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__219:
				enterOuterAlt(_localctx, 1);
				{
				setState(4126);
				match(T__219);
				setState(4127);
				match(T__74);
				setState(4128);
				match(T__187);
				setState(4129);
				column_name_list();
				}
				break;
			case T__220:
				enterOuterAlt(_localctx, 2);
				{
				setState(4130);
				match(T__220);
				setState(4131);
				match(T__74);
				setState(4132);
				match(T__187);
				setState(4133);
				column_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Sequence_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_column; }
	}

	public final Sequence_columnContext sequence_column() throws RecognitionException {
		Sequence_columnContext _localctx = new Sequence_columnContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_sequence_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4136);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public Cycle_column_listContext cycle_column_list() {
			return getRuleContext(Cycle_column_listContext.class,0);
		}
		public Cycle_mark_columnContext cycle_mark_column() {
			return getRuleContext(Cycle_mark_columnContext.class,0);
		}
		public Cycle_mark_valueContext cycle_mark_value() {
			return getRuleContext(Cycle_mark_valueContext.class,0);
		}
		public Non_cycle_mark_valueContext non_cycle_mark_value() {
			return getRuleContext(Non_cycle_mark_valueContext.class,0);
		}
		public Path_columnContext path_column() {
			return getRuleContext(Path_columnContext.class,0);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_cycle_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4138);
			match(T__221);
			setState(4139);
			cycle_column_list();
			setState(4140);
			match(T__7);
			setState(4141);
			cycle_mark_column();
			setState(4142);
			match(T__179);
			setState(4143);
			cycle_mark_value();
			setState(4144);
			match(T__56);
			setState(4145);
			non_cycle_mark_value();
			setState(4146);
			match(T__101);
			setState(4147);
			path_column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_column_listContext extends ParserRuleContext {
		public List<Cycle_columnContext> cycle_column() {
			return getRuleContexts(Cycle_columnContext.class);
		}
		public Cycle_columnContext cycle_column(int i) {
			return getRuleContext(Cycle_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Cycle_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_column_list; }
	}

	public final Cycle_column_listContext cycle_column_list() throws RecognitionException {
		Cycle_column_listContext _localctx = new Cycle_column_listContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_cycle_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4149);
			cycle_column();
			setState(4154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4150);
				match(COMMA);
				setState(4151);
				cycle_column();
				}
				}
				setState(4156);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Cycle_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_column; }
	}

	public final Cycle_columnContext cycle_column() throws RecognitionException {
		Cycle_columnContext _localctx = new Cycle_columnContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_cycle_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_mark_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Cycle_mark_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_mark_column; }
	}

	public final Cycle_mark_columnContext cycle_mark_column() throws RecognitionException {
		Cycle_mark_columnContext _localctx = new Cycle_mark_columnContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_cycle_mark_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Path_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_column; }
	}

	public final Path_columnContext path_column() throws RecognitionException {
		Path_columnContext _localctx = new Path_columnContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_path_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_mark_valueContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Cycle_mark_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_mark_value; }
	}

	public final Cycle_mark_valueContext cycle_mark_value() throws RecognitionException {
		Cycle_mark_valueContext _localctx = new Cycle_mark_valueContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_cycle_mark_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_cycle_mark_valueContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Non_cycle_mark_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_cycle_mark_value; }
	}

	public final Non_cycle_mark_valueContext non_cycle_mark_value() throws RecognitionException {
		Non_cycle_mark_valueContext _localctx = new Non_cycle_mark_valueContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_non_cycle_mark_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4165);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_subquery; }
	}

	public final Scalar_subqueryContext scalar_subquery() throws RecognitionException {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_scalar_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4167);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_subquery; }
	}

	public final Row_subqueryContext row_subquery() throws RecognitionException {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_row_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4169);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4171);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4173);
			match(LEFT_PAREN);
			setState(4174);
			query_expression();
			setState(4175);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Comparison_predicateContext comparison_predicate() {
			return getRuleContext(Comparison_predicateContext.class,0);
		}
		public Between_predicateContext between_predicate() {
			return getRuleContext(Between_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Like_predicateContext like_predicate() {
			return getRuleContext(Like_predicateContext.class,0);
		}
		public Similar_predicateContext similar_predicate() {
			return getRuleContext(Similar_predicateContext.class,0);
		}
		public Regex_like_predicateContext regex_like_predicate() {
			return getRuleContext(Regex_like_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public Quantified_comparison_predicateContext quantified_comparison_predicate() {
			return getRuleContext(Quantified_comparison_predicateContext.class,0);
		}
		public Exists_predicateContext exists_predicate() {
			return getRuleContext(Exists_predicateContext.class,0);
		}
		public Unique_predicateContext unique_predicate() {
			return getRuleContext(Unique_predicateContext.class,0);
		}
		public Normalized_predicateContext normalized_predicate() {
			return getRuleContext(Normalized_predicateContext.class,0);
		}
		public Match_predicateContext match_predicate() {
			return getRuleContext(Match_predicateContext.class,0);
		}
		public Overlaps_predicateContext overlaps_predicate() {
			return getRuleContext(Overlaps_predicateContext.class,0);
		}
		public Distinct_predicateContext distinct_predicate() {
			return getRuleContext(Distinct_predicateContext.class,0);
		}
		public Member_predicateContext member_predicate() {
			return getRuleContext(Member_predicateContext.class,0);
		}
		public Submultiset_predicateContext submultiset_predicate() {
			return getRuleContext(Submultiset_predicateContext.class,0);
		}
		public Set_predicateContext set_predicate() {
			return getRuleContext(Set_predicateContext.class,0);
		}
		public Type_predicateContext type_predicate() {
			return getRuleContext(Type_predicateContext.class,0);
		}
		public Period_predicateContext period_predicate() {
			return getRuleContext(Period_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_predicate);
		try {
			setState(4196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4177);
				comparison_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4178);
				between_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4179);
				in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4180);
				like_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4181);
				similar_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4182);
				regex_like_predicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4183);
				null_predicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4184);
				quantified_comparison_predicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4185);
				exists_predicate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4186);
				unique_predicate();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4187);
				normalized_predicate();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4188);
				match_predicate();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4189);
				overlaps_predicate();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4190);
				distinct_predicate();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4191);
				member_predicate();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4192);
				submultiset_predicate();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4193);
				set_predicate();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4194);
				type_predicate();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4195);
				period_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Comparison_predicate_part_2Context comparison_predicate_part_2() {
			return getRuleContext(Comparison_predicate_part_2Context.class,0);
		}
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_predicate; }
	}

	public final Comparison_predicateContext comparison_predicate() throws RecognitionException {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4198);
			row_value_predicand();
			setState(4199);
			comparison_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_predicate_part_2Context extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Comparison_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_predicate_part_2; }
	}

	public final Comparison_predicate_part_2Context comparison_predicate_part_2() throws RecognitionException {
		Comparison_predicate_part_2Context _localctx = new Comparison_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 908, RULE_comparison_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4201);
			comp_op();
			setState(4202);
			row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_opContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(SQL2011Parser.EQUALS_OPERATOR, 0); }
		public TerminalNode NOT_EQUALS_OPERATOR() { return getToken(SQL2011Parser.NOT_EQUALS_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(SQL2011Parser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(SQL2011Parser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OPERATOR() { return getToken(SQL2011Parser.LESS_THAN_OR_EQUALS_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OPERATOR() { return getToken(SQL2011Parser.GREATER_THAN_OR_EQUALS_OPERATOR, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_op; }
	}

	public final Comp_opContext comp_op() throws RecognitionException {
		Comp_opContext _localctx = new Comp_opContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_comp_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			_la = _input.LA(1);
			if ( !(((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & ((1L << (LESS_THAN_OPERATOR - 370)) | (1L << (EQUALS_OPERATOR - 370)) | (1L << (GREATER_THAN_OPERATOR - 370)) | (1L << (NOT_EQUALS_OPERATOR - 370)) | (1L << (GREATER_THAN_OR_EQUALS_OPERATOR - 370)) | (1L << (LESS_THAN_OR_EQUALS_OPERATOR - 370)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Between_predicate_part_2Context between_predicate_part_2() {
			return getRuleContext(Between_predicate_part_2Context.class,0);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate; }
	}

	public final Between_predicateContext between_predicate() throws RecognitionException {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_between_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			row_value_predicand();
			setState(4207);
			between_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicate_part_2Context extends ParserRuleContext {
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public Between_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate_part_2; }
	}

	public final Between_predicate_part_2Context between_predicate_part_2() throws RecognitionException {
		Between_predicate_part_2Context _localctx = new Between_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 914, RULE_between_predicate_part_2);
		int _la;
		try {
			setState(4221);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__155:
			case T__176:
				enterOuterAlt(_localctx, 1);
				{
				setState(4210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__155) {
					{
					setState(4209);
					match(T__155);
					}
				}

				setState(4212);
				match(T__176);
				setState(4213);
				match(T__177);
				}
				break;
			case T__1:
			case T__4:
			case T__5:
			case T__7:
			case T__38:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__136:
			case T__140:
			case T__142:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__160:
			case T__162:
			case T__165:
			case T__178:
			case T__224:
			case T__225:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__178) {
					{
					setState(4214);
					match(T__178);
					}
				}

				setState(4217);
				row_value_predicand();
				setState(4218);
				match(T__154);
				setState(4219);
				row_value_predicand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public In_predicate_part_2Context in_predicate_part_2() {
			return getRuleContext(In_predicate_part_2Context.class,0);
		}
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_in_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4223);
			row_value_predicand();
			setState(4224);
			in_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_part_2Context extends ParserRuleContext {
		public In_predicate_valueContext in_predicate_value() {
			return getRuleContext(In_predicate_valueContext.class,0);
		}
		public In_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_part_2; }
	}

	public final In_predicate_part_2Context in_predicate_part_2() throws RecognitionException {
		In_predicate_part_2Context _localctx = new In_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 918, RULE_in_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4226);
				match(T__155);
				}
			}

			setState(4229);
			match(T__100);
			setState(4230);
			in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_valueContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_value; }
	}

	public final In_predicate_valueContext in_predicate_value() throws RecognitionException {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_in_predicate_value);
		try {
			setState(4237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4232);
				table_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4233);
				match(LEFT_PAREN);
				setState(4234);
				in_value_list();
				setState(4235);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_value_listContext extends ParserRuleContext {
		public List<Row_value_expressionContext> row_value_expression() {
			return getRuleContexts(Row_value_expressionContext.class);
		}
		public Row_value_expressionContext row_value_expression(int i) {
			return getRuleContext(Row_value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_value_list; }
	}

	public final In_value_listContext in_value_list() throws RecognitionException {
		In_value_listContext _localctx = new In_value_listContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_in_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4239);
			row_value_expression();
			setState(4244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4240);
				match(COMMA);
				setState(4241);
				row_value_expression();
				}
				}
				setState(4246);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_predicateContext extends ParserRuleContext {
		public Character_like_predicateContext character_like_predicate() {
			return getRuleContext(Character_like_predicateContext.class,0);
		}
		public Octet_like_predicateContext octet_like_predicate() {
			return getRuleContext(Octet_like_predicateContext.class,0);
		}
		public Like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_predicate; }
	}

	public final Like_predicateContext like_predicate() throws RecognitionException {
		Like_predicateContext _localctx = new Like_predicateContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_like_predicate);
		try {
			setState(4249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4247);
				character_like_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4248);
				octet_like_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_like_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Character_like_predicate_part_2Context character_like_predicate_part_2() {
			return getRuleContext(Character_like_predicate_part_2Context.class,0);
		}
		public Character_like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_like_predicate; }
	}

	public final Character_like_predicateContext character_like_predicate() throws RecognitionException {
		Character_like_predicateContext _localctx = new Character_like_predicateContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_character_like_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4251);
			row_value_predicand();
			setState(4252);
			character_like_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_like_predicate_part_2Context extends ParserRuleContext {
		public Character_patternContext character_pattern() {
			return getRuleContext(Character_patternContext.class,0);
		}
		public Escape_characterContext escape_character() {
			return getRuleContext(Escape_characterContext.class,0);
		}
		public Character_like_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_like_predicate_part_2; }
	}

	public final Character_like_predicate_part_2Context character_like_predicate_part_2() throws RecognitionException {
		Character_like_predicate_part_2Context _localctx = new Character_like_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 928, RULE_character_like_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4254);
				match(T__155);
				}
			}

			setState(4257);
			match(T__222);
			setState(4258);
			character_pattern();
			setState(4261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(4259);
				match(T__128);
				setState(4260);
				escape_character();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_patternContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Character_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_pattern; }
	}

	public final Character_patternContext character_pattern() throws RecognitionException {
		Character_patternContext _localctx = new Character_patternContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_character_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4263);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Escape_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Escape_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape_character; }
	}

	public final Escape_characterContext escape_character() throws RecognitionException {
		Escape_characterContext _localctx = new Escape_characterContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_escape_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_like_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Octet_like_predicate_part_2Context octet_like_predicate_part_2() {
			return getRuleContext(Octet_like_predicate_part_2Context.class,0);
		}
		public Octet_like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_like_predicate; }
	}

	public final Octet_like_predicateContext octet_like_predicate() throws RecognitionException {
		Octet_like_predicateContext _localctx = new Octet_like_predicateContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_octet_like_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4267);
			row_value_predicand();
			setState(4268);
			octet_like_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_like_predicate_part_2Context extends ParserRuleContext {
		public Octet_patternContext octet_pattern() {
			return getRuleContext(Octet_patternContext.class,0);
		}
		public Escape_octetContext escape_octet() {
			return getRuleContext(Escape_octetContext.class,0);
		}
		public Octet_like_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_like_predicate_part_2; }
	}

	public final Octet_like_predicate_part_2Context octet_like_predicate_part_2() throws RecognitionException {
		Octet_like_predicate_part_2Context _localctx = new Octet_like_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 936, RULE_octet_like_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4270);
				match(T__155);
				}
			}

			setState(4273);
			match(T__222);
			setState(4274);
			octet_pattern();
			setState(4277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(4275);
				match(T__128);
				setState(4276);
				escape_octet();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_patternContext extends ParserRuleContext {
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public Octet_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_pattern; }
	}

	public final Octet_patternContext octet_pattern() throws RecognitionException {
		Octet_patternContext _localctx = new Octet_patternContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_octet_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			binary_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Escape_octetContext extends ParserRuleContext {
		public Binary_value_expressionContext binary_value_expression() {
			return getRuleContext(Binary_value_expressionContext.class,0);
		}
		public Escape_octetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape_octet; }
	}

	public final Escape_octetContext escape_octet() throws RecognitionException {
		Escape_octetContext _localctx = new Escape_octetContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_escape_octet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			binary_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Similar_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Similar_predicate_part_2Context similar_predicate_part_2() {
			return getRuleContext(Similar_predicate_part_2Context.class,0);
		}
		public Similar_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_similar_predicate; }
	}

	public final Similar_predicateContext similar_predicate() throws RecognitionException {
		Similar_predicateContext _localctx = new Similar_predicateContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_similar_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4283);
			row_value_predicand();
			setState(4284);
			similar_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Similar_predicate_part_2Context extends ParserRuleContext {
		public Similar_patternContext similar_pattern() {
			return getRuleContext(Similar_patternContext.class,0);
		}
		public Escape_characterContext escape_character() {
			return getRuleContext(Escape_characterContext.class,0);
		}
		public Similar_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_similar_predicate_part_2; }
	}

	public final Similar_predicate_part_2Context similar_predicate_part_2() throws RecognitionException {
		Similar_predicate_part_2Context _localctx = new Similar_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 944, RULE_similar_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4286);
				match(T__155);
				}
			}

			setState(4289);
			match(T__127);
			setState(4290);
			match(T__179);
			setState(4291);
			similar_pattern();
			setState(4294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(4292);
				match(T__128);
				setState(4293);
				escape_character();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Similar_patternContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Similar_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_similar_pattern; }
	}

	public final Similar_patternContext similar_pattern() throws RecognitionException {
		Similar_patternContext _localctx = new Similar_patternContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_similar_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4296);
			character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_expressionContext extends ParserRuleContext {
		public Regular_termContext regular_term() {
			return getRuleContext(Regular_termContext.class,0);
		}
		public Regular_expressionContext regular_expression() {
			return getRuleContext(Regular_expressionContext.class,0);
		}
		public TerminalNode VERTICAL_BAR() { return getToken(SQL2011Parser.VERTICAL_BAR, 0); }
		public Regular_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_expression; }
	}

	public final Regular_expressionContext regular_expression() throws RecognitionException {
		return regular_expression(0);
	}

	private Regular_expressionContext regular_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Regular_expressionContext _localctx = new Regular_expressionContext(_ctx, _parentState);
		Regular_expressionContext _prevctx = _localctx;
		int _startState = 948;
		enterRecursionRule(_localctx, 948, RULE_regular_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4299);
			regular_term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(4306);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Regular_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_regular_expression);
					setState(4301);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4302);
					match(VERTICAL_BAR);
					setState(4303);
					regular_term(0);
					}
					} 
				}
				setState(4308);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Regular_termContext extends ParserRuleContext {
		public Regular_factorContext regular_factor() {
			return getRuleContext(Regular_factorContext.class,0);
		}
		public Regular_termContext regular_term() {
			return getRuleContext(Regular_termContext.class,0);
		}
		public Regular_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_term; }
	}

	public final Regular_termContext regular_term() throws RecognitionException {
		return regular_term(0);
	}

	private Regular_termContext regular_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Regular_termContext _localctx = new Regular_termContext(_ctx, _parentState);
		Regular_termContext _prevctx = _localctx;
		int _startState = 950;
		enterRecursionRule(_localctx, 950, RULE_regular_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4310);
			regular_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(4316);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Regular_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_regular_term);
					setState(4312);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4313);
					regular_factor();
					}
					} 
				}
				setState(4318);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Regular_factorContext extends ParserRuleContext {
		public Regular_primaryContext regular_primary() {
			return getRuleContext(Regular_primaryContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(SQL2011Parser.PLUS_SIGN, 0); }
		public TerminalNode QUESTION_MARK() { return getToken(SQL2011Parser.QUESTION_MARK, 0); }
		public Repeat_factorContext repeat_factor() {
			return getRuleContext(Repeat_factorContext.class,0);
		}
		public Regular_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_factor; }
	}

	public final Regular_factorContext regular_factor() throws RecognitionException {
		Regular_factorContext _localctx = new Regular_factorContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_regular_factor);
		try {
			setState(4332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4319);
				regular_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4320);
				regular_primary();
				setState(4321);
				match(ASTERISK);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4323);
				regular_primary();
				setState(4324);
				match(PLUS_SIGN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4326);
				regular_primary();
				setState(4327);
				match(QUESTION_MARK);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4329);
				regular_primary();
				setState(4330);
				repeat_factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repeat_factorContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(SQL2011Parser.LEFT_BRACE, 0); }
		public Low_valueContext low_value() {
			return getRuleContext(Low_valueContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(SQL2011Parser.RIGHT_BRACE, 0); }
		public Upper_limitContext upper_limit() {
			return getRuleContext(Upper_limitContext.class,0);
		}
		public Repeat_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeat_factor; }
	}

	public final Repeat_factorContext repeat_factor() throws RecognitionException {
		Repeat_factorContext _localctx = new Repeat_factorContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_repeat_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			match(LEFT_BRACE);
			setState(4335);
			low_value();
			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4336);
				upper_limit();
				}
			}

			setState(4339);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_limitContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public High_valueContext high_value() {
			return getRuleContext(High_valueContext.class,0);
		}
		public Upper_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_limit; }
	}

	public final Upper_limitContext upper_limit() throws RecognitionException {
		Upper_limitContext _localctx = new Upper_limitContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_upper_limit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			match(COMMA);
			setState(4343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNSIGNED_INTEGER) {
				{
				setState(4342);
				high_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Low_valueContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public Low_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_low_value; }
	}

	public final Low_valueContext low_value() throws RecognitionException {
		Low_valueContext _localctx = new Low_valueContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_low_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4345);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class High_valueContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(SQL2011Parser.UNSIGNED_INTEGER, 0); }
		public High_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_high_value; }
	}

	public final High_valueContext high_value() throws RecognitionException {
		High_valueContext _localctx = new High_valueContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_high_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4347);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_primaryContext extends ParserRuleContext {
		public Character_specifierContext character_specifier() {
			return getRuleContext(Character_specifierContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(SQL2011Parser.PERCENT, 0); }
		public Regular_character_setContext regular_character_set() {
			return getRuleContext(Regular_character_setContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Regular_expressionContext regular_expression() {
			return getRuleContext(Regular_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Regular_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_primary; }
	}

	public final Regular_primaryContext regular_primary() throws RecognitionException {
		Regular_primaryContext _localctx = new Regular_primaryContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_regular_primary);
		try {
			setState(4356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_ESCAPED_CHARACTER:
			case ESCAPED_CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4349);
				character_specifier();
				}
				break;
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4350);
				match(PERCENT);
				}
				break;
			case LEFT_BRACKET:
			case UNDERSCORE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4351);
				regular_character_set();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4352);
				match(LEFT_PAREN);
				setState(4353);
				regular_expression(0);
				setState(4354);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_specifierContext extends ParserRuleContext {
		public TerminalNode NON_ESCAPED_CHARACTER() { return getToken(SQL2011Parser.NON_ESCAPED_CHARACTER, 0); }
		public TerminalNode ESCAPED_CHARACTER() { return getToken(SQL2011Parser.ESCAPED_CHARACTER, 0); }
		public Character_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_specifier; }
	}

	public final Character_specifierContext character_specifier() throws RecognitionException {
		Character_specifierContext _localctx = new Character_specifierContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_character_specifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4358);
			_la = _input.LA(1);
			if ( !(_la==NON_ESCAPED_CHARACTER || _la==ESCAPED_CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_character_setContext extends ParserRuleContext {
		public TerminalNode UNDERSCORE() { return getToken(SQL2011Parser.UNDERSCORE, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(SQL2011Parser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SQL2011Parser.RIGHT_BRACKET, 0); }
		public List<Character_enumerationContext> character_enumeration() {
			return getRuleContexts(Character_enumerationContext.class);
		}
		public Character_enumerationContext character_enumeration(int i) {
			return getRuleContext(Character_enumerationContext.class,i);
		}
		public TerminalNode CIRCUMFLEX() { return getToken(SQL2011Parser.CIRCUMFLEX, 0); }
		public List<Character_enumeration_includeContext> character_enumeration_include() {
			return getRuleContexts(Character_enumeration_includeContext.class);
		}
		public Character_enumeration_includeContext character_enumeration_include(int i) {
			return getRuleContext(Character_enumeration_includeContext.class,i);
		}
		public List<Character_enumeration_excludeContext> character_enumeration_exclude() {
			return getRuleContexts(Character_enumeration_excludeContext.class);
		}
		public Character_enumeration_excludeContext character_enumeration_exclude(int i) {
			return getRuleContext(Character_enumeration_excludeContext.class,i);
		}
		public Regular_character_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_character_set; }
	}

	public final Regular_character_setContext regular_character_set() throws RecognitionException {
		Regular_character_setContext _localctx = new Regular_character_setContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_regular_character_set);
		int _la;
		try {
			setState(4392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4360);
				match(UNDERSCORE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4361);
				match(LEFT_BRACKET);
				setState(4363); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4362);
					character_enumeration();
					}
					}
					setState(4365); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (LEFT_BRACKET - 376)) | (1L << (NON_ESCAPED_CHARACTER - 376)) | (1L << (ESCAPED_CHARACTER - 376)))) != 0) );
				setState(4367);
				match(RIGHT_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4369);
				match(LEFT_BRACKET);
				setState(4370);
				match(CIRCUMFLEX);
				setState(4372); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4371);
					character_enumeration();
					}
					}
					setState(4374); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (LEFT_BRACKET - 376)) | (1L << (NON_ESCAPED_CHARACTER - 376)) | (1L << (ESCAPED_CHARACTER - 376)))) != 0) );
				setState(4376);
				match(RIGHT_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4378);
				match(LEFT_BRACKET);
				setState(4380); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4379);
					character_enumeration_include();
					}
					}
					setState(4382); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (LEFT_BRACKET - 376)) | (1L << (NON_ESCAPED_CHARACTER - 376)) | (1L << (ESCAPED_CHARACTER - 376)))) != 0) );
				setState(4384);
				match(CIRCUMFLEX);
				setState(4386); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4385);
					character_enumeration_exclude();
					}
					}
					setState(4388); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (LEFT_BRACKET - 376)) | (1L << (NON_ESCAPED_CHARACTER - 376)) | (1L << (ESCAPED_CHARACTER - 376)))) != 0) );
				setState(4390);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_enumeration_includeContext extends ParserRuleContext {
		public Character_enumerationContext character_enumeration() {
			return getRuleContext(Character_enumerationContext.class,0);
		}
		public Character_enumeration_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_enumeration_include; }
	}

	public final Character_enumeration_includeContext character_enumeration_include() throws RecognitionException {
		Character_enumeration_includeContext _localctx = new Character_enumeration_includeContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_character_enumeration_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			character_enumeration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_enumeration_excludeContext extends ParserRuleContext {
		public Character_enumerationContext character_enumeration() {
			return getRuleContext(Character_enumerationContext.class,0);
		}
		public Character_enumeration_excludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_enumeration_exclude; }
	}

	public final Character_enumeration_excludeContext character_enumeration_exclude() throws RecognitionException {
		Character_enumeration_excludeContext _localctx = new Character_enumeration_excludeContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_character_enumeration_exclude);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4396);
			character_enumeration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_enumerationContext extends ParserRuleContext {
		public List<Character_specifierContext> character_specifier() {
			return getRuleContexts(Character_specifierContext.class);
		}
		public Character_specifierContext character_specifier(int i) {
			return getRuleContext(Character_specifierContext.class,i);
		}
		public TerminalNode MINUS_SIGN() { return getToken(SQL2011Parser.MINUS_SIGN, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(SQL2011Parser.LEFT_BRACKET, 0); }
		public List<TerminalNode> COLON() { return getTokens(SQL2011Parser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(SQL2011Parser.COLON, i);
		}
		public Regular_character_set_identifierContext regular_character_set_identifier() {
			return getRuleContext(Regular_character_set_identifierContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SQL2011Parser.RIGHT_BRACKET, 0); }
		public Character_enumerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_enumeration; }
	}

	public final Character_enumerationContext character_enumeration() throws RecognitionException {
		Character_enumerationContext _localctx = new Character_enumerationContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_character_enumeration);
		try {
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4398);
				character_specifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4399);
				character_specifier();
				setState(4400);
				match(MINUS_SIGN);
				setState(4401);
				character_specifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4403);
				match(LEFT_BRACKET);
				setState(4404);
				match(COLON);
				setState(4405);
				regular_character_set_identifier();
				setState(4406);
				match(COLON);
				setState(4407);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_character_set_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Regular_character_set_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_character_set_identifier; }
	}

	public final Regular_character_set_identifierContext regular_character_set_identifier() throws RecognitionException {
		Regular_character_set_identifierContext _localctx = new Regular_character_set_identifierContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_regular_character_set_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4411);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_like_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Regex_like_predicate_part_2Context regex_like_predicate_part_2() {
			return getRuleContext(Regex_like_predicate_part_2Context.class,0);
		}
		public Regex_like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_like_predicate; }
	}

	public final Regex_like_predicateContext regex_like_predicate() throws RecognitionException {
		Regex_like_predicateContext _localctx = new Regex_like_predicateContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_regex_like_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4413);
			row_value_predicand();
			setState(4414);
			regex_like_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_like_predicate_part_2Context extends ParserRuleContext {
		public Xquery_patternContext xquery_pattern() {
			return getRuleContext(Xquery_patternContext.class,0);
		}
		public Xquery_option_flagContext xquery_option_flag() {
			return getRuleContext(Xquery_option_flagContext.class,0);
		}
		public Regex_like_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_like_predicate_part_2; }
	}

	public final Regex_like_predicate_part_2Context regex_like_predicate_part_2() throws RecognitionException {
		Regex_like_predicate_part_2Context _localctx = new Regex_like_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 978, RULE_regex_like_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4416);
				match(T__155);
				}
			}

			setState(4419);
			match(T__223);
			setState(4420);
			xquery_pattern();
			setState(4423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(4421);
				match(T__99);
				setState(4422);
				xquery_option_flag();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Null_predicate_part_2Context null_predicate_part_2() {
			return getRuleContext(Null_predicate_part_2Context.class,0);
		}
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_null_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			row_value_predicand();
			setState(4426);
			null_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicate_part_2Context extends ParserRuleContext {
		public Null_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate_part_2; }
	}

	public final Null_predicate_part_2Context null_predicate_part_2() throws RecognitionException {
		Null_predicate_part_2Context _localctx = new Null_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 982, RULE_null_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4428);
			match(T__156);
			setState(4430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4429);
				match(T__155);
				}
			}

			setState(4432);
			match(T__55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparison_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Quantified_comparison_predicate_part_2Context quantified_comparison_predicate_part_2() {
			return getRuleContext(Quantified_comparison_predicate_part_2Context.class,0);
		}
		public Quantified_comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparison_predicate; }
	}

	public final Quantified_comparison_predicateContext quantified_comparison_predicate() throws RecognitionException {
		Quantified_comparison_predicateContext _localctx = new Quantified_comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_quantified_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4434);
			row_value_predicand();
			setState(4435);
			quantified_comparison_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparison_predicate_part_2Context extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public QuantifierContext quantifier() {
			return getRuleContext(QuantifierContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Quantified_comparison_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparison_predicate_part_2; }
	}

	public final Quantified_comparison_predicate_part_2Context quantified_comparison_predicate_part_2() throws RecognitionException {
		Quantified_comparison_predicate_part_2Context _localctx = new Quantified_comparison_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 986, RULE_quantified_comparison_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4437);
			comp_op();
			setState(4438);
			quantifier();
			setState(4439);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifierContext extends ParserRuleContext {
		public AllContext all() {
			return getRuleContext(AllContext.class,0);
		}
		public SomeContext some() {
			return getRuleContext(SomeContext.class,0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifier; }
	}

	public final QuantifierContext quantifier() throws RecognitionException {
		QuantifierContext _localctx = new QuantifierContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_quantifier);
		try {
			setState(4443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__135:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441);
				all();
				}
				break;
			case T__224:
			case T__225:
				enterOuterAlt(_localctx, 2);
				{
				setState(4442);
				some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllContext extends ParserRuleContext {
		public AllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all; }
	}

	public final AllContext all() throws RecognitionException {
		AllContext _localctx = new AllContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4445);
			match(T__135);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SomeContext extends ParserRuleContext {
		public SomeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_some; }
	}

	public final SomeContext some() throws RecognitionException {
		SomeContext _localctx = new SomeContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_some);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4447);
			_la = _input.LA(1);
			if ( !(_la==T__224 || _la==T__225) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_predicateContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Exists_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_predicate; }
	}

	public final Exists_predicateContext exists_predicate() throws RecognitionException {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_exists_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4449);
			match(T__226);
			setState(4450);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_predicateContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Unique_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_predicate; }
	}

	public final Unique_predicateContext unique_predicate() throws RecognitionException {
		Unique_predicateContext _localctx = new Unique_predicateContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_unique_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			match(T__227);
			setState(4453);
			table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normalized_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Normalized_predicate_part_2Context normalized_predicate_part_2() {
			return getRuleContext(Normalized_predicate_part_2Context.class,0);
		}
		public Normalized_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalized_predicate; }
	}

	public final Normalized_predicateContext normalized_predicate() throws RecognitionException {
		Normalized_predicateContext _localctx = new Normalized_predicateContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_normalized_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4455);
			row_value_predicand();
			setState(4456);
			normalized_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normalized_predicate_part_2Context extends ParserRuleContext {
		public Normal_formContext normal_form() {
			return getRuleContext(Normal_formContext.class,0);
		}
		public Normalized_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalized_predicate_part_2; }
	}

	public final Normalized_predicate_part_2Context normalized_predicate_part_2() throws RecognitionException {
		Normalized_predicate_part_2Context _localctx = new Normalized_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1000, RULE_normalized_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			match(T__156);
			setState(4460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4459);
				match(T__155);
				}
			}

			setState(4463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (T__143 - 144)) | (1L << (T__144 - 144)) | (1L << (T__145 - 144)) | (1L << (T__146 - 144)))) != 0)) {
				{
				setState(4462);
				normal_form();
				}
			}

			setState(4465);
			match(T__228);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Match_predicate_part_2Context match_predicate_part_2() {
			return getRuleContext(Match_predicate_part_2Context.class,0);
		}
		public Match_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_predicate; }
	}

	public final Match_predicateContext match_predicate() throws RecognitionException {
		Match_predicateContext _localctx = new Match_predicateContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_match_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4467);
			row_value_predicand();
			setState(4468);
			match_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_predicate_part_2Context extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Match_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_predicate_part_2; }
	}

	public final Match_predicate_part_2Context match_predicate_part_2() throws RecognitionException {
		Match_predicate_part_2Context _localctx = new Match_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1004, RULE_match_predicate_part_2);
		int _la;
		try {
			setState(4480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__229:
				enterOuterAlt(_localctx, 1);
				{
				setState(4470);
				match(T__229);
				setState(4472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__227) {
					{
					setState(4471);
					match(T__227);
					}
				}

				setState(4474);
				match(T__230);
				}
				break;
			case T__231:
				enterOuterAlt(_localctx, 2);
				{
				setState(4475);
				match(T__231);
				}
				break;
			case T__193:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__193) {
					{
					setState(4476);
					match(T__193);
					}
				}

				setState(4479);
				table_subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlaps_predicateContext extends ParserRuleContext {
		public Overlaps_predicate_part_1Context overlaps_predicate_part_1() {
			return getRuleContext(Overlaps_predicate_part_1Context.class,0);
		}
		public Overlaps_predicate_part_2Context overlaps_predicate_part_2() {
			return getRuleContext(Overlaps_predicate_part_2Context.class,0);
		}
		public Overlaps_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlaps_predicate; }
	}

	public final Overlaps_predicateContext overlaps_predicate() throws RecognitionException {
		Overlaps_predicateContext _localctx = new Overlaps_predicateContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_overlaps_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4482);
			overlaps_predicate_part_1();
			setState(4483);
			overlaps_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlaps_predicate_part_1Context extends ParserRuleContext {
		public Row_value_predicand_1Context row_value_predicand_1() {
			return getRuleContext(Row_value_predicand_1Context.class,0);
		}
		public Overlaps_predicate_part_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlaps_predicate_part_1; }
	}

	public final Overlaps_predicate_part_1Context overlaps_predicate_part_1() throws RecognitionException {
		Overlaps_predicate_part_1Context _localctx = new Overlaps_predicate_part_1Context(_ctx, getState());
		enterRule(_localctx, 1008, RULE_overlaps_predicate_part_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4485);
			row_value_predicand_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlaps_predicate_part_2Context extends ParserRuleContext {
		public Row_value_predicand_2Context row_value_predicand_2() {
			return getRuleContext(Row_value_predicand_2Context.class,0);
		}
		public Overlaps_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlaps_predicate_part_2; }
	}

	public final Overlaps_predicate_part_2Context overlaps_predicate_part_2() throws RecognitionException {
		Overlaps_predicate_part_2Context _localctx = new Overlaps_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1010, RULE_overlaps_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			match(T__232);
			setState(4488);
			row_value_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_1Context extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_1; }
	}

	public final Row_value_predicand_1Context row_value_predicand_1() throws RecognitionException {
		Row_value_predicand_1Context _localctx = new Row_value_predicand_1Context(_ctx, getState());
		enterRule(_localctx, 1012, RULE_row_value_predicand_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4490);
			row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_2Context extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_2; }
	}

	public final Row_value_predicand_2Context row_value_predicand_2() throws RecognitionException {
		Row_value_predicand_2Context _localctx = new Row_value_predicand_2Context(_ctx, getState());
		enterRule(_localctx, 1014, RULE_row_value_predicand_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distinct_predicateContext extends ParserRuleContext {
		public Row_value_predicand_3Context row_value_predicand_3() {
			return getRuleContext(Row_value_predicand_3Context.class,0);
		}
		public Distinct_predicate_part_2Context distinct_predicate_part_2() {
			return getRuleContext(Distinct_predicate_part_2Context.class,0);
		}
		public Distinct_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_predicate; }
	}

	public final Distinct_predicateContext distinct_predicate() throws RecognitionException {
		Distinct_predicateContext _localctx = new Distinct_predicateContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_distinct_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4494);
			row_value_predicand_3();
			setState(4495);
			distinct_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distinct_predicate_part_2Context extends ParserRuleContext {
		public Row_value_predicand_4Context row_value_predicand_4() {
			return getRuleContext(Row_value_predicand_4Context.class,0);
		}
		public Distinct_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_predicate_part_2; }
	}

	public final Distinct_predicate_part_2Context distinct_predicate_part_2() throws RecognitionException {
		Distinct_predicate_part_2Context _localctx = new Distinct_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1018, RULE_distinct_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4497);
			match(T__156);
			setState(4499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4498);
				match(T__155);
				}
			}

			setState(4501);
			match(T__162);
			setState(4502);
			match(T__73);
			setState(4503);
			row_value_predicand_4();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_3Context extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_3; }
	}

	public final Row_value_predicand_3Context row_value_predicand_3() throws RecognitionException {
		Row_value_predicand_3Context _localctx = new Row_value_predicand_3Context(_ctx, getState());
		enterRule(_localctx, 1020, RULE_row_value_predicand_3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4505);
			row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_4Context extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_4; }
	}

	public final Row_value_predicand_4Context row_value_predicand_4() throws RecognitionException {
		Row_value_predicand_4Context _localctx = new Row_value_predicand_4Context(_ctx, getState());
		enterRule(_localctx, 1022, RULE_row_value_predicand_4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Member_predicate_part_2Context member_predicate_part_2() {
			return getRuleContext(Member_predicate_part_2Context.class,0);
		}
		public Member_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_predicate; }
	}

	public final Member_predicateContext member_predicate() throws RecognitionException {
		Member_predicateContext _localctx = new Member_predicateContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_member_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4509);
			row_value_predicand();
			setState(4510);
			member_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_predicate_part_2Context extends ParserRuleContext {
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public Member_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_predicate_part_2; }
	}

	public final Member_predicate_part_2Context member_predicate_part_2() throws RecognitionException {
		Member_predicate_part_2Context _localctx = new Member_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1026, RULE_member_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4512);
				match(T__155);
				}
			}

			setState(4515);
			match(T__233);
			setState(4517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__175) {
				{
				setState(4516);
				match(T__175);
				}
			}

			setState(4519);
			multiset_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Submultiset_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Submultiset_predicate_part_2Context submultiset_predicate_part_2() {
			return getRuleContext(Submultiset_predicate_part_2Context.class,0);
		}
		public Submultiset_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_submultiset_predicate; }
	}

	public final Submultiset_predicateContext submultiset_predicate() throws RecognitionException {
		Submultiset_predicateContext _localctx = new Submultiset_predicateContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_submultiset_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4521);
			row_value_predicand();
			setState(4522);
			submultiset_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Submultiset_predicate_part_2Context extends ParserRuleContext {
		public Multiset_value_expressionContext multiset_value_expression() {
			return getRuleContext(Multiset_value_expressionContext.class,0);
		}
		public Submultiset_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_submultiset_predicate_part_2; }
	}

	public final Submultiset_predicate_part_2Context submultiset_predicate_part_2() throws RecognitionException {
		Submultiset_predicate_part_2Context _localctx = new Submultiset_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1030, RULE_submultiset_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4524);
				match(T__155);
				}
			}

			setState(4527);
			match(T__234);
			setState(4529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__175) {
				{
				setState(4528);
				match(T__175);
				}
			}

			setState(4531);
			multiset_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Set_predicate_part_2Context set_predicate_part_2() {
			return getRuleContext(Set_predicate_part_2Context.class,0);
		}
		public Set_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_predicate; }
	}

	public final Set_predicateContext set_predicate() throws RecognitionException {
		Set_predicateContext _localctx = new Set_predicateContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_set_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4533);
			row_value_predicand();
			setState(4534);
			set_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_predicate_part_2Context extends ParserRuleContext {
		public Set_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_predicate_part_2; }
	}

	public final Set_predicate_part_2Context set_predicate_part_2() throws RecognitionException {
		Set_predicate_part_2Context _localctx = new Set_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1034, RULE_set_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4536);
			match(T__156);
			setState(4538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4537);
				match(T__155);
				}
			}

			setState(4540);
			match(T__235);
			setState(4541);
			match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Type_predicate_part_2Context type_predicate_part_2() {
			return getRuleContext(Type_predicate_part_2Context.class,0);
		}
		public Type_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_predicate; }
	}

	public final Type_predicateContext type_predicate() throws RecognitionException {
		Type_predicateContext _localctx = new Type_predicateContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_type_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4543);
			row_value_predicand();
			setState(4544);
			type_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_predicate_part_2Context extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Type_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_predicate_part_2; }
	}

	public final Type_predicate_part_2Context type_predicate_part_2() throws RecognitionException {
		Type_predicate_part_2Context _localctx = new Type_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1038, RULE_type_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			match(T__156);
			setState(4548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4547);
				match(T__155);
				}
			}

			setState(4550);
			match(T__175);
			setState(4551);
			match(LEFT_PAREN);
			setState(4552);
			type_list();
			setState(4553);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public List<User_defined_type_specificationContext> user_defined_type_specification() {
			return getRuleContexts(User_defined_type_specificationContext.class);
		}
		public User_defined_type_specificationContext user_defined_type_specification(int i) {
			return getRuleContext(User_defined_type_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			user_defined_type_specification();
			setState(4560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4556);
				match(COMMA);
				setState(4557);
				user_defined_type_specification();
				}
				}
				setState(4562);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_defined_type_specificationContext extends ParserRuleContext {
		public Inclusive_user_defined_type_specificationContext inclusive_user_defined_type_specification() {
			return getRuleContext(Inclusive_user_defined_type_specificationContext.class,0);
		}
		public Exclusive_user_defined_type_specificationContext exclusive_user_defined_type_specification() {
			return getRuleContext(Exclusive_user_defined_type_specificationContext.class,0);
		}
		public User_defined_type_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_defined_type_specification; }
	}

	public final User_defined_type_specificationContext user_defined_type_specification() throws RecognitionException {
		User_defined_type_specificationContext _localctx = new User_defined_type_specificationContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_user_defined_type_specification);
		try {
			setState(4565);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4563);
				inclusive_user_defined_type_specification();
				}
				break;
			case T__180:
				enterOuterAlt(_localctx, 2);
				{
				setState(4564);
				exclusive_user_defined_type_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inclusive_user_defined_type_specificationContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Inclusive_user_defined_type_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inclusive_user_defined_type_specification; }
	}

	public final Inclusive_user_defined_type_specificationContext inclusive_user_defined_type_specification() throws RecognitionException {
		Inclusive_user_defined_type_specificationContext _localctx = new Inclusive_user_defined_type_specificationContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_inclusive_user_defined_type_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4567);
			path_resolved_user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exclusive_user_defined_type_specificationContext extends ParserRuleContext {
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Exclusive_user_defined_type_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusive_user_defined_type_specification; }
	}

	public final Exclusive_user_defined_type_specificationContext exclusive_user_defined_type_specification() throws RecognitionException {
		Exclusive_user_defined_type_specificationContext _localctx = new Exclusive_user_defined_type_specificationContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_exclusive_user_defined_type_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4569);
			match(T__180);
			setState(4570);
			path_resolved_user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_predicateContext extends ParserRuleContext {
		public Period_overlaps_predicateContext period_overlaps_predicate() {
			return getRuleContext(Period_overlaps_predicateContext.class,0);
		}
		public Period_equals_predicateContext period_equals_predicate() {
			return getRuleContext(Period_equals_predicateContext.class,0);
		}
		public Period_contains_predicateContext period_contains_predicate() {
			return getRuleContext(Period_contains_predicateContext.class,0);
		}
		public Period_precedes_predicateContext period_precedes_predicate() {
			return getRuleContext(Period_precedes_predicateContext.class,0);
		}
		public Period_succeeds_predicateContext period_succeeds_predicate() {
			return getRuleContext(Period_succeeds_predicateContext.class,0);
		}
		public Period_immediately_precedes_predicateContext period_immediately_precedes_predicate() {
			return getRuleContext(Period_immediately_precedes_predicateContext.class,0);
		}
		public Period_immediately_succeeds_predicateContext period_immediately_succeeds_predicate() {
			return getRuleContext(Period_immediately_succeeds_predicateContext.class,0);
		}
		public Period_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_predicate; }
	}

	public final Period_predicateContext period_predicate() throws RecognitionException {
		Period_predicateContext _localctx = new Period_predicateContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_period_predicate);
		try {
			setState(4579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4572);
				period_overlaps_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4573);
				period_equals_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4574);
				period_contains_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4575);
				period_precedes_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4576);
				period_succeeds_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4577);
				period_immediately_precedes_predicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4578);
				period_immediately_succeeds_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_overlaps_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_overlaps_predicate_part_2Context period_overlaps_predicate_part_2() {
			return getRuleContext(Period_overlaps_predicate_part_2Context.class,0);
		}
		public Period_overlaps_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_overlaps_predicate; }
	}

	public final Period_overlaps_predicateContext period_overlaps_predicate() throws RecognitionException {
		Period_overlaps_predicateContext _localctx = new Period_overlaps_predicateContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_period_overlaps_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4581);
			period_predicand_1();
			setState(4582);
			period_overlaps_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_overlaps_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_overlaps_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_overlaps_predicate_part_2; }
	}

	public final Period_overlaps_predicate_part_2Context period_overlaps_predicate_part_2() throws RecognitionException {
		Period_overlaps_predicate_part_2Context _localctx = new Period_overlaps_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1052, RULE_period_overlaps_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4584);
			match(T__232);
			setState(4585);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_predicand_1Context extends ParserRuleContext {
		public Period_predicandContext period_predicand() {
			return getRuleContext(Period_predicandContext.class,0);
		}
		public Period_predicand_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_predicand_1; }
	}

	public final Period_predicand_1Context period_predicand_1() throws RecognitionException {
		Period_predicand_1Context _localctx = new Period_predicand_1Context(_ctx, getState());
		enterRule(_localctx, 1054, RULE_period_predicand_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4587);
			period_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_predicand_2Context extends ParserRuleContext {
		public Period_predicandContext period_predicand() {
			return getRuleContext(Period_predicandContext.class,0);
		}
		public Period_predicand_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_predicand_2; }
	}

	public final Period_predicand_2Context period_predicand_2() throws RecognitionException {
		Period_predicand_2Context _localctx = new Period_predicand_2Context(_ctx, getState());
		enterRule(_localctx, 1056, RULE_period_predicand_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			period_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_predicandContext extends ParserRuleContext {
		public Period_referenceContext period_reference() {
			return getRuleContext(Period_referenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Period_start_valueContext period_start_value() {
			return getRuleContext(Period_start_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Period_end_valueContext period_end_value() {
			return getRuleContext(Period_end_valueContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Period_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_predicand; }
	}

	public final Period_predicandContext period_predicand() throws RecognitionException {
		Period_predicandContext _localctx = new Period_predicandContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_period_predicand);
		try {
			setState(4599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4591);
				period_reference();
				}
				break;
			case T__236:
				enterOuterAlt(_localctx, 2);
				{
				setState(4592);
				match(T__236);
				setState(4593);
				match(LEFT_PAREN);
				setState(4594);
				period_start_value();
				setState(4595);
				match(COMMA);
				setState(4596);
				period_end_value();
				setState(4597);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_referenceContext extends ParserRuleContext {
		public Basic_identifier_chainContext basic_identifier_chain() {
			return getRuleContext(Basic_identifier_chainContext.class,0);
		}
		public Period_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_reference; }
	}

	public final Period_referenceContext period_reference() throws RecognitionException {
		Period_referenceContext _localctx = new Period_referenceContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_period_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			basic_identifier_chain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_start_valueContext extends ParserRuleContext {
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Period_start_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_start_value; }
	}

	public final Period_start_valueContext period_start_value() throws RecognitionException {
		Period_start_valueContext _localctx = new Period_start_valueContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_period_start_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4603);
			datetime_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_end_valueContext extends ParserRuleContext {
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Period_end_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_end_value; }
	}

	public final Period_end_valueContext period_end_value() throws RecognitionException {
		Period_end_valueContext _localctx = new Period_end_valueContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_period_end_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4605);
			datetime_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_equals_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_equals_predicate_part_2Context period_equals_predicate_part_2() {
			return getRuleContext(Period_equals_predicate_part_2Context.class,0);
		}
		public Period_equals_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_equals_predicate; }
	}

	public final Period_equals_predicateContext period_equals_predicate() throws RecognitionException {
		Period_equals_predicateContext _localctx = new Period_equals_predicateContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_period_equals_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4607);
			period_predicand_1();
			setState(4608);
			period_equals_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_equals_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_equals_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_equals_predicate_part_2; }
	}

	public final Period_equals_predicate_part_2Context period_equals_predicate_part_2() throws RecognitionException {
		Period_equals_predicate_part_2Context _localctx = new Period_equals_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1068, RULE_period_equals_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4610);
			match(T__237);
			setState(4611);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_contains_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_contains_predicate_part_2Context period_contains_predicate_part_2() {
			return getRuleContext(Period_contains_predicate_part_2Context.class,0);
		}
		public Period_contains_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_contains_predicate; }
	}

	public final Period_contains_predicateContext period_contains_predicate() throws RecognitionException {
		Period_contains_predicateContext _localctx = new Period_contains_predicateContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_period_contains_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4613);
			period_predicand_1();
			setState(4614);
			period_contains_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_contains_predicate_part_2Context extends ParserRuleContext {
		public Period_or_point_in_time_predicandContext period_or_point_in_time_predicand() {
			return getRuleContext(Period_or_point_in_time_predicandContext.class,0);
		}
		public Period_contains_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_contains_predicate_part_2; }
	}

	public final Period_contains_predicate_part_2Context period_contains_predicate_part_2() throws RecognitionException {
		Period_contains_predicate_part_2Context _localctx = new Period_contains_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1072, RULE_period_contains_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4616);
			match(T__238);
			setState(4617);
			period_or_point_in_time_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_or_point_in_time_predicandContext extends ParserRuleContext {
		public Period_predicandContext period_predicand() {
			return getRuleContext(Period_predicandContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Period_or_point_in_time_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_or_point_in_time_predicand; }
	}

	public final Period_or_point_in_time_predicandContext period_or_point_in_time_predicand() throws RecognitionException {
		Period_or_point_in_time_predicandContext _localctx = new Period_or_point_in_time_predicandContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_period_or_point_in_time_predicand);
		try {
			setState(4621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4619);
				period_predicand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4620);
				datetime_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_precedes_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_precedes_predicate_part_2Context period_precedes_predicate_part_2() {
			return getRuleContext(Period_precedes_predicate_part_2Context.class,0);
		}
		public Period_precedes_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_precedes_predicate; }
	}

	public final Period_precedes_predicateContext period_precedes_predicate() throws RecognitionException {
		Period_precedes_predicateContext _localctx = new Period_precedes_predicateContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_period_precedes_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4623);
			period_predicand_1();
			setState(4624);
			period_precedes_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_precedes_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_precedes_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_precedes_predicate_part_2; }
	}

	public final Period_precedes_predicate_part_2Context period_precedes_predicate_part_2() throws RecognitionException {
		Period_precedes_predicate_part_2Context _localctx = new Period_precedes_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1078, RULE_period_precedes_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			match(T__239);
			setState(4627);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_succeeds_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_succeeds_predicate_part_2Context period_succeeds_predicate_part_2() {
			return getRuleContext(Period_succeeds_predicate_part_2Context.class,0);
		}
		public Period_succeeds_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_succeeds_predicate; }
	}

	public final Period_succeeds_predicateContext period_succeeds_predicate() throws RecognitionException {
		Period_succeeds_predicateContext _localctx = new Period_succeeds_predicateContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_period_succeeds_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4629);
			period_predicand_1();
			setState(4630);
			period_succeeds_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_succeeds_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_succeeds_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_succeeds_predicate_part_2; }
	}

	public final Period_succeeds_predicate_part_2Context period_succeeds_predicate_part_2() throws RecognitionException {
		Period_succeeds_predicate_part_2Context _localctx = new Period_succeeds_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1082, RULE_period_succeeds_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4632);
			match(T__240);
			setState(4633);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_immediately_precedes_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_immediately_precedes_predicate_part_2Context period_immediately_precedes_predicate_part_2() {
			return getRuleContext(Period_immediately_precedes_predicate_part_2Context.class,0);
		}
		public Period_immediately_precedes_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_immediately_precedes_predicate; }
	}

	public final Period_immediately_precedes_predicateContext period_immediately_precedes_predicate() throws RecognitionException {
		Period_immediately_precedes_predicateContext _localctx = new Period_immediately_precedes_predicateContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_period_immediately_precedes_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			period_predicand_1();
			setState(4636);
			period_immediately_precedes_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_immediately_precedes_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_immediately_precedes_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_immediately_precedes_predicate_part_2; }
	}

	public final Period_immediately_precedes_predicate_part_2Context period_immediately_precedes_predicate_part_2() throws RecognitionException {
		Period_immediately_precedes_predicate_part_2Context _localctx = new Period_immediately_precedes_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1086, RULE_period_immediately_precedes_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4638);
			match(T__241);
			setState(4639);
			match(T__239);
			setState(4640);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_immediately_succeeds_predicateContext extends ParserRuleContext {
		public Period_predicand_1Context period_predicand_1() {
			return getRuleContext(Period_predicand_1Context.class,0);
		}
		public Period_immediately_succeeds_predicate_part_2Context period_immediately_succeeds_predicate_part_2() {
			return getRuleContext(Period_immediately_succeeds_predicate_part_2Context.class,0);
		}
		public Period_immediately_succeeds_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_immediately_succeeds_predicate; }
	}

	public final Period_immediately_succeeds_predicateContext period_immediately_succeeds_predicate() throws RecognitionException {
		Period_immediately_succeeds_predicateContext _localctx = new Period_immediately_succeeds_predicateContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_period_immediately_succeeds_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4642);
			period_predicand_1();
			setState(4643);
			period_immediately_succeeds_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_immediately_succeeds_predicate_part_2Context extends ParserRuleContext {
		public Period_predicand_2Context period_predicand_2() {
			return getRuleContext(Period_predicand_2Context.class,0);
		}
		public Period_immediately_succeeds_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_immediately_succeeds_predicate_part_2; }
	}

	public final Period_immediately_succeeds_predicate_part_2Context period_immediately_succeeds_predicate_part_2() throws RecognitionException {
		Period_immediately_succeeds_predicate_part_2Context _localctx = new Period_immediately_succeeds_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 1090, RULE_period_immediately_succeeds_predicate_part_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4645);
			match(T__241);
			setState(4646);
			match(T__240);
			setState(4647);
			period_predicand_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_search_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4649);
			boolean_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Language_clauseContext extends ParserRuleContext {
		public Language_nameContext language_name() {
			return getRuleContext(Language_nameContext.class,0);
		}
		public Language_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_language_clause; }
	}

	public final Language_clauseContext language_clause() throws RecognitionException {
		Language_clauseContext _localctx = new Language_clauseContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_language_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4651);
			match(T__242);
			setState(4652);
			language_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Language_nameContext extends ParserRuleContext {
		public Language_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_language_name; }
	}

	public final Language_nameContext language_name() throws RecognitionException {
		Language_nameContext _localctx = new Language_nameContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_language_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4654);
			_la = _input.LA(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (T__243 - 244)) | (1L << (T__244 - 244)) | (1L << (T__245 - 244)) | (1L << (T__246 - 244)) | (1L << (T__247 - 244)) | (1L << (T__248 - 244)) | (1L << (T__249 - 244)) | (1L << (T__250 - 244)) | (1L << (T__251 - 244)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_specificationContext extends ParserRuleContext {
		public Schema_name_listContext schema_name_list() {
			return getRuleContext(Schema_name_listContext.class,0);
		}
		public Path_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_specification; }
	}

	public final Path_specificationContext path_specification() throws RecognitionException {
		Path_specificationContext _localctx = new Path_specificationContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_path_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4656);
			match(T__252);
			setState(4657);
			schema_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_name_listContext extends ParserRuleContext {
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Schema_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name_list; }
	}

	public final Schema_name_listContext schema_name_list() throws RecognitionException {
		Schema_name_listContext _localctx = new Schema_name_listContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_schema_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4659);
			schema_name();
			setState(4664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4660);
				match(COMMA);
				setState(4661);
				schema_name();
				}
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_invocationContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public Routine_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_invocation; }
	}

	public final Routine_invocationContext routine_invocation() throws RecognitionException {
		Routine_invocationContext _localctx = new Routine_invocationContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_routine_invocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4667);
			routine_name();
			setState(4668);
			sql_argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_routine_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(4670);
				schema_name();
				setState(4671);
				match(PERIOD);
				}
				break;
			}
			setState(4675);
			qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_argument_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<Sql_argumentContext> sql_argument() {
			return getRuleContexts(Sql_argumentContext.class);
		}
		public Sql_argumentContext sql_argument(int i) {
			return getRuleContext(Sql_argumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Sql_argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_argument_list; }
	}

	public final Sql_argument_listContext sql_argument_list() throws RecognitionException {
		Sql_argument_listContext _localctx = new Sql_argument_listContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_sql_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4677);
			match(LEFT_PAREN);
			setState(4686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__38) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__53) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__76 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__91 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__102 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (T__129 - 130)) | (1L << (T__130 - 130)) | (1L << (T__131 - 130)) | (1L << (T__132 - 130)) | (1L << (T__133 - 130)) | (1L << (T__134 - 130)) | (1L << (T__136 - 130)) | (1L << (T__140 - 130)) | (1L << (T__142 - 130)) | (1L << (T__148 - 130)) | (1L << (T__149 - 130)) | (1L << (T__150 - 130)) | (1L << (T__151 - 130)) | (1L << (T__152 - 130)) | (1L << (T__155 - 130)) | (1L << (T__160 - 130)) | (1L << (T__162 - 130)) | (1L << (T__165 - 130)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (T__224 - 225)) | (1L << (T__225 - 225)) | (1L << (T__226 - 225)) | (1L << (T__227 - 225)) | (1L << (T__236 - 225)) | (1L << (T__268 - 225)) | (1L << (T__269 - 225)) | (1L << (T__270 - 225)) | (1L << (T__271 - 225)) | (1L << (T__272 - 225)) | (1L << (T__273 - 225)) | (1L << (T__274 - 225)) | (1L << (T__275 - 225)) | (1L << (T__276 - 225)) | (1L << (T__277 - 225)) | (1L << (T__278 - 225)) | (1L << (T__279 - 225)) | (1L << (T__280 - 225)) | (1L << (T__282 - 225)) | (1L << (T__283 - 225)) | (1L << (T__284 - 225)) | (1L << (T__285 - 225)) | (1L << (T__286 - 225)) | (1L << (T__287 - 225)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (T__288 - 289)) | (1L << (T__289 - 289)) | (1L << (T__290 - 289)) | (1L << (T__291 - 289)) | (1L << (T__292 - 289)) | (1L << (T__293 - 289)) | (1L << (T__295 - 289)) | (1L << (T__296 - 289)) | (1L << (T__297 - 289)) | (1L << (T__343 - 289)) | (1L << (T__344 - 289)) | (1L << (T__345 - 289)) | (1L << (T__346 - 289)) | (1L << (T__347 - 289)) | (1L << (T__348 - 289)) | (1L << (T__349 - 289)) | (1L << (T__350 - 289)) | (1L << (T__351 - 289)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (T__352 - 353)) | (1L << (T__353 - 353)) | (1L << (LEFT_PAREN - 353)) | (1L << (PLUS_SIGN - 353)) | (1L << (MINUS_SIGN - 353)) | (1L << (PERIOD - 353)) | (1L << (COLON - 353)) | (1L << (QUESTION_MARK - 353)) | (1L << (IDENTIFIER_BODY - 353)) | (1L << (DELIMITED_IDENTIFIER - 353)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 353)) | (1L << (CHARACTER_STRING_LITERAL - 353)) | (1L << (UNICODE_CHARACTER_STRING_LITERAL - 353)) | (1L << (BINARY_STRING_LITERAL - 353)) | (1L << (UNSIGNED_INTEGER - 353)) | (1L << (DATE_LITERAL - 353)) | (1L << (TIME_LITERAL - 353)) | (1L << (TIMESTAMP_LITERAL - 353)) | (1L << (INTERVAL_LITERAL - 353)) | (1L << (BOOLEAN_LITERAL - 353)))) != 0)) {
				{
				setState(4678);
				sql_argument();
				setState(4683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4679);
					match(COMMA);
					setState(4680);
					sql_argument();
					}
					}
					setState(4685);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4688);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_argumentContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Generalized_expressionContext generalized_expression() {
			return getRuleContext(Generalized_expressionContext.class,0);
		}
		public Target_specificationContext target_specification() {
			return getRuleContext(Target_specificationContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public Named_argument_specificationContext named_argument_specification() {
			return getRuleContext(Named_argument_specificationContext.class,0);
		}
		public Sql_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_argument; }
	}

	public final Sql_argumentContext sql_argument() throws RecognitionException {
		Sql_argumentContext _localctx = new Sql_argumentContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_sql_argument);
		try {
			setState(4695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4690);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4691);
				generalized_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4692);
				target_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4693);
				contextually_typed_value_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4694);
				named_argument_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generalized_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Path_resolved_user_defined_type_nameContext path_resolved_user_defined_type_name() {
			return getRuleContext(Path_resolved_user_defined_type_nameContext.class,0);
		}
		public Generalized_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalized_expression; }
	}

	public final Generalized_expressionContext generalized_expression() throws RecognitionException {
		Generalized_expressionContext _localctx = new Generalized_expressionContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_generalized_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4697);
			value_expression();
			setState(4698);
			match(T__92);
			setState(4699);
			path_resolved_user_defined_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_argument_specificationContext extends ParserRuleContext {
		public Sql_parameter_nameContext sql_parameter_name() {
			return getRuleContext(Sql_parameter_nameContext.class,0);
		}
		public TerminalNode NAMED_ARGUMENT_ASSIGNMENT_TOKEN() { return getToken(SQL2011Parser.NAMED_ARGUMENT_ASSIGNMENT_TOKEN, 0); }
		public Named_argument_sql_argumentContext named_argument_sql_argument() {
			return getRuleContext(Named_argument_sql_argumentContext.class,0);
		}
		public Named_argument_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_argument_specification; }
	}

	public final Named_argument_specificationContext named_argument_specification() throws RecognitionException {
		Named_argument_specificationContext _localctx = new Named_argument_specificationContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_named_argument_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4701);
			sql_parameter_name();
			setState(4702);
			match(NAMED_ARGUMENT_ASSIGNMENT_TOKEN);
			setState(4703);
			named_argument_sql_argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_argument_sql_argumentContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Target_specificationContext target_specification() {
			return getRuleContext(Target_specificationContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public Named_argument_sql_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_argument_sql_argument; }
	}

	public final Named_argument_sql_argumentContext named_argument_sql_argument() throws RecognitionException {
		Named_argument_sql_argumentContext _localctx = new Named_argument_sql_argumentContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_named_argument_sql_argument);
		try {
			setState(4708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4705);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4706);
				target_specification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4707);
				contextually_typed_value_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_specificationContext extends ParserRuleContext {
		public Standard_character_set_nameContext standard_character_set_name() {
			return getRuleContext(Standard_character_set_nameContext.class,0);
		}
		public Implementation_defined_character_set_nameContext implementation_defined_character_set_name() {
			return getRuleContext(Implementation_defined_character_set_nameContext.class,0);
		}
		public User_defined_character_set_nameContext user_defined_character_set_name() {
			return getRuleContext(User_defined_character_set_nameContext.class,0);
		}
		public Character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_specification; }
	}

	public final Character_set_specificationContext character_set_specification() throws RecognitionException {
		Character_set_specificationContext _localctx = new Character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_character_set_specification);
		try {
			setState(4713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4710);
				standard_character_set_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4711);
				implementation_defined_character_set_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4712);
				user_defined_character_set_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_character_set_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Standard_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_character_set_name; }
	}

	public final Standard_character_set_nameContext standard_character_set_name() throws RecognitionException {
		Standard_character_set_nameContext _localctx = new Standard_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_standard_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4715);
			character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_character_set_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Implementation_defined_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_character_set_name; }
	}

	public final Implementation_defined_character_set_nameContext implementation_defined_character_set_name() throws RecognitionException {
		Implementation_defined_character_set_nameContext _localctx = new Implementation_defined_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_implementation_defined_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4717);
			character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_defined_character_set_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public User_defined_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_defined_character_set_name; }
	}

	public final User_defined_character_set_nameContext user_defined_character_set_name() throws RecognitionException {
		User_defined_character_set_nameContext _localctx = new User_defined_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_user_defined_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4719);
			character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_routine_designatorContext extends ParserRuleContext {
		public Routine_typeContext routine_type() {
			return getRuleContext(Routine_typeContext.class,0);
		}
		public Specific_nameContext specific_name() {
			return getRuleContext(Specific_nameContext.class,0);
		}
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public Schema_resolved_user_defined_type_nameContext schema_resolved_user_defined_type_name() {
			return getRuleContext(Schema_resolved_user_defined_type_nameContext.class,0);
		}
		public Specific_routine_designatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_routine_designator; }
	}

	public final Specific_routine_designatorContext specific_routine_designator() throws RecognitionException {
		Specific_routine_designatorContext _localctx = new Specific_routine_designatorContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_specific_routine_designator);
		int _la;
		try {
			setState(4731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__253:
				enterOuterAlt(_localctx, 1);
				{
				setState(4721);
				match(T__253);
				setState(4722);
				routine_type();
				setState(4723);
				specific_name();
				}
				break;
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
				enterOuterAlt(_localctx, 2);
				{
				setState(4725);
				routine_type();
				setState(4726);
				member_name();
				setState(4729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__54) {
					{
					setState(4727);
					match(T__54);
					setState(4728);
					schema_resolved_user_defined_type_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_typeContext extends ParserRuleContext {
		public Routine_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_type; }
	}

	public final Routine_typeContext routine_type() throws RecognitionException {
		Routine_typeContext _localctx = new Routine_typeContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_routine_type);
		int _la;
		try {
			setState(4742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__254:
				enterOuterAlt(_localctx, 1);
				{
				setState(4733);
				match(T__254);
				}
				break;
			case T__255:
				enterOuterAlt(_localctx, 2);
				{
				setState(4734);
				match(T__255);
				}
				break;
			case T__256:
				enterOuterAlt(_localctx, 3);
				{
				setState(4735);
				match(T__256);
				}
				break;
			case T__257:
				enterOuterAlt(_localctx, 4);
				{
				setState(4736);
				match(T__257);
				}
				break;
			case T__258:
				enterOuterAlt(_localctx, 5);
				{
				setState(4737);
				match(T__258);
				}
				break;
			case T__259:
			case T__260:
				enterOuterAlt(_localctx, 6);
				{
				setState(4739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__259) {
					{
					setState(4738);
					match(T__259);
					}
				}

				setState(4741);
				match(T__260);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_nameContext extends ParserRuleContext {
		public Member_name_alternativesContext member_name_alternatives() {
			return getRuleContext(Member_name_alternativesContext.class,0);
		}
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_name; }
	}

	public final Member_nameContext member_name() throws RecognitionException {
		Member_nameContext _localctx = new Member_nameContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_member_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4744);
			member_name_alternatives();
			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4745);
				data_type_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_name_alternativesContext extends ParserRuleContext {
		public Schema_qualified_routine_nameContext schema_qualified_routine_name() {
			return getRuleContext(Schema_qualified_routine_nameContext.class,0);
		}
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Member_name_alternativesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_name_alternatives; }
	}

	public final Member_name_alternativesContext member_name_alternatives() throws RecognitionException {
		Member_name_alternativesContext _localctx = new Member_name_alternativesContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_member_name_alternatives);
		try {
			setState(4750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4748);
				schema_qualified_routine_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4749);
				method_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Data_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_list; }
	}

	public final Data_type_listContext data_type_list() throws RecognitionException {
		Data_type_listContext _localctx = new Data_type_listContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_data_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4752);
			match(LEFT_PAREN);
			setState(4761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__10) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(4753);
				data_type(0);
				setState(4758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4754);
					match(COMMA);
					setState(4755);
					data_type(0);
					}
					}
					setState(4760);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4763);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collate_clauseContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_clause; }
	}

	public final Collate_clauseContext collate_clause() throws RecognitionException {
		Collate_clauseContext _localctx = new Collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_collate_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(T__261);
			setState(4766);
			collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_definitionContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_name_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_definition; }
	}

	public final Constraint_name_definitionContext constraint_name_definition() throws RecognitionException {
		Constraint_name_definitionContext _localctx = new Constraint_name_definitionContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_constraint_name_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4768);
			match(T__262);
			setState(4769);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_characteristicsContext extends ParserRuleContext {
		public Constraint_check_timeContext constraint_check_time() {
			return getRuleContext(Constraint_check_timeContext.class,0);
		}
		public Constraint_enforcementContext constraint_enforcement() {
			return getRuleContext(Constraint_enforcementContext.class,0);
		}
		public Constraint_characteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_characteristics; }
	}

	public final Constraint_characteristicsContext constraint_characteristics() throws RecognitionException {
		Constraint_characteristicsContext _localctx = new Constraint_characteristicsContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_constraint_characteristics);
		int _la;
		try {
			setState(4792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4771);
				constraint_check_time();
				setState(4776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(4773);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__155) {
						{
						setState(4772);
						match(T__155);
						}
					}

					setState(4775);
					match(T__263);
					}
					break;
				}
				setState(4779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__155 || _la==T__267) {
					{
					setState(4778);
					constraint_enforcement();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__155) {
					{
					setState(4781);
					match(T__155);
					}
				}

				setState(4784);
				match(T__263);
				setState(4786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__264) {
					{
					setState(4785);
					constraint_check_time();
					}
				}

				setState(4789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__155 || _la==T__267) {
					{
					setState(4788);
					constraint_enforcement();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4791);
				constraint_enforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_check_timeContext extends ParserRuleContext {
		public Constraint_check_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_check_time; }
	}

	public final Constraint_check_timeContext constraint_check_time() throws RecognitionException {
		Constraint_check_timeContext _localctx = new Constraint_check_timeContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_constraint_check_time);
		try {
			setState(4798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4794);
				match(T__264);
				setState(4795);
				match(T__265);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4796);
				match(T__264);
				setState(4797);
				match(T__266);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_enforcementContext extends ParserRuleContext {
		public Constraint_enforcementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_enforcement; }
	}

	public final Constraint_enforcementContext constraint_enforcement() throws RecognitionException {
		Constraint_enforcementContext _localctx = new Constraint_enforcementContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_constraint_enforcement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__155) {
				{
				setState(4800);
				match(T__155);
				}
			}

			setState(4803);
			match(T__267);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(SQL2011Parser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public General_set_functionContext general_set_function() {
			return getRuleContext(General_set_functionContext.class,0);
		}
		public Binary_set_functionContext binary_set_function() {
			return getRuleContext(Binary_set_functionContext.class,0);
		}
		public Ordered_set_functionContext ordered_set_function() {
			return getRuleContext(Ordered_set_functionContext.class,0);
		}
		public Array_aggregate_functionContext array_aggregate_function() {
			return getRuleContext(Array_aggregate_functionContext.class,0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function; }
	}

	public final Aggregate_functionContext aggregate_function() throws RecognitionException {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_aggregate_function);
		try {
			setState(4828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4805);
				match(T__268);
				setState(4806);
				match(LEFT_PAREN);
				setState(4807);
				match(ASTERISK);
				setState(4808);
				match(RIGHT_PAREN);
				setState(4810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(4809);
					filter_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4812);
				general_set_function();
				setState(4814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(4813);
					filter_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4816);
				binary_set_function();
				setState(4818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(4817);
					filter_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4820);
				ordered_set_function();
				setState(4822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(4821);
					filter_clause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4824);
				array_aggregate_function();
				setState(4826);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(4825);
					filter_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_set_functionContext extends ParserRuleContext {
		public Set_function_typeContext set_function_type() {
			return getRuleContext(Set_function_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Set_quantifierContext set_quantifier() {
			return getRuleContext(Set_quantifierContext.class,0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_set_function; }
	}

	public final General_set_functionContext general_set_function() throws RecognitionException {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_general_set_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830);
			set_function_type();
			setState(4831);
			match(LEFT_PAREN);
			setState(4833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(4832);
				set_quantifier();
				}
				break;
			}
			setState(4835);
			value_expression();
			setState(4836);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_typeContext extends ParserRuleContext {
		public Computational_operationContext computational_operation() {
			return getRuleContext(Computational_operationContext.class,0);
		}
		public Set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_type; }
	}

	public final Set_function_typeContext set_function_type() throws RecognitionException {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_set_function_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4838);
			computational_operation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Computational_operationContext extends ParserRuleContext {
		public Computational_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computational_operation; }
	}

	public final Computational_operationContext computational_operation() throws RecognitionException {
		Computational_operationContext _localctx = new Computational_operationContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_computational_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4840);
			_la = _input.LA(1);
			if ( !(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (T__224 - 225)) | (1L << (T__225 - 225)) | (1L << (T__268 - 225)) | (1L << (T__269 - 225)) | (1L << (T__270 - 225)) | (1L << (T__271 - 225)) | (1L << (T__272 - 225)) | (1L << (T__273 - 225)) | (1L << (T__274 - 225)) | (1L << (T__275 - 225)) | (1L << (T__276 - 225)) | (1L << (T__277 - 225)) | (1L << (T__278 - 225)) | (1L << (T__279 - 225)) | (1L << (T__280 - 225)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_quantifierContext extends ParserRuleContext {
		public Set_quantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_quantifier; }
	}

	public final Set_quantifierContext set_quantifier() throws RecognitionException {
		Set_quantifierContext _localctx = new Set_quantifierContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_set_quantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4842);
			_la = _input.LA(1);
			if ( !(_la==T__135 || _la==T__162) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_filter_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4844);
			match(T__281);
			setState(4845);
			match(LEFT_PAREN);
			setState(4846);
			match(T__194);
			setState(4847);
			search_condition();
			setState(4848);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_set_functionContext extends ParserRuleContext {
		public Binary_set_function_typeContext binary_set_function_type() {
			return getRuleContext(Binary_set_function_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Dependent_variable_expressionContext dependent_variable_expression() {
			return getRuleContext(Dependent_variable_expressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public Independent_variable_expressionContext independent_variable_expression() {
			return getRuleContext(Independent_variable_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Binary_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_set_function; }
	}

	public final Binary_set_functionContext binary_set_function() throws RecognitionException {
		Binary_set_functionContext _localctx = new Binary_set_functionContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_binary_set_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4850);
			binary_set_function_type();
			setState(4851);
			match(LEFT_PAREN);
			setState(4852);
			dependent_variable_expression();
			setState(4853);
			match(COMMA);
			setState(4854);
			independent_variable_expression();
			setState(4855);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_set_function_typeContext extends ParserRuleContext {
		public Binary_set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_set_function_type; }
	}

	public final Binary_set_function_typeContext binary_set_function_type() throws RecognitionException {
		Binary_set_function_typeContext _localctx = new Binary_set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_binary_set_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4857);
			_la = _input.LA(1);
			if ( !(((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & ((1L << (T__282 - 283)) | (1L << (T__283 - 283)) | (1L << (T__284 - 283)) | (1L << (T__285 - 283)) | (1L << (T__286 - 283)) | (1L << (T__287 - 283)) | (1L << (T__288 - 283)) | (1L << (T__289 - 283)) | (1L << (T__290 - 283)) | (1L << (T__291 - 283)) | (1L << (T__292 - 283)) | (1L << (T__293 - 283)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_variable_expressionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Dependent_variable_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_variable_expression; }
	}

	public final Dependent_variable_expressionContext dependent_variable_expression() throws RecognitionException {
		Dependent_variable_expressionContext _localctx = new Dependent_variable_expressionContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_dependent_variable_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Independent_variable_expressionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Independent_variable_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_independent_variable_expression; }
	}

	public final Independent_variable_expressionContext independent_variable_expression() throws RecognitionException {
		Independent_variable_expressionContext _localctx = new Independent_variable_expressionContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_independent_variable_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4861);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordered_set_functionContext extends ParserRuleContext {
		public Hypothetical_set_functionContext hypothetical_set_function() {
			return getRuleContext(Hypothetical_set_functionContext.class,0);
		}
		public Inverse_distribution_functionContext inverse_distribution_function() {
			return getRuleContext(Inverse_distribution_functionContext.class,0);
		}
		public Ordered_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordered_set_function; }
	}

	public final Ordered_set_functionContext ordered_set_function() throws RecognitionException {
		Ordered_set_functionContext _localctx = new Ordered_set_functionContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_ordered_set_function);
		try {
			setState(4865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__60:
			case T__61:
			case T__62:
			case T__63:
				enterOuterAlt(_localctx, 1);
				{
				setState(4863);
				hypothetical_set_function();
				}
				break;
			case T__295:
			case T__296:
				enterOuterAlt(_localctx, 2);
				{
				setState(4864);
				inverse_distribution_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hypothetical_set_functionContext extends ParserRuleContext {
		public Rank_function_typeContext rank_function_type() {
			return getRuleContext(Rank_function_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Hypothetical_set_function_value_expression_listContext hypothetical_set_function_value_expression_list() {
			return getRuleContext(Hypothetical_set_function_value_expression_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Within_group_specificationContext within_group_specification() {
			return getRuleContext(Within_group_specificationContext.class,0);
		}
		public Hypothetical_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hypothetical_set_function; }
	}

	public final Hypothetical_set_functionContext hypothetical_set_function() throws RecognitionException {
		Hypothetical_set_functionContext _localctx = new Hypothetical_set_functionContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_hypothetical_set_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			rank_function_type();
			setState(4868);
			match(LEFT_PAREN);
			setState(4869);
			hypothetical_set_function_value_expression_list();
			setState(4870);
			match(RIGHT_PAREN);
			setState(4871);
			within_group_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_group_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Within_group_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_specification; }
	}

	public final Within_group_specificationContext within_group_specification() throws RecognitionException {
		Within_group_specificationContext _localctx = new Within_group_specificationContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_within_group_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4873);
			match(T__294);
			setState(4874);
			match(T__104);
			setState(4875);
			match(LEFT_PAREN);
			setState(4876);
			match(T__200);
			setState(4877);
			match(T__187);
			setState(4878);
			sort_specification_list();
			setState(4879);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hypothetical_set_function_value_expression_listContext extends ParserRuleContext {
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Hypothetical_set_function_value_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hypothetical_set_function_value_expression_list; }
	}

	public final Hypothetical_set_function_value_expression_listContext hypothetical_set_function_value_expression_list() throws RecognitionException {
		Hypothetical_set_function_value_expression_listContext _localctx = new Hypothetical_set_function_value_expression_listContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_hypothetical_set_function_value_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			value_expression();
			setState(4886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4882);
				match(COMMA);
				setState(4883);
				value_expression();
				}
				}
				setState(4888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inverse_distribution_functionContext extends ParserRuleContext {
		public Inverse_distribution_function_typeContext inverse_distribution_function_type() {
			return getRuleContext(Inverse_distribution_function_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Inverse_distribution_function_argumentContext inverse_distribution_function_argument() {
			return getRuleContext(Inverse_distribution_function_argumentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Within_group_specificationContext within_group_specification() {
			return getRuleContext(Within_group_specificationContext.class,0);
		}
		public Inverse_distribution_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inverse_distribution_function; }
	}

	public final Inverse_distribution_functionContext inverse_distribution_function() throws RecognitionException {
		Inverse_distribution_functionContext _localctx = new Inverse_distribution_functionContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_inverse_distribution_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4889);
			inverse_distribution_function_type();
			setState(4890);
			match(LEFT_PAREN);
			setState(4891);
			inverse_distribution_function_argument();
			setState(4892);
			match(RIGHT_PAREN);
			setState(4893);
			within_group_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inverse_distribution_function_argumentContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Inverse_distribution_function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inverse_distribution_function_argument; }
	}

	public final Inverse_distribution_function_argumentContext inverse_distribution_function_argument() throws RecognitionException {
		Inverse_distribution_function_argumentContext _localctx = new Inverse_distribution_function_argumentContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_inverse_distribution_function_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inverse_distribution_function_typeContext extends ParserRuleContext {
		public Inverse_distribution_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inverse_distribution_function_type; }
	}

	public final Inverse_distribution_function_typeContext inverse_distribution_function_type() throws RecognitionException {
		Inverse_distribution_function_typeContext _localctx = new Inverse_distribution_function_typeContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_inverse_distribution_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4897);
			_la = _input.LA(1);
			if ( !(_la==T__295 || _la==T__296) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_aggregate_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public Array_aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_aggregate_function; }
	}

	public final Array_aggregate_functionContext array_aggregate_function() throws RecognitionException {
		Array_aggregate_functionContext _localctx = new Array_aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_array_aggregate_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4899);
			match(T__297);
			setState(4900);
			match(LEFT_PAREN);
			setState(4901);
			value_expression();
			setState(4905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__200) {
				{
				setState(4902);
				match(T__200);
				setState(4903);
				match(T__187);
				setState(4904);
				sort_specification_list();
				}
			}

			setState(4907);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specification_listContext extends ParserRuleContext {
		public List<Sort_specificationContext> sort_specification() {
			return getRuleContexts(Sort_specificationContext.class);
		}
		public Sort_specificationContext sort_specification(int i) {
			return getRuleContext(Sort_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Sort_specification_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification_list; }
	}

	public final Sort_specification_listContext sort_specification_list() throws RecognitionException {
		Sort_specification_listContext _localctx = new Sort_specification_listContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_sort_specification_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4909);
			sort_specification();
			setState(4914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4910);
				match(COMMA);
				setState(4911);
				sort_specification();
				}
				}
				setState(4916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specificationContext extends ParserRuleContext {
		public Sort_keyContext sort_key() {
			return getRuleContext(Sort_keyContext.class,0);
		}
		public Ordering_specificationContext ordering_specification() {
			return getRuleContext(Ordering_specificationContext.class,0);
		}
		public Null_orderingContext null_ordering() {
			return getRuleContext(Null_orderingContext.class,0);
		}
		public Sort_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification; }
	}

	public final Sort_specificationContext sort_specification() throws RecognitionException {
		Sort_specificationContext _localctx = new Sort_specificationContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_sort_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4917);
			sort_key();
			setState(4919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__298 || _la==T__299) {
				{
				setState(4918);
				ordering_specification();
				}
			}

			setState(4922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__68) {
				{
				setState(4921);
				null_ordering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_sort_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4924);
			value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordering_specificationContext extends ParserRuleContext {
		public Ordering_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordering_specification; }
	}

	public final Ordering_specificationContext ordering_specification() throws RecognitionException {
		Ordering_specificationContext _localctx = new Ordering_specificationContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_ordering_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4926);
			_la = _input.LA(1);
			if ( !(_la==T__298 || _la==T__299) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_orderingContext extends ParserRuleContext {
		public Null_orderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ordering; }
	}

	public final Null_orderingContext null_ordering() throws RecognitionException {
		Null_orderingContext _localctx = new Null_orderingContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_null_ordering);
		try {
			setState(4932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4928);
				match(T__68);
				setState(4929);
				match(T__74);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4930);
				match(T__68);
				setState(4931);
				match(T__75);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_propertiesContext cursor_properties() {
			return getRuleContext(Cursor_propertiesContext.class,0);
		}
		public Cursor_specificationContext cursor_specification() {
			return getRuleContext(Cursor_specificationContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_declare_cursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4934);
			match(T__300);
			setState(4935);
			cursor_name();
			setState(4936);
			cursor_properties();
			setState(4937);
			match(T__54);
			setState(4938);
			cursor_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_propertiesContext extends ParserRuleContext {
		public Cursor_sensitivityContext cursor_sensitivity() {
			return getRuleContext(Cursor_sensitivityContext.class,0);
		}
		public Cursor_scrollabilityContext cursor_scrollability() {
			return getRuleContext(Cursor_scrollabilityContext.class,0);
		}
		public Cursor_holdabilityContext cursor_holdability() {
			return getRuleContext(Cursor_holdabilityContext.class,0);
		}
		public Cursor_returnabilityContext cursor_returnability() {
			return getRuleContext(Cursor_returnabilityContext.class,0);
		}
		public Cursor_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_properties; }
	}

	public final Cursor_propertiesContext cursor_properties() throws RecognitionException {
		Cursor_propertiesContext _localctx = new Cursor_propertiesContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_cursor_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (T__302 - 303)) | (1L << (T__303 - 303)) | (1L << (T__304 - 303)))) != 0)) {
				{
				setState(4940);
				cursor_sensitivity();
				}
			}

			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__210 || _la==T__305) {
				{
				setState(4943);
				cursor_scrollability();
				}
			}

			setState(4946);
			match(T__301);
			setState(4948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(4947);
				cursor_holdability();
				}
				break;
			}
			setState(4951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__34 || _la==T__36) {
				{
				setState(4950);
				cursor_returnability();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_sensitivityContext extends ParserRuleContext {
		public Cursor_sensitivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_sensitivity; }
	}

	public final Cursor_sensitivityContext cursor_sensitivity() throws RecognitionException {
		Cursor_sensitivityContext _localctx = new Cursor_sensitivityContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_cursor_sensitivity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4953);
			_la = _input.LA(1);
			if ( !(((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (T__302 - 303)) | (1L << (T__303 - 303)) | (1L << (T__304 - 303)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_scrollabilityContext extends ParserRuleContext {
		public Cursor_scrollabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_scrollability; }
	}

	public final Cursor_scrollabilityContext cursor_scrollability() throws RecognitionException {
		Cursor_scrollabilityContext _localctx = new Cursor_scrollabilityContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_cursor_scrollability);
		try {
			setState(4958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__305:
				enterOuterAlt(_localctx, 1);
				{
				setState(4955);
				match(T__305);
				}
				break;
			case T__210:
				enterOuterAlt(_localctx, 2);
				{
				setState(4956);
				match(T__210);
				setState(4957);
				match(T__305);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_holdabilityContext extends ParserRuleContext {
		public Cursor_holdabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_holdability; }
	}

	public final Cursor_holdabilityContext cursor_holdability() throws RecognitionException {
		Cursor_holdabilityContext _localctx = new Cursor_holdabilityContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_cursor_holdability);
		try {
			setState(4964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__34:
				enterOuterAlt(_localctx, 1);
				{
				setState(4960);
				match(T__34);
				setState(4961);
				match(T__306);
				}
				break;
			case T__36:
				enterOuterAlt(_localctx, 2);
				{
				setState(4962);
				match(T__36);
				setState(4963);
				match(T__306);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_returnabilityContext extends ParserRuleContext {
		public Cursor_returnabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_returnability; }
	}

	public final Cursor_returnabilityContext cursor_returnability() throws RecognitionException {
		Cursor_returnabilityContext _localctx = new Cursor_returnabilityContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_cursor_returnability);
		try {
			setState(4970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__34:
				enterOuterAlt(_localctx, 1);
				{
				setState(4966);
				match(T__34);
				setState(4967);
				match(T__307);
				}
				break;
			case T__36:
				enterOuterAlt(_localctx, 2);
				{
				setState(4968);
				match(T__36);
				setState(4969);
				match(T__307);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_specificationContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Updatability_clauseContext updatability_clause() {
			return getRuleContext(Updatability_clauseContext.class,0);
		}
		public Cursor_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_specification; }
	}

	public final Cursor_specificationContext cursor_specification() throws RecognitionException {
		Cursor_specificationContext _localctx = new Cursor_specificationContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_cursor_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4972);
			query_expression();
			setState(4974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(4973);
				updatability_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Updatability_clauseContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Updatability_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatability_clause; }
	}

	public final Updatability_clauseContext updatability_clause() throws RecognitionException {
		Updatability_clauseContext _localctx = new Updatability_clauseContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_updatability_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4976);
			match(T__54);
			setState(4984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__308:
				{
				setState(4977);
				match(T__308);
				setState(4978);
				match(T__180);
				}
				break;
			case T__309:
				{
				setState(4979);
				match(T__309);
				setState(4982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__175) {
					{
					setState(4980);
					match(T__175);
					setState(4981);
					column_name_list();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_open_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4986);
			match(T__310);
			setState(4987);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Fetch_target_listContext fetch_target_list() {
			return getRuleContext(Fetch_target_listContext.class,0);
		}
		public Fetch_orientationContext fetch_orientation() {
			return getRuleContext(Fetch_orientationContext.class,0);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			match(T__216);
			setState(4994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (T__73 - 74)) | (1L << (T__74 - 74)) | (1L << (T__75 - 74)) | (1L << (T__93 - 74)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (T__312 - 313)) | (1L << (T__313 - 313)) | (1L << (T__314 - 313)))) != 0)) {
				{
				setState(4991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (T__74 - 75)) | (1L << (T__75 - 75)) | (1L << (T__93 - 75)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (T__312 - 313)) | (1L << (T__313 - 313)) | (1L << (T__314 - 313)))) != 0)) {
					{
					setState(4990);
					fetch_orientation();
					}
				}

				setState(4993);
				match(T__73);
				}
			}

			setState(4996);
			cursor_name();
			setState(4997);
			match(T__311);
			setState(4998);
			fetch_target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_orientationContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Fetch_orientationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_orientation; }
	}

	public final Fetch_orientationContext fetch_orientation() throws RecognitionException {
		Fetch_orientationContext _localctx = new Fetch_orientationContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_fetch_orientation);
		int _la;
		try {
			setState(5006);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__93:
				enterOuterAlt(_localctx, 1);
				{
				setState(5000);
				match(T__93);
				}
				break;
			case T__312:
				enterOuterAlt(_localctx, 2);
				{
				setState(5001);
				match(T__312);
				}
				break;
			case T__74:
				enterOuterAlt(_localctx, 3);
				{
				setState(5002);
				match(T__74);
				}
				break;
			case T__75:
				enterOuterAlt(_localctx, 4);
				{
				setState(5003);
				match(T__75);
				}
				break;
			case T__313:
			case T__314:
				enterOuterAlt(_localctx, 5);
				{
				setState(5004);
				_la = _input.LA(1);
				if ( !(_la==T__313 || _la==T__314) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5005);
				simple_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_target_listContext extends ParserRuleContext {
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Fetch_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_target_list; }
	}

	public final Fetch_target_listContext fetch_target_list() throws RecognitionException {
		Fetch_target_listContext _localctx = new Fetch_target_listContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_fetch_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5008);
			target_specification();
			setState(5013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5009);
				match(COMMA);
				setState(5010);
				target_specification();
				}
				}
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			match(T__315);
			setState(5017);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statement__single_rowContext extends ParserRuleContext {
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Select_target_listContext select_target_list() {
			return getRuleContext(Select_target_listContext.class,0);
		}
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_quantifierContext set_quantifier() {
			return getRuleContext(Set_quantifierContext.class,0);
		}
		public Select_statement__single_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement__single_row; }
	}

	public final Select_statement__single_rowContext select_statement__single_row() throws RecognitionException {
		Select_statement__single_rowContext _localctx = new Select_statement__single_rowContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_select_statement__single_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5019);
			match(T__212);
			setState(5021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(5020);
				set_quantifier();
				}
				break;
			}
			setState(5023);
			select_list();
			setState(5024);
			match(T__311);
			setState(5025);
			select_target_list();
			setState(5026);
			table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_target_listContext extends ParserRuleContext {
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Select_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_target_list; }
	}

	public final Select_target_listContext select_target_list() throws RecognitionException {
		Select_target_listContext _localctx = new Select_target_listContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_select_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5028);
			target_specification();
			setState(5033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5029);
				match(COMMA);
				setState(5030);
				target_specification();
				}
				}
				setState(5035);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement__positionedContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Delete_statement__positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement__positioned; }
	}

	public final Delete_statement__positionedContext delete_statement__positioned() throws RecognitionException {
		Delete_statement__positionedContext _localctx = new Delete_statement__positionedContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_delete_statement__positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5036);
			match(T__316);
			setState(5037);
			match(T__73);
			setState(5038);
			target_table();
			setState(5043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(5039);
					match(T__92);
					}
				}

				setState(5042);
				correlation_name();
				}
			}

			setState(5045);
			match(T__194);
			setState(5046);
			match(T__206);
			setState(5047);
			match(T__175);
			setState(5048);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_tableContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Target_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_table; }
	}

	public final Target_tableContext target_table() throws RecognitionException {
		Target_tableContext _localctx = new Target_tableContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_target_table);
		try {
			setState(5056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5050);
				table_name();
				}
				break;
			case T__180:
				enterOuterAlt(_localctx, 2);
				{
				setState(5051);
				match(T__180);
				setState(5052);
				match(LEFT_PAREN);
				setState(5053);
				table_name();
				setState(5054);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement__searchedContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Application_time_period_nameContext application_time_period_name() {
			return getRuleContext(Application_time_period_nameContext.class,0);
		}
		public Point_in_time_1Context point_in_time_1() {
			return getRuleContext(Point_in_time_1Context.class,0);
		}
		public Point_in_time_2Context point_in_time_2() {
			return getRuleContext(Point_in_time_2Context.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Delete_statement__searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement__searched; }
	}

	public final Delete_statement__searchedContext delete_statement__searched() throws RecognitionException {
		Delete_statement__searchedContext _localctx = new Delete_statement__searchedContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_delete_statement__searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			match(T__316);
			setState(5059);
			match(T__73);
			setState(5060);
			target_table();
			setState(5070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(5061);
				match(T__54);
				setState(5062);
				match(T__317);
				setState(5063);
				match(T__175);
				setState(5064);
				application_time_period_name();
				setState(5065);
				match(T__73);
				setState(5066);
				point_in_time_1();
				setState(5067);
				match(T__179);
				setState(5068);
				point_in_time_2();
				}
			}

			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(5073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(5072);
					match(T__92);
					}
				}

				setState(5075);
				correlation_name();
				}
			}

			setState(5080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__194) {
				{
				setState(5078);
				match(T__194);
				setState(5079);
				search_condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_table_statementContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Identity_column_restart_optionContext identity_column_restart_option() {
			return getRuleContext(Identity_column_restart_optionContext.class,0);
		}
		public Truncate_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_statement; }
	}

	public final Truncate_table_statementContext truncate_table_statement() throws RecognitionException {
		Truncate_table_statementContext _localctx = new Truncate_table_statementContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_truncate_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5082);
			match(T__318);
			setState(5083);
			match(T__165);
			setState(5084);
			target_table();
			setState(5086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__319 || _la==T__321) {
				{
				setState(5085);
				identity_column_restart_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identity_column_restart_optionContext extends ParserRuleContext {
		public Identity_column_restart_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_column_restart_option; }
	}

	public final Identity_column_restart_optionContext identity_column_restart_option() throws RecognitionException {
		Identity_column_restart_optionContext _localctx = new Identity_column_restart_optionContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_identity_column_restart_option);
		try {
			setState(5092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__319:
				enterOuterAlt(_localctx, 1);
				{
				setState(5088);
				match(T__319);
				setState(5089);
				match(T__320);
				}
				break;
			case T__321:
				enterOuterAlt(_localctx, 2);
				{
				setState(5090);
				match(T__321);
				setState(5091);
				match(T__320);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Insertion_targetContext insertion_target() {
			return getRuleContext(Insertion_targetContext.class,0);
		}
		public Insert_columns_and_sourceContext insert_columns_and_source() {
			return getRuleContext(Insert_columns_and_sourceContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5094);
			match(T__322);
			setState(5095);
			match(T__311);
			setState(5096);
			insertion_target();
			setState(5097);
			insert_columns_and_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insertion_targetContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Insertion_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertion_target; }
	}

	public final Insertion_targetContext insertion_target() throws RecognitionException {
		Insertion_targetContext _localctx = new Insertion_targetContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_insertion_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_columns_and_sourceContext extends ParserRuleContext {
		public From_subqueryContext from_subquery() {
			return getRuleContext(From_subqueryContext.class,0);
		}
		public From_constructorContext from_constructor() {
			return getRuleContext(From_constructorContext.class,0);
		}
		public From_defaultContext from_default() {
			return getRuleContext(From_defaultContext.class,0);
		}
		public Insert_columns_and_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_columns_and_source; }
	}

	public final Insert_columns_and_sourceContext insert_columns_and_source() throws RecognitionException {
		Insert_columns_and_sourceContext _localctx = new Insert_columns_and_sourceContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_insert_columns_and_source);
		try {
			setState(5104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5101);
				from_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5102);
				from_constructor();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5103);
				from_default();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_subqueryContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Override_clauseContext override_clause() {
			return getRuleContext(Override_clauseContext.class,0);
		}
		public From_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_subquery; }
	}

	public final From_subqueryContext from_subquery() throws RecognitionException {
		From_subqueryContext _localctx = new From_subqueryContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_from_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(5106);
				match(LEFT_PAREN);
				setState(5107);
				insert_column_list();
				setState(5108);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(5113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__323) {
				{
				setState(5112);
				override_clause();
				}
			}

			setState(5115);
			query_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_constructorContext extends ParserRuleContext {
		public Contextually_typed_table_value_constructorContext contextually_typed_table_value_constructor() {
			return getRuleContext(Contextually_typed_table_value_constructorContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Override_clauseContext override_clause() {
			return getRuleContext(Override_clauseContext.class,0);
		}
		public From_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_constructor; }
	}

	public final From_constructorContext from_constructor() throws RecognitionException {
		From_constructorContext _localctx = new From_constructorContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_from_constructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5117);
				match(LEFT_PAREN);
				setState(5118);
				insert_column_list();
				setState(5119);
				match(RIGHT_PAREN);
				}
			}

			setState(5124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__323) {
				{
				setState(5123);
				override_clause();
				}
			}

			setState(5126);
			contextually_typed_table_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Override_clauseContext extends ParserRuleContext {
		public Override_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_clause; }
	}

	public final Override_clauseContext override_clause() throws RecognitionException {
		Override_clauseContext _localctx = new Override_clauseContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_override_clause);
		try {
			setState(5134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5128);
				match(T__323);
				setState(5129);
				match(T__50);
				setState(5130);
				match(T__51);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5131);
				match(T__323);
				setState(5132);
				match(T__172);
				setState(5133);
				match(T__51);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_defaultContext extends ParserRuleContext {
		public From_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_default; }
	}

	public final From_defaultContext from_default() throws RecognitionException {
		From_defaultContext _localctx = new From_defaultContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_from_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5136);
			match(T__56);
			setState(5137);
			match(T__166);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_insert_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5139);
			column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Merge_operation_specificationContext merge_operation_specification() {
			return getRuleContext(Merge_operation_specificationContext.class,0);
		}
		public Merge_correlation_nameContext merge_correlation_name() {
			return getRuleContext(Merge_correlation_nameContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(T__324);
			setState(5142);
			match(T__311);
			setState(5143);
			target_table();
			setState(5148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(5145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(5144);
					match(T__92);
					}
				}

				setState(5147);
				merge_correlation_name();
				}
			}

			setState(5150);
			match(T__101);
			setState(5151);
			table_reference(0);
			setState(5152);
			match(T__188);
			setState(5153);
			search_condition();
			setState(5154);
			merge_operation_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_correlation_nameContext extends ParserRuleContext {
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Merge_correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_correlation_name; }
	}

	public final Merge_correlation_nameContext merge_correlation_name() throws RecognitionException {
		Merge_correlation_nameContext _localctx = new Merge_correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_merge_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5156);
			correlation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_operation_specificationContext extends ParserRuleContext {
		public List<Merge_when_clauseContext> merge_when_clause() {
			return getRuleContexts(Merge_when_clauseContext.class);
		}
		public Merge_when_clauseContext merge_when_clause(int i) {
			return getRuleContext(Merge_when_clauseContext.class,i);
		}
		public Merge_operation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_operation_specification; }
	}

	public final Merge_operation_specificationContext merge_operation_specification() throws RecognitionException {
		Merge_operation_specificationContext _localctx = new Merge_operation_specificationContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_merge_operation_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5158);
				merge_when_clause();
				}
				}
				setState(5161); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__88 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_when_clauseContext extends ParserRuleContext {
		public Merge_when_matched_clauseContext merge_when_matched_clause() {
			return getRuleContext(Merge_when_matched_clauseContext.class,0);
		}
		public Merge_when_not_matched_clauseContext merge_when_not_matched_clause() {
			return getRuleContext(Merge_when_not_matched_clauseContext.class,0);
		}
		public Merge_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_when_clause; }
	}

	public final Merge_when_clauseContext merge_when_clause() throws RecognitionException {
		Merge_when_clauseContext _localctx = new Merge_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_merge_when_clause);
		try {
			setState(5165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5163);
				merge_when_matched_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				merge_when_not_matched_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_when_matched_clauseContext extends ParserRuleContext {
		public Merge_update_or_delete_specificationContext merge_update_or_delete_specification() {
			return getRuleContext(Merge_update_or_delete_specificationContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Merge_when_matched_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_when_matched_clause; }
	}

	public final Merge_when_matched_clauseContext merge_when_matched_clause() throws RecognitionException {
		Merge_when_matched_clauseContext _localctx = new Merge_when_matched_clauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_merge_when_matched_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5167);
			match(T__88);
			setState(5168);
			match(T__325);
			setState(5171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__154) {
				{
				setState(5169);
				match(T__154);
				setState(5170);
				search_condition();
				}
			}

			setState(5173);
			match(T__89);
			setState(5174);
			merge_update_or_delete_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_or_delete_specificationContext extends ParserRuleContext {
		public Merge_update_specificationContext merge_update_specification() {
			return getRuleContext(Merge_update_specificationContext.class,0);
		}
		public Merge_delete_specificationContext merge_delete_specification() {
			return getRuleContext(Merge_delete_specificationContext.class,0);
		}
		public Merge_update_or_delete_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_or_delete_specification; }
	}

	public final Merge_update_or_delete_specificationContext merge_update_or_delete_specification() throws RecognitionException {
		Merge_update_or_delete_specificationContext _localctx = new Merge_update_or_delete_specificationContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_merge_update_or_delete_specification);
		try {
			setState(5178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__309:
				enterOuterAlt(_localctx, 1);
				{
				setState(5176);
				merge_update_specification();
				}
				break;
			case T__316:
				enterOuterAlt(_localctx, 2);
				{
				setState(5177);
				merge_delete_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_when_not_matched_clauseContext extends ParserRuleContext {
		public Merge_insert_specificationContext merge_insert_specification() {
			return getRuleContext(Merge_insert_specificationContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Merge_when_not_matched_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_when_not_matched_clause; }
	}

	public final Merge_when_not_matched_clauseContext merge_when_not_matched_clause() throws RecognitionException {
		Merge_when_not_matched_clauseContext _localctx = new Merge_when_not_matched_clauseContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_merge_when_not_matched_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5180);
			match(T__88);
			setState(5181);
			match(T__155);
			setState(5182);
			match(T__325);
			setState(5185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__154) {
				{
				setState(5183);
				match(T__154);
				setState(5184);
				search_condition();
				}
			}

			setState(5187);
			match(T__89);
			setState(5188);
			merge_insert_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_specificationContext extends ParserRuleContext {
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Merge_update_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_specification; }
	}

	public final Merge_update_specificationContext merge_update_specification() throws RecognitionException {
		Merge_update_specificationContext _localctx = new Merge_update_specificationContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_merge_update_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(T__309);
			setState(5191);
			match(T__7);
			setState(5192);
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_delete_specificationContext extends ParserRuleContext {
		public Merge_delete_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_delete_specification; }
	}

	public final Merge_delete_specificationContext merge_delete_specification() throws RecognitionException {
		Merge_delete_specificationContext _localctx = new Merge_delete_specificationContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_merge_delete_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(T__316);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_specificationContext extends ParserRuleContext {
		public Merge_insert_value_listContext merge_insert_value_list() {
			return getRuleContext(Merge_insert_value_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Override_clauseContext override_clause() {
			return getRuleContext(Override_clauseContext.class,0);
		}
		public Merge_insert_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_specification; }
	}

	public final Merge_insert_specificationContext merge_insert_specification() throws RecognitionException {
		Merge_insert_specificationContext _localctx = new Merge_insert_specificationContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_merge_insert_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196);
			match(T__322);
			setState(5201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5197);
				match(LEFT_PAREN);
				setState(5198);
				insert_column_list();
				setState(5199);
				match(RIGHT_PAREN);
				}
			}

			setState(5204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__323) {
				{
				setState(5203);
				override_clause();
				}
			}

			setState(5206);
			match(T__166);
			setState(5207);
			merge_insert_value_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_value_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Merge_insert_value_elementContext> merge_insert_value_element() {
			return getRuleContexts(Merge_insert_value_elementContext.class);
		}
		public Merge_insert_value_elementContext merge_insert_value_element(int i) {
			return getRuleContext(Merge_insert_value_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Merge_insert_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_value_list; }
	}

	public final Merge_insert_value_listContext merge_insert_value_list() throws RecognitionException {
		Merge_insert_value_listContext _localctx = new Merge_insert_value_listContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_merge_insert_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5209);
			match(LEFT_PAREN);
			setState(5210);
			merge_insert_value_element();
			setState(5215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5211);
				match(COMMA);
				setState(5212);
				merge_insert_value_element();
				}
				}
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5218);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_value_elementContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public Merge_insert_value_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_value_element; }
	}

	public final Merge_insert_value_elementContext merge_insert_value_element() throws RecognitionException {
		Merge_insert_value_elementContext _localctx = new Merge_insert_value_elementContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_merge_insert_value_element);
		try {
			setState(5222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5220);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5221);
				contextually_typed_value_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement__positionedContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Update_statement__positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement__positioned; }
	}

	public final Update_statement__positionedContext update_statement__positioned() throws RecognitionException {
		Update_statement__positionedContext _localctx = new Update_statement__positionedContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_update_statement__positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5224);
			match(T__309);
			setState(5225);
			target_table();
			setState(5230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(5226);
					match(T__92);
					}
				}

				setState(5229);
				correlation_name();
				}
			}

			setState(5232);
			match(T__7);
			setState(5233);
			set_clause_list();
			setState(5234);
			match(T__194);
			setState(5235);
			match(T__206);
			setState(5236);
			match(T__175);
			setState(5237);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement__searchedContext extends ParserRuleContext {
		public Target_tableContext target_table() {
			return getRuleContext(Target_tableContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Application_time_period_nameContext application_time_period_name() {
			return getRuleContext(Application_time_period_nameContext.class,0);
		}
		public Point_in_time_1Context point_in_time_1() {
			return getRuleContext(Point_in_time_1Context.class,0);
		}
		public Point_in_time_2Context point_in_time_2() {
			return getRuleContext(Point_in_time_2Context.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Update_statement__searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement__searched; }
	}

	public final Update_statement__searchedContext update_statement__searched() throws RecognitionException {
		Update_statement__searchedContext _localctx = new Update_statement__searchedContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_update_statement__searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5239);
			match(T__309);
			setState(5240);
			target_table();
			setState(5250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__54) {
				{
				setState(5241);
				match(T__54);
				setState(5242);
				match(T__317);
				setState(5243);
				match(T__175);
				setState(5244);
				application_time_period_name();
				setState(5245);
				match(T__73);
				setState(5246);
				point_in_time_1();
				setState(5247);
				match(T__179);
				setState(5248);
				point_in_time_2();
				}
			}

			setState(5256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__92 || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (IDENTIFIER_BODY - 385)) | (1L << (DELIMITED_IDENTIFIER - 385)) | (1L << (UNICODE_DELIMITED_IDENTIFIER - 385)))) != 0)) {
				{
				setState(5253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__92) {
					{
					setState(5252);
					match(T__92);
					}
				}

				setState(5255);
				correlation_name();
				}
			}

			setState(5258);
			match(T__7);
			setState(5259);
			set_clause_list();
			setState(5262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__194) {
				{
				setState(5260);
				match(T__194);
				setState(5261);
				search_condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5264);
			set_clause();
			setState(5269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5265);
				match(COMMA);
				setState(5266);
				set_clause();
				}
				}
				setState(5271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Multiple_column_assignmentContext multiple_column_assignment() {
			return getRuleContext(Multiple_column_assignmentContext.class,0);
		}
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(SQL2011Parser.EQUALS_OPERATOR, 0); }
		public Update_sourceContext update_source() {
			return getRuleContext(Update_sourceContext.class,0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_set_clause);
		try {
			setState(5277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5272);
				multiple_column_assignment();
				}
				break;
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5273);
				set_target();
				setState(5274);
				match(EQUALS_OPERATOR);
				setState(5275);
				update_source();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public Update_targetContext update_target() {
			return getRuleContext(Update_targetContext.class,0);
		}
		public Mutated_set_clauseContext mutated_set_clause() {
			return getRuleContext(Mutated_set_clauseContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_set_target);
		try {
			setState(5281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5279);
				update_target();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5280);
				mutated_set_clause(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_column_assignmentContext extends ParserRuleContext {
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(SQL2011Parser.EQUALS_OPERATOR, 0); }
		public Assigned_rowContext assigned_row() {
			return getRuleContext(Assigned_rowContext.class,0);
		}
		public Multiple_column_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_column_assignment; }
	}

	public final Multiple_column_assignmentContext multiple_column_assignment() throws RecognitionException {
		Multiple_column_assignmentContext _localctx = new Multiple_column_assignmentContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_multiple_column_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			set_target_list();
			setState(5284);
			match(EQUALS_OPERATOR);
			setState(5285);
			assigned_row();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public List<Set_targetContext> set_target() {
			return getRuleContexts(Set_targetContext.class);
		}
		public Set_targetContext set_target(int i) {
			return getRuleContext(Set_targetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_set_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			match(LEFT_PAREN);
			setState(5288);
			set_target();
			setState(5293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5289);
				match(COMMA);
				setState(5290);
				set_target();
				}
				}
				setState(5295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5296);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assigned_rowContext extends ParserRuleContext {
		public Contextually_typed_row_value_expressionContext contextually_typed_row_value_expression() {
			return getRuleContext(Contextually_typed_row_value_expressionContext.class,0);
		}
		public Assigned_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assigned_row; }
	}

	public final Assigned_rowContext assigned_row() throws RecognitionException {
		Assigned_rowContext _localctx = new Assigned_rowContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_assigned_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			contextually_typed_row_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_targetContext extends ParserRuleContext {
		public Object_columnContext object_column() {
			return getRuleContext(Object_columnContext.class,0);
		}
		public TerminalNode LEFT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.LEFT_BRACKET_OR_TRIGRAPH, 0); }
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_OR_TRIGRAPH() { return getToken(SQL2011Parser.RIGHT_BRACKET_OR_TRIGRAPH, 0); }
		public Update_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_target; }
	}

	public final Update_targetContext update_target() throws RecognitionException {
		Update_targetContext _localctx = new Update_targetContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_update_target);
		try {
			setState(5306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5300);
				object_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5301);
				object_column();
				setState(5302);
				match(LEFT_BRACKET_OR_TRIGRAPH);
				setState(5303);
				simple_value_specification();
				setState(5304);
				match(RIGHT_BRACKET_OR_TRIGRAPH);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Object_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_column; }
	}

	public final Object_columnContext object_column() throws RecognitionException {
		Object_columnContext _localctx = new Object_columnContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_object_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5308);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mutated_set_clauseContext extends ParserRuleContext {
		public Object_columnContext object_column() {
			return getRuleContext(Object_columnContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQL2011Parser.PERIOD, 0); }
		public Method_nameContext method_name() {
			return getRuleContext(Method_nameContext.class,0);
		}
		public Mutated_set_clauseContext mutated_set_clause() {
			return getRuleContext(Mutated_set_clauseContext.class,0);
		}
		public Mutated_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mutated_set_clause; }
	}

	public final Mutated_set_clauseContext mutated_set_clause() throws RecognitionException {
		return mutated_set_clause(0);
	}

	private Mutated_set_clauseContext mutated_set_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Mutated_set_clauseContext _localctx = new Mutated_set_clauseContext(_ctx, _parentState);
		Mutated_set_clauseContext _prevctx = _localctx;
		int _startState = 1290;
		enterRecursionRule(_localctx, 1290, RULE_mutated_set_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5311);
			object_column();
			setState(5312);
			match(PERIOD);
			setState(5313);
			method_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(5320);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Mutated_set_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_mutated_set_clause);
					setState(5315);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5316);
					match(PERIOD);
					setState(5317);
					method_name();
					}
					} 
				}
				setState(5322);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Update_sourceContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Contextually_typed_value_specificationContext contextually_typed_value_specification() {
			return getRuleContext(Contextually_typed_value_specificationContext.class,0);
		}
		public Update_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_source; }
	}

	public final Update_sourceContext update_source() throws RecognitionException {
		Update_sourceContext _localctx = new Update_sourceContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_update_source);
		try {
			setState(5325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5324);
				contextually_typed_value_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_statementContext extends ParserRuleContext {
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_call_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5327);
			match(T__326);
			setState(5328);
			routine_invocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public Return_valueContext return_value() {
			return getRuleContext(Return_valueContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5330);
			match(T__307);
			setState(5331);
			return_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_valueContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Return_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_value; }
	}

	public final Return_valueContext return_value() throws RecognitionException {
		Return_valueContext _localctx = new Return_valueContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_return_value);
		try {
			setState(5335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__7:
			case T__38:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__70:
			case T__71:
			case T__72:
			case T__76:
			case T__84:
			case T__85:
			case T__86:
			case T__91:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__102:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__136:
			case T__140:
			case T__142:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__155:
			case T__160:
			case T__162:
			case T__165:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__236:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case T__275:
			case T__276:
			case T__277:
			case T__278:
			case T__279:
			case T__280:
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__295:
			case T__296:
			case T__297:
			case T__343:
			case T__344:
			case T__345:
			case T__346:
			case T__347:
			case T__348:
			case T__349:
			case T__350:
			case T__351:
			case T__352:
			case T__353:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case PERIOD:
			case COLON:
			case QUESTION_MARK:
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
			case CHARACTER_STRING_LITERAL:
			case UNICODE_CHARACTER_STRING_LITERAL:
			case BINARY_STRING_LITERAL:
			case UNSIGNED_INTEGER:
			case DATE_LITERAL:
			case TIME_LITERAL:
			case TIMESTAMP_LITERAL:
			case INTERVAL_LITERAL:
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5333);
				value_expression();
				}
				break;
			case T__55:
				enterOuterAlt(_localctx, 2);
				{
				setState(5334);
				match(T__55);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_transaction_statementContext extends ParserRuleContext {
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Start_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_transaction_statement; }
	}

	public final Start_transaction_statementContext start_transaction_statement() throws RecognitionException {
		Start_transaction_statementContext _localctx = new Start_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_start_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			match(T__105);
			setState(5338);
			match(T__327);
			setState(5347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (T__308 - 309)) | (1L << (T__329 - 309)) | (1L << (T__334 - 309)))) != 0)) {
				{
				setState(5339);
				transaction_mode();
				setState(5344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5340);
					match(COMMA);
					setState(5341);
					transaction_mode();
					}
					}
					setState(5346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_statementContext extends ParserRuleContext {
		public Transaction_characteristicsContext transaction_characteristics() {
			return getRuleContext(Transaction_characteristicsContext.class,0);
		}
		public Set_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_statement; }
	}

	public final Set_transaction_statementContext set_transaction_statement() throws RecognitionException {
		Set_transaction_statementContext _localctx = new Set_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_set_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			match(T__7);
			setState(5351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__3) {
				{
				setState(5350);
				match(T__3);
				}
			}

			setState(5353);
			match(T__327);
			setState(5354);
			transaction_characteristics();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_characteristicsContext extends ParserRuleContext {
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Transaction_characteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_characteristics; }
	}

	public final Transaction_characteristicsContext transaction_characteristics() throws RecognitionException {
		Transaction_characteristicsContext _localctx = new Transaction_characteristicsContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_transaction_characteristics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (T__308 - 309)) | (1L << (T__329 - 309)) | (1L << (T__334 - 309)))) != 0)) {
				{
				setState(5356);
				transaction_mode();
				setState(5361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5357);
					match(COMMA);
					setState(5358);
					transaction_mode();
					}
					}
					setState(5363);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_modeContext extends ParserRuleContext {
		public Isolation_levelContext isolation_level() {
			return getRuleContext(Isolation_levelContext.class,0);
		}
		public Transaction_access_modeContext transaction_access_mode() {
			return getRuleContext(Transaction_access_modeContext.class,0);
		}
		public Diagnostics_sizeContext diagnostics_size() {
			return getRuleContext(Diagnostics_sizeContext.class,0);
		}
		public Transaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode; }
	}

	public final Transaction_modeContext transaction_mode() throws RecognitionException {
		Transaction_modeContext _localctx = new Transaction_modeContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_transaction_mode);
		try {
			setState(5369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__329:
				enterOuterAlt(_localctx, 1);
				{
				setState(5366);
				isolation_level();
				}
				break;
			case T__308:
				enterOuterAlt(_localctx, 2);
				{
				setState(5367);
				transaction_access_mode();
				}
				break;
			case T__334:
				enterOuterAlt(_localctx, 3);
				{
				setState(5368);
				diagnostics_size();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_access_modeContext extends ParserRuleContext {
		public Transaction_access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_access_mode; }
	}

	public final Transaction_access_modeContext transaction_access_mode() throws RecognitionException {
		Transaction_access_modeContext _localctx = new Transaction_access_modeContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_transaction_access_mode);
		try {
			setState(5375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5371);
				match(T__308);
				setState(5372);
				match(T__180);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5373);
				match(T__308);
				setState(5374);
				match(T__328);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Isolation_levelContext extends ParserRuleContext {
		public Level_of_isolationContext level_of_isolation() {
			return getRuleContext(Level_of_isolationContext.class,0);
		}
		public Isolation_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolation_level; }
	}

	public final Isolation_levelContext isolation_level() throws RecognitionException {
		Isolation_levelContext _localctx = new Isolation_levelContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_isolation_level);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5377);
			match(T__329);
			setState(5378);
			match(T__330);
			setState(5379);
			level_of_isolation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Level_of_isolationContext extends ParserRuleContext {
		public Level_of_isolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_level_of_isolation; }
	}

	public final Level_of_isolationContext level_of_isolation() throws RecognitionException {
		Level_of_isolationContext _localctx = new Level_of_isolationContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_level_of_isolation);
		try {
			setState(5388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5381);
				match(T__308);
				setState(5382);
				match(T__331);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5383);
				match(T__308);
				setState(5384);
				match(T__332);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5385);
				match(T__173);
				setState(5386);
				match(T__308);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5387);
				match(T__333);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Diagnostics_sizeContext extends ParserRuleContext {
		public Number_of_conditionsContext number_of_conditions() {
			return getRuleContext(Number_of_conditionsContext.class,0);
		}
		public Diagnostics_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnostics_size; }
	}

	public final Diagnostics_sizeContext diagnostics_size() throws RecognitionException {
		Diagnostics_sizeContext _localctx = new Diagnostics_sizeContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_diagnostics_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			match(T__334);
			setState(5391);
			match(T__335);
			setState(5392);
			number_of_conditions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_of_conditionsContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Number_of_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_of_conditions; }
	}

	public final Number_of_conditionsContext number_of_conditions() throws RecognitionException {
		Number_of_conditionsContext _localctx = new Number_of_conditionsContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_number_of_conditions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraints_mode_statementContext extends ParserRuleContext {
		public Constraint_name_listContext constraint_name_list() {
			return getRuleContext(Constraint_name_listContext.class,0);
		}
		public Set_constraints_mode_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_mode_statement; }
	}

	public final Set_constraints_mode_statementContext set_constraints_mode_statement() throws RecognitionException {
		Set_constraints_mode_statementContext _localctx = new Set_constraints_mode_statementContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_set_constraints_mode_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5396);
			match(T__7);
			setState(5397);
			match(T__336);
			setState(5398);
			constraint_name_list();
			setState(5399);
			_la = _input.LA(1);
			if ( !(_la==T__265 || _la==T__266) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_listContext extends ParserRuleContext {
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQL2011Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQL2011Parser.COMMA, i);
		}
		public Constraint_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_list; }
	}

	public final Constraint_name_listContext constraint_name_list() throws RecognitionException {
		Constraint_name_listContext _localctx = new Constraint_name_listContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_constraint_name_list);
		int _la;
		try {
			setState(5410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__135:
				enterOuterAlt(_localctx, 1);
				{
				setState(5401);
				match(T__135);
				}
				break;
			case IDENTIFIER_BODY:
			case DELIMITED_IDENTIFIER:
			case UNICODE_DELIMITED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5402);
				constraint_name();
				setState(5407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5403);
					match(COMMA);
					setState(5404);
					constraint_name();
					}
					}
					setState(5409);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public Savepoint_specifierContext savepoint_specifier() {
			return getRuleContext(Savepoint_specifierContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5412);
			match(T__337);
			setState(5413);
			savepoint_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_specifierContext extends ParserRuleContext {
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_specifier; }
	}

	public final Savepoint_specifierContext savepoint_specifier() throws RecognitionException {
		Savepoint_specifierContext _localctx = new Savepoint_specifierContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_savepoint_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5415);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_savepoint_statementContext extends ParserRuleContext {
		public Savepoint_specifierContext savepoint_specifier() {
			return getRuleContext(Savepoint_specifierContext.class,0);
		}
		public Release_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_statement; }
	}

	public final Release_savepoint_statementContext release_savepoint_statement() throws RecognitionException {
		Release_savepoint_statementContext _localctx = new Release_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_release_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5417);
			match(T__338);
			setState(5418);
			match(T__337);
			setState(5419);
			savepoint_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5421);
			match(T__339);
			setState(5423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__340) {
				{
				setState(5422);
				match(T__340);
				}
			}

			setState(5430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__154) {
				{
				setState(5425);
				match(T__154);
				setState(5427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__210) {
					{
					setState(5426);
					match(T__210);
					}
				}

				setState(5429);
				match(T__341);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public Savepoint_clauseContext savepoint_clause() {
			return getRuleContext(Savepoint_clauseContext.class,0);
		}
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			match(T__342);
			setState(5434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__340) {
				{
				setState(5433);
				match(T__340);
				}
			}

			setState(5441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__154) {
				{
				setState(5436);
				match(T__154);
				setState(5438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__210) {
					{
					setState(5437);
					match(T__210);
					}
				}

				setState(5440);
				match(T__341);
				}
			}

			setState(5444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__179) {
				{
				setState(5443);
				savepoint_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_clauseContext extends ParserRuleContext {
		public Savepoint_specifierContext savepoint_specifier() {
			return getRuleContext(Savepoint_specifierContext.class,0);
		}
		public Savepoint_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_clause; }
	}

	public final Savepoint_clauseContext savepoint_clause() throws RecognitionException {
		Savepoint_clauseContext _localctx = new Savepoint_clauseContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_savepoint_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5446);
			match(T__179);
			setState(5447);
			match(T__337);
			setState(5448);
			savepoint_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_sql_statementContext extends ParserRuleContext {
		public Directly_executable_statementContext directly_executable_statement() {
			return getRuleContext(Directly_executable_statementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(SQL2011Parser.SEMICOLON, 0); }
		public Direct_sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_sql_statement; }
	}

	public final Direct_sql_statementContext direct_sql_statement() throws RecognitionException {
		Direct_sql_statementContext _localctx = new Direct_sql_statementContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_direct_sql_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5450);
			directly_executable_statement();
			setState(5451);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Directly_executable_statementContext extends ParserRuleContext {
		public Direct_sql_data_statementContext direct_sql_data_statement() {
			return getRuleContext(Direct_sql_data_statementContext.class,0);
		}
		public Directly_executable_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directly_executable_statement; }
	}

	public final Directly_executable_statementContext directly_executable_statement() throws RecognitionException {
		Directly_executable_statementContext _localctx = new Directly_executable_statementContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_directly_executable_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5453);
			direct_sql_data_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_sql_data_statementContext extends ParserRuleContext {
		public Delete_statement__searchedContext delete_statement__searched() {
			return getRuleContext(Delete_statement__searchedContext.class,0);
		}
		public Direct_select_statement__multiple_rowsContext direct_select_statement__multiple_rows() {
			return getRuleContext(Direct_select_statement__multiple_rowsContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Update_statement__searchedContext update_statement__searched() {
			return getRuleContext(Update_statement__searchedContext.class,0);
		}
		public Truncate_table_statementContext truncate_table_statement() {
			return getRuleContext(Truncate_table_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Direct_sql_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_sql_data_statement; }
	}

	public final Direct_sql_data_statementContext direct_sql_data_statement() throws RecognitionException {
		Direct_sql_data_statementContext _localctx = new Direct_sql_data_statementContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_direct_sql_data_statement);
		try {
			setState(5461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__316:
				enterOuterAlt(_localctx, 1);
				{
				setState(5455);
				delete_statement__searched();
				}
				break;
			case T__34:
			case T__162:
			case T__165:
			case T__166:
			case T__212:
			case T__214:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5456);
				direct_select_statement__multiple_rows();
				}
				break;
			case T__322:
				enterOuterAlt(_localctx, 3);
				{
				setState(5457);
				insert_statement();
				}
				break;
			case T__309:
				enterOuterAlt(_localctx, 4);
				{
				setState(5458);
				update_statement__searched();
				}
				break;
			case T__318:
				enterOuterAlt(_localctx, 5);
				{
				setState(5459);
				truncate_table_statement();
				}
				break;
			case T__324:
				enterOuterAlt(_localctx, 6);
				{
				setState(5460);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_select_statement__multiple_rowsContext extends ParserRuleContext {
		public Cursor_specificationContext cursor_specification() {
			return getRuleContext(Cursor_specificationContext.class,0);
		}
		public Direct_select_statement__multiple_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_select_statement__multiple_rows; }
	}

	public final Direct_select_statement__multiple_rowsContext direct_select_statement__multiple_rows() throws RecognitionException {
		Direct_select_statement__multiple_rowsContext _localctx = new Direct_select_statement__multiple_rowsContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_direct_select_statement__multiple_rows);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5463);
			cursor_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Application_time_period_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Application_time_period_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_application_time_period_name; }
	}

	public final Application_time_period_nameContext application_time_period_name() throws RecognitionException {
		Application_time_period_nameContext _localctx = new Application_time_period_nameContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_application_time_period_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5465);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_variable_nameContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(SQL2011Parser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Embedded_variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_variable_name; }
	}

	public final Embedded_variable_nameContext embedded_variable_name() throws RecognitionException {
		Embedded_variable_nameContext _localctx = new Embedded_variable_nameContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_embedded_variable_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5467);
			match(COLON);
			setState(5468);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigonometric_functionContext extends ParserRuleContext {
		public Trigonometric_function_nameContext trigonometric_function_name() {
			return getRuleContext(Trigonometric_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Trigonometric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigonometric_function; }
	}

	public final Trigonometric_functionContext trigonometric_function() throws RecognitionException {
		Trigonometric_functionContext _localctx = new Trigonometric_functionContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_trigonometric_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			trigonometric_function_name();
			setState(5471);
			match(LEFT_PAREN);
			setState(5472);
			numeric_value_expression(0);
			setState(5473);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigonometric_function_nameContext extends ParserRuleContext {
		public Trigonometric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigonometric_function_name; }
	}

	public final Trigonometric_function_nameContext trigonometric_function_name() throws RecognitionException {
		Trigonometric_function_nameContext _localctx = new Trigonometric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_trigonometric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5475);
			_la = _input.LA(1);
			if ( !(((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (T__343 - 344)) | (1L << (T__344 - 344)) | (1L << (T__345 - 344)) | (1L << (T__346 - 344)) | (1L << (T__347 - 344)) | (1L << (T__348 - 344)) | (1L << (T__349 - 344)) | (1L << (T__350 - 344)) | (1L << (T__351 - 344)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_logarithm_functionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public General_logarithm_baseContext general_logarithm_base() {
			return getRuleContext(General_logarithm_baseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQL2011Parser.COMMA, 0); }
		public General_logarithm_argumentContext general_logarithm_argument() {
			return getRuleContext(General_logarithm_argumentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public General_logarithm_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_logarithm_function; }
	}

	public final General_logarithm_functionContext general_logarithm_function() throws RecognitionException {
		General_logarithm_functionContext _localctx = new General_logarithm_functionContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_general_logarithm_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5477);
			match(T__352);
			setState(5478);
			match(LEFT_PAREN);
			setState(5479);
			general_logarithm_base();
			setState(5480);
			match(COMMA);
			setState(5481);
			general_logarithm_argument();
			setState(5482);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_logarithm_baseContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public General_logarithm_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_logarithm_base; }
	}

	public final General_logarithm_baseContext general_logarithm_base() throws RecognitionException {
		General_logarithm_baseContext _localctx = new General_logarithm_baseContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_general_logarithm_base);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5484);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_logarithm_argumentContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public General_logarithm_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_logarithm_argument; }
	}

	public final General_logarithm_argumentContext general_logarithm_argument() throws RecognitionException {
		General_logarithm_argumentContext _localctx = new General_logarithm_argumentContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_general_logarithm_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5486);
			numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_logarithmContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQL2011Parser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQL2011Parser.RIGHT_PAREN, 0); }
		public Common_logarithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_logarithm; }
	}

	public final Common_logarithmContext common_logarithm() throws RecognitionException {
		Common_logarithmContext _localctx = new Common_logarithmContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_common_logarithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5488);
			match(T__353);
			setState(5489);
			match(LEFT_PAREN);
			setState(5490);
			numeric_value_expression(0);
			setState(5491);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 66:
			return data_type_sempred((Data_typeContext)_localctx, predIndex);
		case 97:
			return value_expression_primary_sempred((Value_expression_primaryContext)_localctx, predIndex);
		case 191:
			return numeric_value_expression_sempred((Numeric_value_expressionContext)_localctx, predIndex);
		case 192:
			return term_sempred((TermContext)_localctx, predIndex);
		case 236:
			return character_value_expression_sempred((Character_value_expressionContext)_localctx, predIndex);
		case 239:
			return binary_value_expression_sempred((Binary_value_expressionContext)_localctx, predIndex);
		case 272:
			return datetime_value_expression_sempred((Datetime_value_expressionContext)_localctx, predIndex);
		case 284:
			return interval_value_expression_sempred((Interval_value_expressionContext)_localctx, predIndex);
		case 285:
			return interval_term_sempred((Interval_termContext)_localctx, predIndex);
		case 291:
			return boolean_value_expression_sempred((Boolean_value_expressionContext)_localctx, predIndex);
		case 292:
			return boolean_term_sempred((Boolean_termContext)_localctx, predIndex);
		case 299:
			return array_value_expression_sempred((Array_value_expressionContext)_localctx, predIndex);
		case 308:
			return multiset_value_expression_sempred((Multiset_value_expressionContext)_localctx, predIndex);
		case 309:
			return multiset_term_sempred((Multiset_termContext)_localctx, predIndex);
		case 339:
			return table_reference_sempred((Table_referenceContext)_localctx, predIndex);
		case 423:
			return query_expression_body_sempred((Query_expression_bodyContext)_localctx, predIndex);
		case 424:
			return query_term_sempred((Query_termContext)_localctx, predIndex);
		case 474:
			return regular_expression_sempred((Regular_expressionContext)_localctx, predIndex);
		case 475:
			return regular_term_sempred((Regular_termContext)_localctx, predIndex);
		case 645:
			return mutated_set_clause_sempred((Mutated_set_clauseContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean data_type_sempred(Data_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean value_expression_primary_sempred(Value_expression_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 15);
		case 3:
			return precpred(_ctx, 13);
		case 4:
			return precpred(_ctx, 9);
		case 5:
			return precpred(_ctx, 6);
		case 6:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean numeric_value_expression_sempred(Numeric_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 2);
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean character_value_expression_sempred(Character_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean binary_value_expression_sempred(Binary_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean datetime_value_expression_sempred(Datetime_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		case 14:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean interval_value_expression_sempred(Interval_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 3);
		case 16:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean interval_term_sempred(Interval_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 3);
		case 18:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean boolean_value_expression_sempred(Boolean_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolean_term_sempred(Boolean_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean array_value_expression_sempred(Array_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean multiset_value_expression_sempred(Multiset_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 4);
		case 23:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean multiset_term_sempred(Multiset_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean table_reference_sempred(Table_referenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return precpred(_ctx, 6);
		case 26:
			return precpred(_ctx, 5);
		case 27:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean query_expression_body_sempred(Query_expression_bodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return precpred(_ctx, 4);
		case 29:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean query_term_sempred(Query_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean regular_expression_sempred(Regular_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean regular_term_sempred(Regular_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean mutated_set_clause_sempred(Mutated_set_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01a5\u1578\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\3\2\3\2\3\3\3\3\5\3\u0555"+
		"\n\3\3\4\3\4\5\4\u0559\n\4\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0561\n\5\3\6\5"+
		"\6\u0564\n\6\3\6\3\6\3\7\3\7\5\7\u056a\n\7\3\b\3\b\3\b\5\b\u056f\n\b\5"+
		"\b\u0571\n\b\3\b\3\b\5\b\u0575\n\b\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3"+
		"\f\3\f\3\r\5\r\u0582\n\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\5"+
		"\20\u058d\n\20\3\21\3\21\5\21\u0591\n\21\3\22\3\22\3\23\3\23\3\24\3\24"+
		"\3\24\5\24\u059a\n\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\5\27"+
		"\u05a5\n\27\3\27\3\27\3\30\3\30\3\30\5\30\u05ac\n\30\3\30\3\30\3\31\3"+
		"\31\5\31\u05b2\n\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36"+
		"\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\5$\u05cb\n$\3$\3$\3%\3%"+
		"\3&\3&\3&\3\'\3\'\3(\3(\3)\3)\5)\u05da\n)\3*\3*\3+\3+\3,\3,\3,\5,\u05e3"+
		"\n,\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\60\5\60\u05f0\n\60\3\60\3\60\3"+
		"\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3"+
		"8\38\39\39\3:\3:\5:\u0608\n:\3;\3;\3<\5<\u060d\n<\3<\3<\3=\3=\5=\u0613"+
		"\n=\3>\5>\u0616\n>\3>\3>\3?\3?\5?\u061c\n?\3@\3@\3A\5A\u0621\nA\3A\3A"+
		"\3B\3B\3C\3C\3D\3D\3D\3D\3D\5D\u062e\nD\3D\3D\3D\3D\3D\3D\5D\u0636\nD"+
		"\3D\3D\7D\u063a\nD\fD\16D\u063d\13D\3E\3E\3E\3E\5E\u0643\nE\3E\5E\u0646"+
		"\nE\3E\3E\3E\3E\3E\5E\u064d\nE\3F\3F\3F\3F\3F\5F\u0654\nF\3F\3F\3F\3F"+
		"\3F\5F\u065b\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F"+
		"\5F\u066f\nF\3G\3G\3G\3G\3G\3G\3G\5G\u0678\nG\3G\3G\3G\3G\3G\3G\3G\5G"+
		"\u0681\nG\3G\3G\3G\3G\3G\5G\u0688\nG\5G\u068a\nG\3H\3H\3H\3H\3H\5H\u0691"+
		"\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u069f\nH\3I\3I\3I\3I\3I\3I"+
		"\3I\5I\u06a8\nI\3I\3I\3I\3I\3I\5I\u06af\nI\5I\u06b1\nI\3J\3J\5J\u06b5"+
		"\nJ\3K\3K\3K\3K\3K\5K\u06bc\nK\3K\3K\5K\u06c0\nK\3K\3K\3K\3K\3K\5K\u06c7"+
		"\nK\3K\3K\5K\u06cb\nK\3K\3K\3K\3K\3K\5K\u06d2\nK\3K\3K\5K\u06d6\nK\3K"+
		"\3K\3K\3K\5K\u06dc\nK\3L\3L\3L\3L\3L\5L\u06e3\nL\3L\3L\3L\5L\u06e8\nL"+
		"\3M\3M\3N\3N\5N\u06ee\nN\3O\3O\5O\u06f2\nO\3O\5O\u06f5\nO\3P\3P\5P\u06f9"+
		"\nP\3Q\3Q\3R\3R\3S\3S\3T\3T\3U\3U\3U\3U\3U\3U\5U\u0709\nU\3U\5U\u070c"+
		"\nU\3U\3U\3U\3U\3U\5U\u0713\nU\3U\5U\u0716\nU\5U\u0718\nU\3V\3V\3V\3V"+
		"\3V\3V\5V\u0720\nV\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\3\\\3\\\3\\\3\\"+
		"\7\\\u0732\n\\\f\\\16\\\u0735\13\\\3\\\3\\\3]\3]\3]\3]\3]\5]\u073e\n]"+
		"\3^\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c"+
		"\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0764\nc\3c\3c\3c\3c\3c\3c"+
		"\3c\5c\u076d\nc\3c\3c\3c\3c\5c\u0773\nc\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c"+
		"\3c\3c\7c\u0781\nc\fc\16c\u0784\13c\3d\3d\3d\3d\3e\3e\5e\u078c\ne\3f\3"+
		"f\5f\u0790\nf\3g\3g\5g\u0794\ng\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3"+
		"h\3h\3h\3h\3h\5h\u07a7\nh\3i\3i\3i\3i\5i\u07ad\ni\3j\3j\3j\3j\3j\3j\5"+
		"j\u07b5\nj\3k\3k\3k\3k\5k\u07bb\nk\3l\3l\5l\u07bf\nl\3m\3m\3n\3n\5n\u07c5"+
		"\nn\3o\5o\u07c8\no\3o\3o\3p\5p\u07cd\np\3p\3p\3q\3q\3q\3q\3q\3r\3r\5r"+
		"\u07d8\nr\3s\3s\3s\3s\3s\3s\3t\3t\5t\u07e2\nt\3u\3u\5u\u07e6\nu\3v\3v"+
		"\3w\3w\3w\3w\3w\3w\5w\u07f0\nw\3x\3x\3y\3y\3y\7y\u07f7\ny\fy\16y\u07fa"+
		"\13y\3z\3z\3{\3{\3{\3{\3{\3{\3{\5{\u0805\n{\3|\3|\3}\3}\5}\u080b\n}\3"+
		"~\3~\3~\3~\3~\7~\u0812\n~\f~\16~\u0815\13~\3~\3~\3\177\3\177\3\177\3\177"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\5\u0080\u0829\n\u0080\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u0834\n\u0083"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u083d"+
		"\n\u0084\5\u0084\u083f\n\u0084\3\u0084\3\u0084\5\u0084\u0843\n\u0084\3"+
		"\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u0851\n\u0089\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0858\n\u008a\3\u008b\3\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0863\n\u008c\3\u008c"+
		"\5\u008c\u0866\n\u008c\3\u008d\3\u008d\5\u008d\u086a\n\u008d\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\5\u008e\u0870\n\u008e\3\u008f\3\u008f\5\u008f\u0874"+
		"\n\u008f\3\u0090\3\u0090\3\u0091\3\u0091\5\u0091\u087a\n\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0888\n\u0093\3\u0093\3\u0093\3\u0094\3\u0094"+
		"\3\u0095\3\u0095\5\u0095\u0890\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\5\u0096\u0896\n\u0096\3\u0097\3\u0097\5\u0097\u089a\n\u0097\3\u0098\3"+
		"\u0098\3\u0099\3\u0099\5\u0099\u08a0\n\u0099\3\u009a\3\u009a\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\6\u009a\u08ae\n\u009a\r\u009a\16\u009a\u08af\3\u009a\3\u009a\5\u009a"+
		"\u08b4\n\u009a\3\u009b\3\u009b\5\u009b\u08b8\n\u009b\3\u009c\3\u009c\3"+
		"\u009c\6\u009c\u08bd\n\u009c\r\u009c\16\u009c\u08be\3\u009c\5\u009c\u08c2"+
		"\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d\6\u009d\u08c8\n\u009d\r\u009d"+
		"\16\u009d\u08c9\3\u009d\5\u009d\u08cd\n\u009d\3\u009d\3\u009d\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\5\u00a1\u08e0\n\u00a1\3\u00a2"+
		"\3\u00a2\3\u00a2\7\u00a2\u08e5\n\u00a2\f\u00a2\16\u00a2\u08e8\13\u00a2"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\5\u00a3\u08fc\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u0900\n\u00a4\3\u00a5\3"+
		"\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7"+
		"\3\u00a7\5\u00a7\u090d\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0911\n\u00a8\3"+
		"\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac\3\u00ac\5\u00ac\u0923"+
		"\n\u00ac\3\u00ad\3\u00ad\5\u00ad\u0927\n\u00ad\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u092d\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\5\u00af\u0937\n\u00af\3\u00b0\3\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0941\n\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\5\u00b5\u094b"+
		"\n\u00b5\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u096a\n\u00bc\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0973\n\u00bd\3\u00be\3\u00be"+
		"\3\u00bf\3\u00bf\3\u00c0\3\u00c0\5\u00c0\u097b\n\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0986"+
		"\n\u00c1\f\u00c1\16\u00c1\u0989\13\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0994\n\u00c2\f\u00c2"+
		"\16\u00c2\u0997\13\u00c2\3\u00c3\5\u00c3\u099a\n\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c4\3\u00c4\5\u00c4\u09a0\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u09b5\n\u00c5"+
		"\3\u00c6\3\u00c6\5\u00c6\u09b9\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\5\u00c7\u09c0\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u09c6\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u09ca\n\u00c7\3\u00c7\3\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u09d7\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u09dc\n\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u09e2\n\u00cb\3\u00cb\3\u00cb\5"+
		"\u00cb\u09e6\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u09ea\n\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u09ee\n\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd"+
		"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\5\u00cf\u09ff\n\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d1\3\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3"+
		"\5\u00d3\u0a10\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u0a17\n\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7"+
		"\5\u00d7\u0a29\n\u00d7\3\u00d8\3\u00d8\3\u00d9\3\u00d9\5\u00d9\u0a2f\n"+
		"\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00df\3\u00df"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3"+
		"\3\u00e3\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\5\u00ed\u0a84\n\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0a8c\n\u00ee\f\u00ee\16\u00ee\u0a8f"+
		"\13\u00ee\3\u00ef\3\u00ef\5\u00ef\u0a93\n\u00ef\3\u00f0\3\u00f0\5\u00f0"+
		"\u0a97\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1"+
		"\u0a9f\n\u00f1\f\u00f1\16\u00f1\u0aa2\13\u00f1\3\u00f2\3\u00f2\3\u00f3"+
		"\3\u00f3\5\u00f3\u0aa8\n\u00f3\3\u00f4\3\u00f4\5\u00f4\u0aac\n\u00f4\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u0ab9\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0ac2\n\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u0ac6\n\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\5\u00f8\u0ad8\n\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ade\n"+
		"\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ae2\n\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ae6"+
		"\n\u00f8\3\u00f8\3\u00f8\5\u00f8\u0aea\n\u00f8\3\u00f8\3\u00f8\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0b06\n\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0b0c\n\u00fc\3\u00fc\3\u00fc\5\u00fc"+
		"\u0b10\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u0b14\n\u00fc\3\u00fc\3\u00fc\5"+
		"\u00fc\u0b18\n\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fe\3\u00fe\5"+
		"\u00fe\u0b20\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\5"+
		"\u0100\u0b28\n\u0100\3\u0100\5\u0100\u0b2b\n\u0100\3\u0100\5\u0100\u0b2e"+
		"\n\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0102\3\u0102\3\u0103\3\u0103"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u0b41\n\u0104\3\u0104\3\u0104\5\u0104\u0b45\n\u0104\3\u0104\3"+
		"\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u0b50\n\u0105\5\u0105\u0b52\n\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3"+
		"\u0107\3\u0107\5\u0107\u0b5a\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3"+
		"\u0108\5\u0108\u0b61\n\u0108\3\u0109\3\u0109\3\u0109\5\u0109\u0b66\n\u0109"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0b6f"+
		"\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010c"+
		"\5\u010c\u0b79\n\u010c\3\u010c\5\u010c\u0b7c\n\u010c\3\u010c\5\u010c\u0b7f"+
		"\n\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010e\3\u010e\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0b90"+
		"\n\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0b9e\n\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\7\u0112\u0ba6\n\u0112\f\u0112\16\u0112"+
		"\u0ba9\13\u0112\3\u0113\3\u0113\3\u0114\3\u0114\5\u0114\u0baf\n\u0114"+
		"\3\u0115\3\u0115\5\u0115\u0bb3\n\u0115\3\u0116\3\u0116\3\u0116\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\5\u0117\u0bbc\n\u0117\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\5\u0118\u0bc3\n\u0118\3\u0119\3\u0119\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\5\u011a\u0bcc\n\u011a\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\5\u011b\u0bd3\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\5\u011c\u0bda\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u0be1\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\5\u011e\u0bec\n\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\7\u011e\u0bf4\n\u011e\f\u011e\16\u011e\u0bf7"+
		"\13\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u0bff"+
		"\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u0c07"+
		"\n\u011f\f\u011f\16\u011f\u0c0a\13\u011f\3\u0120\5\u0120\u0c0d\n\u0120"+
		"\3\u0120\3\u0120\3\u0121\3\u0121\5\u0121\u0c13\n\u0121\3\u0121\5\u0121"+
		"\u0c16\n\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\7\u0125"+
		"\u0c27\n\u0125\f\u0125\16\u0125\u0c2a\13\u0125\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\7\u0126\u0c32\n\u0126\f\u0126\16\u0126\u0c35"+
		"\13\u0126\3\u0127\5\u0127\u0c38\n\u0127\3\u0127\3\u0127\3\u0128\3\u0128"+
		"\3\u0128\5\u0128\u0c3f\n\u0128\3\u0128\5\u0128\u0c42\n\u0128\3\u0129\3"+
		"\u0129\3\u012a\3\u012a\5\u012a\u0c48\n\u012a\3\u012b\3\u012b\5\u012b\u0c4c"+
		"\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\7\u012d\u0c58\n\u012d\f\u012d\16\u012d\u0c5b\13\u012d"+
		"\3\u012e\3\u012e\5\u012e\u0c5f\n\u012e\3\u012f\3\u012f\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\5\u0131\u0c6c"+
		"\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133"+
		"\7\u0133\u0c76\n\u0133\f\u0133\16\u0133\u0c79\13\u0133\3\u0134\3\u0134"+
		"\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u0c83\n\u0136"+
		"\3\u0136\3\u0136\5\u0136\u0c87\n\u0136\3\u0136\5\u0136\u0c8a\n\u0136\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\7\u0136"+
		"\u0c94\n\u0136\f\u0136\16\u0136\u0c97\13\u0136\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u0c9c\n\u0137\3\u0137\5\u0137\u0c9f\n\u0137\3\u0137\3\u0137\3"+
		"\u0137\3\u0137\7\u0137\u0ca5\n\u0137\f\u0137\16\u0137\u0ca8\13\u0137\3"+
		"\u0138\3\u0138\5\u0138\u0cac\n\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\5\u013b\u0cb8\n\u013b\3"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\7\u013d"+
		"\u0cc2\n\u013d\f\u013d\16\u013d\u0cc5\13\u013d\3\u013e\3\u013e\3\u013f"+
		"\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\5\u0141"+
		"\u0cd2\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u0ce0\n\u0142\3\u0143"+
		"\3\u0143\3\u0143\7\u0143\u0ce5\n\u0143\f\u0143\16\u0143\u0ce8\13\u0143"+
		"\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u0cfe\n\u0145\3\u0146\3\u0146\3\u0146\7\u0146"+
		"\u0d03\n\u0146\f\u0146\16\u0146\u0d06\13\u0146\3\u0147\3\u0147\5\u0147"+
		"\u0d0a\n\u0147\3\u0148\3\u0148\3\u0148\5\u0148\u0d0f\n\u0148\3\u0149\3"+
		"\u0149\5\u0149\u0d13\n\u0149\3\u014a\3\u014a\5\u014a\u0d17\n\u014a\3\u014b"+
		"\3\u014b\5\u014b\u0d1b\n\u014b\3\u014c\3\u014c\5\u014c\u0d1f\n\u014c\3"+
		"\u014d\3\u014d\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\7\u014f"+
		"\u0d29\n\u014f\f\u014f\16\u014f\u0d2c\13\u014f\3\u0150\3\u0150\3\u0150"+
		"\3\u0151\3\u0151\3\u0151\7\u0151\u0d34\n\u0151\f\u0151\16\u0151\u0d37"+
		"\13\u0151\3\u0152\3\u0152\5\u0152\u0d3b\n\u0152\3\u0152\5\u0152\u0d3e"+
		"\n\u0152\3\u0152\5\u0152\u0d41\n\u0152\3\u0152\5\u0152\u0d44\n\u0152\3"+
		"\u0153\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\7\u0154\u0d4c\n\u0154\f"+
		"\u0154\16\u0154\u0d4f\13\u0154\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155"+
		"\u0d55\n\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u0d5a\n\u0155\3\u0155\3"+
		"\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u0d61\n\u0155\3\u0155\3\u0155\3"+
		"\u0155\5\u0155\u0d66\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u0d6c"+
		"\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u0d74"+
		"\n\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u0d79\n\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\5\u0155\u0d80\n\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u0d85\n\u0155\7\u0155\u0d87\n\u0155\f\u0155\16\u0155\u0d8a\13"+
		"\u0155\3\u0156\3\u0156\5\u0156\u0d8e\n\u0156\3\u0157\3\u0157\3\u0157\3"+
		"\u0157\3\u0157\3\u0157\5\u0157\u0d96\n\u0157\3\u0158\3\u0158\3\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015c"+
		"\3\u015c\5\u015c\u0da5\n\u015c\3\u015c\5\u015c\u0da8\n\u015c\3\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u0daf\n\u015c\5\u015c\u0db1\n\u015c"+
		"\3\u015c\3\u015c\5\u015c\u0db5\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u0dbc\n\u015c\3\u015c\3\u015c\5\u015c\u0dc0\n\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u0dc7\n\u015c\3\u015c\3"+
		"\u015c\5\u015c\u0dcb\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5"+
		"\u015c\u0dd2\n\u015c\3\u015c\3\u015c\5\u015c\u0dd6\n\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\5\u015c\u0ddd\n\u015c\3\u015c\3\u015c\5\u015c"+
		"\u0de1\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u0de8\n"+
		"\u015c\5\u015c\u0dea\n\u015c\3\u015c\3\u015c\5\u015c\u0dee\n\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u0df5\n\u015c\5\u015c\u0df7\n"+
		"\u015c\5\u015c\u0df9\n\u015c\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u0e05\n\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\5\u015d\u0e12\n\u015d\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160"+
		"\3\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\7\u0163\u0e27\n\u0163\f\u0163"+
		"\16\u0163\u0e2a\13\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u0e2f\n\u0163"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0166\3\u0166"+
		"\5\u0166\u0e3a\n\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\7\u0168"+
		"\u0e41\n\u0168\f\u0168\16\u0168\u0e44\13\u0168\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u0e50"+
		"\n\u016a\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\7\u016d\u0e5d\n\u016d\f\u016d\16\u016d\u0e60"+
		"\13\u016d\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\5\u016f\u0e68"+
		"\n\u016f\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\3\u0172\3\u0172\3\u0172\5\u0172\u0e75\n\u0172\5\u0172\u0e77\n\u0172\3"+
		"\u0173\3\u0173\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0176\3\u0176"+
		"\3\u0176\5\u0176\u0e83\n\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177"+
		"\7\u0177\u0e8a\n\u0177\f\u0177\16\u0177\u0e8d\13\u0177\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\5\u0178\u0e94\n\u0178\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\5\u0179\u0e9b\n\u0179\3\u017a\3\u017a\5\u017a\u0e9f\n"+
		"\u017a\3\u017b\3\u017b\3\u017b\7\u017b\u0ea4\n\u017b\f\u017b\16\u017b"+
		"\u0ea7\13\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d"+
		"\3\u017d\7\u017d\u0eb1\n\u017d\f\u017d\16\u017d\u0eb4\13\u017d\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u0180\3\u0180\3\u0180\7\u0180\u0ec4\n\u0180\f\u0180\16\u0180"+
		"\u0ec7\13\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u0ece"+
		"\n\u0181\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183\3\u0184\3\u0184"+
		"\3\u0184\3\u0185\3\u0185\3\u0185\7\u0185\u0edc\n\u0185\f\u0185\16\u0185"+
		"\u0edf\13\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0187\3\u0187\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0189\5\u0189\u0eec\n\u0189\3\u0189\5\u0189"+
		"\u0eef\n\u0189\3\u0189\5\u0189\u0ef2\n\u0189\3\u0189\5\u0189\u0ef5\n\u0189"+
		"\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c"+
		"\7\u018c\u0f00\n\u018c\f\u018c\16\u018c\u0f03\13\u018c\3\u018d\3\u018d"+
		"\5\u018d\u0f07\n\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018f\3\u018f"+
		"\3\u018f\5\u018f\u0f10\n\u018f\3\u0190\3\u0190\3\u0191\3\u0191\5\u0191"+
		"\u0f16\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u0f1d\n"+
		"\u0192\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0195\3\u0195\3\u0196\3\u0196\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197"+
		"\u0f2f\n\u0197\3\u0198\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u0f3e\n\u0199"+
		"\3\u019a\3\u019a\5\u019a\u0f42\n\u019a\3\u019a\3\u019a\3\u019a\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\7\u019b\u0f4b\n\u019b\f\u019b\16\u019b\u0f4e"+
		"\13\u019b\5\u019b\u0f50\n\u019b\3\u019c\3\u019c\5\u019c\u0f54\n\u019c"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u0f5b\n\u019d\3\u019e"+
		"\3\u019e\3\u019e\7\u019e\u0f60\n\u019e\f\u019e\16\u019e\u0f63\13\u019e"+
		"\3\u019f\3\u019f\3\u01a0\3\u01a0\5\u01a0\u0f69\n\u01a0\3\u01a1\5\u01a1"+
		"\u0f6c\n\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u0f78\n\u01a2\3\u01a3\3\u01a3\3\u01a4"+
		"\5\u01a4\u0f7d\n\u01a4\3\u01a4\3\u01a4\5\u01a4\u0f81\n\u01a4\3\u01a4\5"+
		"\u01a4\u0f84\n\u01a4\3\u01a4\5\u01a4\u0f87\n\u01a4\3\u01a5\3\u01a5\5\u01a5"+
		"\u0f8b\n\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\7\u01a6\u0f92\n"+
		"\u01a6\f\u01a6\16\u01a6\u0f95\13\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\5\u01a7\u0f9c\n\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u0fa1\n"+
		"\u01a7\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u0fa8\n\u01a9\3"+
		"\u01a9\5\u01a9\u0fab\n\u01a9\3\u01a9\3\u01a9\5\u01a9\u0faf\n\u01a9\3\u01a9"+
		"\5\u01a9\u0fb2\n\u01a9\3\u01a9\5\u01a9\u0fb5\n\u01a9\3\u01a9\3\u01a9\3"+
		"\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u0fbd\n\u01a9\f\u01a9\16\u01a9"+
		"\u0fc0\13\u01a9\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u0fc5\n\u01aa\3\u01aa"+
		"\5\u01aa\u0fc8\n\u01aa\3\u01aa\5\u01aa\u0fcb\n\u01aa\3\u01aa\3\u01aa\3"+
		"\u01aa\7\u01aa\u0fd0\n\u01aa\f\u01aa\16\u01aa\u0fd3\13\u01aa\3\u01ab\3"+
		"\u01ab\3\u01ab\3\u01ab\5\u01ab\u0fd9\n\u01ab\3\u01ab\5\u01ab\u0fdc\n\u01ab"+
		"\3\u01ab\5\u01ab\u0fdf\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u0fe3\n\u01ab\3"+
		"\u01ac\3\u01ac\3\u01ac\5\u01ac\u0fe8\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3"+
		"\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u0ff3\n\u01ae\3"+
		"\u01af\3\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u1002\n\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\5\u01b2\u1008\n\u01b2\3\u01b3\3\u01b3\5\u01b3\u100c\n"+
		"\u01b3\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u101a\n\u01b7\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\5\u01b9\u1029\n\u01b9\3\u01ba\3\u01ba\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bc\3\u01bc\3\u01bc\7\u01bc\u103b\n\u01bc\f\u01bc\16\u01bc\u103e"+
		"\13\u01bc\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01c0\3\u01c0"+
		"\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1067\n\u01c6\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca"+
		"\3\u01cb\5\u01cb\u1075\n\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u107a\n"+
		"\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u1080\n\u01cb\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cd\5\u01cd\u1086\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3"+
		"\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1090\n\u01ce\3\u01cf\3"+
		"\u01cf\3\u01cf\7\u01cf\u1095\n\u01cf\f\u01cf\16\u01cf\u1098\13\u01cf\3"+
		"\u01d0\3\u01d0\5\u01d0\u109c\n\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d2\5"+
		"\u01d2\u10a2\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u10a8\n\u01d2"+
		"\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d6\5\u01d6"+
		"\u10b2\n\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u10b8\n\u01d6\3"+
		"\u01d7\3\u01d7\3\u01d8\3\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01da\5\u01da"+
		"\u10c2\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u10c9\n"+
		"\u01da\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\7\u01dc\u10d3\n\u01dc\f\u01dc\16\u01dc\u10d6\13\u01dc\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\7\u01dd\u10dd\n\u01dd\f\u01dd\16\u01dd\u10e0"+
		"\13\u01dd\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\5\u01de\u10ef\n\u01de\3\u01df"+
		"\3\u01df\3\u01df\5\u01df\u10f4\n\u01df\3\u01df\3\u01df\3\u01e0\3\u01e0"+
		"\5\u01e0\u10fa\n\u01e0\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e3\3\u01e3"+
		"\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u1107\n\u01e3\3\u01e4"+
		"\3\u01e4\3\u01e5\3\u01e5\3\u01e5\6\u01e5\u110e\n\u01e5\r\u01e5\16\u01e5"+
		"\u110f\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\6\u01e5\u1117\n\u01e5\r"+
		"\u01e5\16\u01e5\u1118\3\u01e5\3\u01e5\3\u01e5\3\u01e5\6\u01e5\u111f\n"+
		"\u01e5\r\u01e5\16\u01e5\u1120\3\u01e5\3\u01e5\6\u01e5\u1125\n\u01e5\r"+
		"\u01e5\16\u01e5\u1126\3\u01e5\3\u01e5\5\u01e5\u112b\n\u01e5\3\u01e6\3"+
		"\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u113c\n\u01e8\3\u01e9"+
		"\3\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01eb\5\u01eb\u1144\n\u01eb\3\u01eb"+
		"\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u114a\n\u01eb\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ed\3\u01ed\5\u01ed\u1151\n\u01ed\3\u01ed\3\u01ed\3\u01ee\3\u01ee"+
		"\3\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01f0\3\u01f0\5\u01f0\u115e"+
		"\n\u01f0\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3\3\u01f4"+
		"\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f6\3\u01f6\5\u01f6\u116f"+
		"\n\u01f6\3\u01f6\5\u01f6\u1172\n\u01f6\3\u01f6\3\u01f6\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f8\3\u01f8\5\u01f8\u117b\n\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\5\u01f8\u1180\n\u01f8\3\u01f8\5\u01f8\u1183\n\u01f8\3\u01f9\3\u01f9\3"+
		"\u01f9\3\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fd"+
		"\3\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01ff\3\u01ff\5\u01ff\u1196\n\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u0200\3\u0200\3\u0201\3\u0201\3\u0202"+
		"\3\u0202\3\u0202\3\u0203\5\u0203\u11a4\n\u0203\3\u0203\3\u0203\5\u0203"+
		"\u11a8\n\u0203\3\u0203\3\u0203\3\u0204\3\u0204\3\u0204\3\u0205\5\u0205"+
		"\u11b0\n\u0205\3\u0205\3\u0205\5\u0205\u11b4\n\u0205\3\u0205\3\u0205\3"+
		"\u0206\3\u0206\3\u0206\3\u0207\3\u0207\5\u0207\u11bd\n\u0207\3\u0207\3"+
		"\u0207\3\u0207\3\u0208\3\u0208\3\u0208\3\u0209\3\u0209\5\u0209\u11c7\n"+
		"\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u020a\3\u020a\3\u020a"+
		"\7\u020a\u11d1\n\u020a\f\u020a\16\u020a\u11d4\13\u020a\3\u020b\3\u020b"+
		"\5\u020b\u11d8\n\u020b\3\u020c\3\u020c\3\u020d\3\u020d\3\u020d\3\u020e"+
		"\3\u020e\3\u020e\3\u020e\3\u020e\3\u020e\3\u020e\5\u020e\u11e6\n\u020e"+
		"\3\u020f\3\u020f\3\u020f\3\u0210\3\u0210\3\u0210\3\u0211\3\u0211\3\u0212"+
		"\3\u0212\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213"+
		"\5\u0213\u11fa\n\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0216\3\u0216"+
		"\3\u0217\3\u0217\3\u0217\3\u0218\3\u0218\3\u0218\3\u0219\3\u0219\3\u0219"+
		"\3\u021a\3\u021a\3\u021a\3\u021b\3\u021b\5\u021b\u1210\n\u021b\3\u021c"+
		"\3\u021c\3\u021c\3\u021d\3\u021d\3\u021d\3\u021e\3\u021e\3\u021e\3\u021f"+
		"\3\u021f\3\u021f\3\u0220\3\u0220\3\u0220\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0222\3\u0222\3\u0222\3\u0223\3\u0223\3\u0223\3\u0223\3\u0224\3\u0224"+
		"\3\u0225\3\u0225\3\u0225\3\u0226\3\u0226\3\u0227\3\u0227\3\u0227\3\u0228"+
		"\3\u0228\3\u0228\7\u0228\u1239\n\u0228\f\u0228\16\u0228\u123c\13\u0228"+
		"\3\u0229\3\u0229\3\u0229\3\u022a\3\u022a\3\u022a\5\u022a\u1244\n\u022a"+
		"\3\u022a\3\u022a\3\u022b\3\u022b\3\u022b\3\u022b\7\u022b\u124c\n\u022b"+
		"\f\u022b\16\u022b\u124f\13\u022b\5\u022b\u1251\n\u022b\3\u022b\3\u022b"+
		"\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\5\u022c\u125a\n\u022c\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022e\3\u022e\3\u022e\3\u022e\3\u022f\3\u022f"+
		"\3\u022f\5\u022f\u1267\n\u022f\3\u0230\3\u0230\3\u0230\5\u0230\u126c\n"+
		"\u0230\3\u0231\3\u0231\3\u0232\3\u0232\3\u0233\3\u0233\3\u0234\3\u0234"+
		"\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\5\u0234\u127c\n\u0234"+
		"\5\u0234\u127e\n\u0234\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235"+
		"\5\u0235\u1286\n\u0235\3\u0235\5\u0235\u1289\n\u0235\3\u0236\3\u0236\5"+
		"\u0236\u128d\n\u0236\3\u0237\3\u0237\5\u0237\u1291\n\u0237\3\u0238\3\u0238"+
		"\3\u0238\3\u0238\7\u0238\u1297\n\u0238\f\u0238\16\u0238\u129a\13\u0238"+
		"\5\u0238\u129c\n\u0238\3\u0238\3\u0238\3\u0239\3\u0239\3\u0239\3\u023a"+
		"\3\u023a\3\u023a\3\u023b\3\u023b\5\u023b\u12a8\n\u023b\3\u023b\5\u023b"+
		"\u12ab\n\u023b\3\u023b\5\u023b\u12ae\n\u023b\3\u023b\5\u023b\u12b1\n\u023b"+
		"\3\u023b\3\u023b\5\u023b\u12b5\n\u023b\3\u023b\5\u023b\u12b8\n\u023b\3"+
		"\u023b\5\u023b\u12bb\n\u023b\3\u023c\3\u023c\3\u023c\3\u023c\5\u023c\u12c1"+
		"\n\u023c\3\u023d\5\u023d\u12c4\n\u023d\3\u023d\3\u023d\3\u023e\3\u023e"+
		"\3\u023e\3\u023e\3\u023e\5\u023e\u12cd\n\u023e\3\u023e\3\u023e\5\u023e"+
		"\u12d1\n\u023e\3\u023e\3\u023e\5\u023e\u12d5\n\u023e\3\u023e\3\u023e\5"+
		"\u023e\u12d9\n\u023e\3\u023e\3\u023e\5\u023e\u12dd\n\u023e\5\u023e\u12df"+
		"\n\u023e\3\u023f\3\u023f\3\u023f\5\u023f\u12e4\n\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u0240\3\u0240\3\u0241\3\u0241\3\u0242\3\u0242\3\u0243\3\u0243"+
		"\3\u0243\3\u0243\3\u0243\3\u0243\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244"+
		"\3\u0244\3\u0244\3\u0245\3\u0245\3\u0246\3\u0246\3\u0247\3\u0247\3\u0248"+
		"\3\u0248\5\u0248\u1304\n\u0248\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249"+
		"\3\u0249\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024b\3\u024b\3\u024b\7\u024b\u1317\n\u024b\f\u024b\16\u024b\u131a"+
		"\13\u024b\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024d\3\u024d"+
		"\3\u024e\3\u024e\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\5\u024f"+
		"\u132c\n\u024f\3\u024f\3\u024f\3\u0250\3\u0250\3\u0250\7\u0250\u1333\n"+
		"\u0250\f\u0250\16\u0250\u1336\13\u0250\3\u0251\3\u0251\5\u0251\u133a\n"+
		"\u0251\3\u0251\5\u0251\u133d\n\u0251\3\u0252\3\u0252\3\u0253\3\u0253\3"+
		"\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u1347\n\u0254\3\u0255\3\u0255\3"+
		"\u0255\3\u0255\3\u0255\3\u0255\3\u0256\5\u0256\u1350\n\u0256\3\u0256\5"+
		"\u0256\u1353\n\u0256\3\u0256\3\u0256\5\u0256\u1357\n\u0256\3\u0256\5\u0256"+
		"\u135a\n\u0256\3\u0257\3\u0257\3\u0258\3\u0258\3\u0258\5\u0258\u1361\n"+
		"\u0258\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u1367\n\u0259\3\u025a\3"+
		"\u025a\3\u025a\3\u025a\5\u025a\u136d\n\u025a\3\u025b\3\u025b\5\u025b\u1371"+
		"\n\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c\u1379"+
		"\n\u025c\5\u025c\u137b\n\u025c\3\u025d\3\u025d\3\u025d\3\u025e\3\u025e"+
		"\5\u025e\u1382\n\u025e\3\u025e\5\u025e\u1385\n\u025e\3\u025e\3\u025e\3"+
		"\u025e\3\u025e\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f"+
		"\u1391\n\u025f\3\u0260\3\u0260\3\u0260\7\u0260\u1396\n\u0260\f\u0260\16"+
		"\u0260\u1399\13\u0260\3\u0261\3\u0261\3\u0261\3\u0262\3\u0262\5\u0262"+
		"\u13a0\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0263\3\u0263"+
		"\3\u0263\7\u0263\u13aa\n\u0263\f\u0263\16\u0263\u13ad\13\u0263\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\5\u0264\u13b3\n\u0264\3\u0264\5\u0264\u13b6\n"+
		"\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0265\3\u0265\3\u0265"+
		"\3\u0265\3\u0265\3\u0265\5\u0265\u13c3\n\u0265\3\u0266\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266"+
		"\5\u0266\u13d1\n\u0266\3\u0266\5\u0266\u13d4\n\u0266\3\u0266\5\u0266\u13d7"+
		"\n\u0266\3\u0266\3\u0266\5\u0266\u13db\n\u0266\3\u0267\3\u0267\3\u0267"+
		"\3\u0267\5\u0267\u13e1\n\u0267\3\u0268\3\u0268\3\u0268\3\u0268\5\u0268"+
		"\u13e7\n\u0268\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u026a\3\u026a"+
		"\3\u026b\3\u026b\3\u026b\5\u026b\u13f3\n\u026b\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\5\u026c\u13f9\n\u026c\3\u026c\5\u026c\u13fc\n\u026c\3\u026c\3"+
		"\u026c\3\u026d\3\u026d\3\u026d\3\u026d\5\u026d\u1404\n\u026d\3\u026d\5"+
		"\u026d\u1407\n\u026d\3\u026d\3\u026d\3\u026e\3\u026e\3\u026e\3\u026e\3"+
		"\u026e\3\u026e\5\u026e\u1411\n\u026e\3\u026f\3\u026f\3\u026f\3\u0270\3"+
		"\u0270\3\u0271\3\u0271\3\u0271\3\u0271\5\u0271\u141c\n\u0271\3\u0271\5"+
		"\u0271\u141f\n\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3"+
		"\u0272\3\u0272\3\u0273\6\u0273\u142a\n\u0273\r\u0273\16\u0273\u142b\3"+
		"\u0274\3\u0274\5\u0274\u1430\n\u0274\3\u0275\3\u0275\3\u0275\3\u0275\5"+
		"\u0275\u1436\n\u0275\3\u0275\3\u0275\3\u0275\3\u0276\3\u0276\5\u0276\u143d"+
		"\n\u0276\3\u0277\3\u0277\3\u0277\3\u0277\3\u0277\5\u0277\u1444\n\u0277"+
		"\3\u0277\3\u0277\3\u0277\3\u0278\3\u0278\3\u0278\3\u0278\3\u0279\3\u0279"+
		"\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\5\u027a\u1454\n\u027a\3\u027a"+
		"\5\u027a\u1457\n\u027a\3\u027a\3\u027a\3\u027a\3\u027b\3\u027b\3\u027b"+
		"\3\u027b\7\u027b\u1460\n\u027b\f\u027b\16\u027b\u1463\13\u027b\3\u027b"+
		"\3\u027b\3\u027c\3\u027c\5\u027c\u1469\n\u027c\3\u027d\3\u027d\3\u027d"+
		"\5\u027d\u146e\n\u027d\3\u027d\5\u027d\u1471\n\u027d\3\u027d\3\u027d\3"+
		"\u027d\3\u027d\3\u027d\3\u027d\3\u027d\3\u027e\3\u027e\3\u027e\3\u027e"+
		"\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e\5\u027e\u1485"+
		"\n\u027e\3\u027e\5\u027e\u1488\n\u027e\3\u027e\5\u027e\u148b\n\u027e\3"+
		"\u027e\3\u027e\3\u027e\3\u027e\5\u027e\u1491\n\u027e\3\u027f\3\u027f\3"+
		"\u027f\7\u027f\u1496\n\u027f\f\u027f\16\u027f\u1499\13\u027f\3\u0280\3"+
		"\u0280\3\u0280\3\u0280\3\u0280\5\u0280\u14a0\n\u0280\3\u0281\3\u0281\5"+
		"\u0281\u14a4\n\u0281\3\u0282\3\u0282\3\u0282\3\u0282\3\u0283\3\u0283\3"+
		"\u0283\3\u0283\7\u0283\u14ae\n\u0283\f\u0283\16\u0283\u14b1\13\u0283\3"+
		"\u0283\3\u0283\3\u0284\3\u0284\3\u0285\3\u0285\3\u0285\3\u0285\3\u0285"+
		"\3\u0285\5\u0285\u14bd\n\u0285\3\u0286\3\u0286\3\u0287\3\u0287\3\u0287"+
		"\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\7\u0287\u14c9\n\u0287\f\u0287"+
		"\16\u0287\u14cc\13\u0287\3\u0288\3\u0288\5\u0288\u14d0\n\u0288\3\u0289"+
		"\3\u0289\3\u0289\3\u028a\3\u028a\3\u028a\3\u028b\3\u028b\5\u028b\u14da"+
		"\n\u028b\3\u028c\3\u028c\3\u028c\3\u028c\3\u028c\7\u028c\u14e1\n\u028c"+
		"\f\u028c\16\u028c\u14e4\13\u028c\5\u028c\u14e6\n\u028c\3\u028d\3\u028d"+
		"\5\u028d\u14ea\n\u028d\3\u028d\3\u028d\3\u028d\3\u028e\3\u028e\3\u028e"+
		"\7\u028e\u14f2\n\u028e\f\u028e\16\u028e\u14f5\13\u028e\5\u028e\u14f7\n"+
		"\u028e\3\u028f\3\u028f\3\u028f\5\u028f\u14fc\n\u028f\3\u0290\3\u0290\3"+
		"\u0290\3\u0290\5\u0290\u1502\n\u0290\3\u0291\3\u0291\3\u0291\3\u0291\3"+
		"\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\5\u0292\u150f\n"+
		"\u0292\3\u0293\3\u0293\3\u0293\3\u0293\3\u0294\3\u0294\3\u0295\3\u0295"+
		"\3\u0295\3\u0295\3\u0295\3\u0296\3\u0296\3\u0296\3\u0296\7\u0296\u1520"+
		"\n\u0296\f\u0296\16\u0296\u1523\13\u0296\5\u0296\u1525\n\u0296\3\u0297"+
		"\3\u0297\3\u0297\3\u0298\3\u0298\3\u0299\3\u0299\3\u0299\3\u0299\3\u029a"+
		"\3\u029a\5\u029a\u1532\n\u029a\3\u029a\3\u029a\5\u029a\u1536\n\u029a\3"+
		"\u029a\5\u029a\u1539\n\u029a\3\u029b\3\u029b\5\u029b\u153d\n\u029b\3\u029b"+
		"\3\u029b\5\u029b\u1541\n\u029b\3\u029b\5\u029b\u1544\n\u029b\3\u029b\5"+
		"\u029b\u1547\n\u029b\3\u029c\3\u029c\3\u029c\3\u029c\3\u029d\3\u029d\3"+
		"\u029d\3\u029e\3\u029e\3\u029f\3\u029f\3\u029f\3\u029f\3\u029f\3\u029f"+
		"\5\u029f\u1558\n\u029f\3\u02a0\3\u02a0\3\u02a1\3\u02a1\3\u02a2\3\u02a2"+
		"\3\u02a2\3\u02a3\3\u02a3\3\u02a3\3\u02a3\3\u02a3\3\u02a4\3\u02a4\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a6\3\u02a6\3\u02a7"+
		"\3\u02a7\3\u02a8\3\u02a8\3\u02a8\3\u02a8\3\u02a8\3\u02a8\2\26\u0086\u00c4"+
		"\u0180\u0182\u01da\u01e0\u0222\u023a\u023c\u0248\u024a\u0258\u026a\u026c"+
		"\u02a8\u0350\u0352\u03b6\u03b8\u050c\u02a9\2\4\6\b\n\f\16\20\22\24\26"+
		"\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|"+
		"~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096"+
		"\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae"+
		"\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6"+
		"\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de"+
		"\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6"+
		"\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e"+
		"\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126"+
		"\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e"+
		"\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156"+
		"\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e"+
		"\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186"+
		"\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e"+
		"\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6"+
		"\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce"+
		"\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6"+
		"\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe"+
		"\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216"+
		"\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e"+
		"\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246"+
		"\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e"+
		"\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276"+
		"\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e"+
		"\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6"+
		"\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be"+
		"\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6"+
		"\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee"+
		"\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306"+
		"\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e"+
		"\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336"+
		"\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e"+
		"\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366"+
		"\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e"+
		"\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396"+
		"\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae"+
		"\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6"+
		"\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de"+
		"\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6"+
		"\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e"+
		"\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426"+
		"\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e"+
		"\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456"+
		"\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e"+
		"\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486"+
		"\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e"+
		"\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6"+
		"\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce"+
		"\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6"+
		"\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe"+
		"\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516"+
		"\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c\u052e"+
		"\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542\u0544\u0546"+
		"\u0548\u054a\u054c\u054e\2%\4\2\u016c\u016c\u016e\u016e\3\2\u0197\u0199"+
		"\3\2\5\6\3\2\37 \3\2?B\3\2DE\3\2IJ\3\2QV\3\2lm\3\2op\3\2st\3\2~\177\3"+
		"\2\u0085\u0086\3\2\u008c\u008e\3\2\u0092\u0095\3\2\u00a0\u00a2\3\2\u00ae"+
		"\u00af\4\2bb\u00bb\u00bc\3\2\u00c2\u00c4\3\2\u00cc\u00ce\4\2))\u00cc\u00cc"+
		"\4\2MM``\4\2\u0174\u0176\u0188\u018a\3\2\u019c\u019d\3\2\u00e3\u00e4\3"+
		"\2\u00f6\u00fe\4\2\u00e3\u00e4\u010f\u011b\4\2\u008a\u008a\u00a5\u00a5"+
		"\3\2\u011d\u0128\3\2\u012a\u012b\3\2\u012d\u012e\3\2\u0131\u0133\3\2\u013c"+
		"\u013d\3\2\u010c\u010d\3\2\u015a\u0162\2\u15a4\2\u0550\3\2\2\2\4\u0554"+
		"\3\2\2\2\6\u0558\3\2\2\2\b\u0560\3\2\2\2\n\u0563\3\2\2\2\f\u0569\3\2\2"+
		"\2\16\u0574\3\2\2\2\20\u0576\3\2\2\2\22\u0578\3\2\2\2\24\u057c\3\2\2\2"+
		"\26\u057e\3\2\2\2\30\u0581\3\2\2\2\32\u0585\3\2\2\2\34\u0587\3\2\2\2\36"+
		"\u058c\3\2\2\2 \u0590\3\2\2\2\"\u0592\3\2\2\2$\u0594\3\2\2\2&\u0599\3"+
		"\2\2\2(\u059d\3\2\2\2*\u059f\3\2\2\2,\u05a4\3\2\2\2.\u05ab\3\2\2\2\60"+
		"\u05b1\3\2\2\2\62\u05b3\3\2\2\2\64\u05b5\3\2\2\2\66\u05b7\3\2\2\28\u05b9"+
		"\3\2\2\2:\u05bb\3\2\2\2<\u05bd\3\2\2\2>\u05bf\3\2\2\2@\u05c1\3\2\2\2B"+
		"\u05c3\3\2\2\2D\u05c5\3\2\2\2F\u05ca\3\2\2\2H\u05ce\3\2\2\2J\u05d0\3\2"+
		"\2\2L\u05d3\3\2\2\2N\u05d5\3\2\2\2P\u05d9\3\2\2\2R\u05db\3\2\2\2T\u05dd"+
		"\3\2\2\2V\u05e2\3\2\2\2X\u05e6\3\2\2\2Z\u05e8\3\2\2\2\\\u05ea\3\2\2\2"+
		"^\u05ef\3\2\2\2`\u05f3\3\2\2\2b\u05f5\3\2\2\2d\u05f7\3\2\2\2f\u05f9\3"+
		"\2\2\2h\u05fb\3\2\2\2j\u05fd\3\2\2\2l\u05ff\3\2\2\2n\u0601\3\2\2\2p\u0603"+
		"\3\2\2\2r\u0607\3\2\2\2t\u0609\3\2\2\2v\u060c\3\2\2\2x\u0612\3\2\2\2z"+
		"\u0615\3\2\2\2|\u061b\3\2\2\2~\u061d\3\2\2\2\u0080\u0620\3\2\2\2\u0082"+
		"\u0624\3\2\2\2\u0084\u0626\3\2\2\2\u0086\u062d\3\2\2\2\u0088\u064c\3\2"+
		"\2\2\u008a\u066e\3\2\2\2\u008c\u0689\3\2\2\2\u008e\u069e\3\2\2\2\u0090"+
		"\u06b0\3\2\2\2\u0092\u06b4\3\2\2\2\u0094\u06db\3\2\2\2\u0096\u06e7\3\2"+
		"\2\2\u0098\u06e9\3\2\2\2\u009a\u06eb\3\2\2\2\u009c\u06f4\3\2\2\2\u009e"+
		"\u06f6\3\2\2\2\u00a0\u06fa\3\2\2\2\u00a2\u06fc\3\2\2\2\u00a4\u06fe\3\2"+
		"\2\2\u00a6\u0700\3\2\2\2\u00a8\u0717\3\2\2\2\u00aa\u071f\3\2\2\2\u00ac"+
		"\u0721\3\2\2\2\u00ae\u0723\3\2\2\2\u00b0\u0725\3\2\2\2\u00b2\u0727\3\2"+
		"\2\2\u00b4\u072a\3\2\2\2\u00b6\u072d\3\2\2\2\u00b8\u0738\3\2\2\2\u00ba"+
		"\u073f\3\2\2\2\u00bc\u0742\3\2\2\2\u00be\u0744\3\2\2\2\u00c0\u0746\3\2"+
		"\2\2\u00c2\u0748\3\2\2\2\u00c4\u0763\3\2\2\2\u00c6\u0785\3\2\2\2\u00c8"+
		"\u078b\3\2\2\2\u00ca\u078f\3\2\2\2\u00cc\u0793\3\2\2\2\u00ce\u07a6\3\2"+
		"\2\2\u00d0\u07ac\3\2\2\2\u00d2\u07b4\3\2\2\2\u00d4\u07ba\3\2\2\2\u00d6"+
		"\u07bc\3\2\2\2\u00d8\u07c0\3\2\2\2\u00da\u07c2\3\2\2\2\u00dc\u07c7\3\2"+
		"\2\2\u00de\u07cc\3\2\2\2\u00e0\u07d0\3\2\2\2\u00e2\u07d7\3\2\2\2\u00e4"+
		"\u07d9\3\2\2\2\u00e6\u07e1\3\2\2\2\u00e8\u07e5\3\2\2\2\u00ea\u07e7\3\2"+
		"\2\2\u00ec\u07ef\3\2\2\2\u00ee\u07f1\3\2\2\2\u00f0\u07f3\3\2\2\2\u00f2"+
		"\u07fb\3\2\2\2\u00f4\u0804\3\2\2\2\u00f6\u0806\3\2\2\2\u00f8\u080a\3\2"+
		"\2\2\u00fa\u080c\3\2\2\2\u00fc\u0818\3\2\2\2\u00fe\u0828\3\2\2\2\u0100"+
		"\u082a\3\2\2\2\u0102\u082c\3\2\2\2\u0104\u0833\3\2\2\2\u0106\u0835\3\2"+
		"\2\2\u0108\u0844\3\2\2\2\u010a\u0846\3\2\2\2\u010c\u0848\3\2\2\2\u010e"+
		"\u084a\3\2\2\2\u0110\u0850\3\2\2\2\u0112\u0852\3\2\2\2\u0114\u0859\3\2"+
		"\2\2\u0116\u085b\3\2\2\2\u0118\u0869\3\2\2\2\u011a\u086f\3\2\2\2\u011c"+
		"\u0873\3\2\2\2\u011e\u0875\3\2\2\2\u0120\u0879\3\2\2\2\u0122\u087b\3\2"+
		"\2\2\u0124\u0880\3\2\2\2\u0126\u088b\3\2\2\2\u0128\u088d\3\2\2\2\u012a"+
		"\u0895\3\2\2\2\u012c\u0899\3\2\2\2\u012e\u089b\3\2\2\2\u0130\u089f\3\2"+
		"\2\2\u0132\u08b3\3\2\2\2\u0134\u08b7\3\2\2\2\u0136\u08b9\3\2\2\2\u0138"+
		"\u08c5\3\2\2\2\u013a\u08d0\3\2\2\2\u013c\u08d5\3\2\2\2\u013e\u08da\3\2"+
		"\2\2\u0140\u08df\3\2\2\2\u0142\u08e1\3\2\2\2\u0144\u08fb\3\2\2\2\u0146"+
		"\u08ff\3\2\2\2\u0148\u0901\3\2\2\2\u014a\u0903\3\2\2\2\u014c\u090c\3\2"+
		"\2\2\u014e\u0910\3\2\2\2\u0150\u0912\3\2\2\2\u0152\u0917\3\2\2\2\u0154"+
		"\u091e\3\2\2\2\u0156\u0922\3\2\2\2\u0158\u0926\3\2\2\2\u015a\u0928\3\2"+
		"\2\2\u015c\u092e\3\2\2\2\u015e\u0938\3\2\2\2\u0160\u093a\3\2\2\2\u0162"+
		"\u093c\3\2\2\2\u0164\u0942\3\2\2\2\u0166\u0944\3\2\2\2\u0168\u094a\3\2"+
		"\2\2\u016a\u094c\3\2\2\2\u016c\u094e\3\2\2\2\u016e\u0952\3\2\2\2\u0170"+
		"\u0957\3\2\2\2\u0172\u095c\3\2\2\2\u0174\u0961\3\2\2\2\u0176\u0969\3\2"+
		"\2\2\u0178\u0972\3\2\2\2\u017a\u0974\3\2\2\2\u017c\u0976\3\2\2\2\u017e"+
		"\u097a\3\2\2\2\u0180\u097c\3\2\2\2\u0182\u098a\3\2\2\2\u0184\u0999\3\2"+
		"\2\2\u0186\u099f\3\2\2\2\u0188\u09b4\3\2\2\2\u018a\u09b8\3\2\2\2\u018c"+
		"\u09ba\3\2\2\2\u018e\u09cd\3\2\2\2\u0190\u09cf\3\2\2\2\u0192\u09d1\3\2"+
		"\2\2\u0194\u09d3\3\2\2\2\u0196\u09f1\3\2\2\2\u0198\u09f3\3\2\2\2\u019a"+
		"\u09f5\3\2\2\2\u019c\u09f7\3\2\2\2\u019e\u0a02\3\2\2\2\u01a0\u0a04\3\2"+
		"\2\2\u01a2\u0a06\3\2\2\2\u01a4\u0a0f\3\2\2\2\u01a6\u0a11\3\2\2\2\u01a8"+
		"\u0a1a\3\2\2\2\u01aa\u0a1f\3\2\2\2\u01ac\u0a28\3\2\2\2\u01ae\u0a2a\3\2"+
		"\2\2\u01b0\u0a2e\3\2\2\2\u01b2\u0a30\3\2\2\2\u01b4\u0a35\3\2\2\2\u01b6"+
		"\u0a3a\3\2\2\2\u01b8\u0a3f\3\2\2\2\u01ba\u0a46\3\2\2\2\u01bc\u0a48\3\2"+
		"\2\2\u01be\u0a4a\3\2\2\2\u01c0\u0a4f\3\2\2\2\u01c2\u0a54\3\2\2\2\u01c4"+
		"\u0a5b\3\2\2\2\u01c6\u0a5d\3\2\2\2\u01c8\u0a5f\3\2\2\2\u01ca\u0a64\3\2"+
		"\2\2\u01cc\u0a69\3\2\2\2\u01ce\u0a6e\3\2\2\2\u01d0\u0a79\3\2\2\2\u01d2"+
		"\u0a7b\3\2\2\2\u01d4\u0a7d\3\2\2\2\u01d6\u0a7f\3\2\2\2\u01d8\u0a83\3\2"+
		"\2\2\u01da\u0a85\3\2\2\2\u01dc\u0a90\3\2\2\2\u01de\u0a96\3\2\2\2\u01e0"+
		"\u0a98\3\2\2\2\u01e2\u0aa3\3\2\2\2\u01e4\u0aa7\3\2\2\2\u01e6\u0aab\3\2"+
		"\2\2\u01e8\u0ab8\3\2\2\2\u01ea\u0aba\3\2\2\2\u01ec\u0ac9\3\2\2\2\u01ee"+
		"\u0ad2\3\2\2\2\u01f0\u0aed\3\2\2\2\u01f2\u0af2\3\2\2\2\u01f4\u0af9\3\2"+
		"\2\2\u01f6\u0b00\3\2\2\2\u01f8\u0b1b\3\2\2\2\u01fa\u0b1f\3\2\2\2\u01fc"+
		"\u0b21\3\2\2\2\u01fe\u0b2d\3\2\2\2\u0200\u0b31\3\2\2\2\u0202\u0b33\3\2"+
		"\2\2\u0204\u0b35\3\2\2\2\u0206\u0b37\3\2\2\2\u0208\u0b48\3\2\2\2\u020a"+
		"\u0b55\3\2\2\2\u020c\u0b59\3\2\2\2\u020e\u0b5b\3\2\2\2\u0210\u0b65\3\2"+
		"\2\2\u0212\u0b67\3\2\2\2\u0214\u0b72\3\2\2\2\u0216\u0b7e\3\2\2\2\u0218"+
		"\u0b82\3\2\2\2\u021a\u0b84\3\2\2\2\u021c\u0b86\3\2\2\2\u021e\u0b93\3\2"+
		"\2\2\u0220\u0b95\3\2\2\2\u0222\u0b9d\3\2\2\2\u0224\u0baa\3\2\2\2\u0226"+
		"\u0bac\3\2\2\2\u0228\u0bb2\3\2\2\2\u022a\u0bb4\3\2\2\2\u022c\u0bbb\3\2"+
		"\2\2\u022e\u0bc2\3\2\2\2\u0230\u0bc4\3\2\2\2\u0232\u0bc6\3\2\2\2\u0234"+
		"\u0bcd\3\2\2\2\u0236\u0bd4\3\2\2\2\u0238\u0bdb\3\2\2\2\u023a\u0beb\3\2"+
		"\2\2\u023c\u0bfe\3\2\2\2\u023e\u0c0c\3\2\2\2\u0240\u0c15\3\2\2\2\u0242"+
		"\u0c17\3\2\2\2\u0244\u0c19\3\2\2\2\u0246\u0c1b\3\2\2\2\u0248\u0c20\3\2"+
		"\2\2\u024a\u0c2b\3\2\2\2\u024c\u0c37\3\2\2\2\u024e\u0c3b\3\2\2\2\u0250"+
		"\u0c43\3\2\2\2\u0252\u0c47\3\2\2\2\u0254\u0c4b\3\2\2\2\u0256\u0c4d\3\2"+
		"\2\2\u0258\u0c51\3\2\2\2\u025a\u0c5e\3\2\2\2\u025c\u0c60\3\2\2\2\u025e"+
		"\u0c62\3\2\2\2\u0260\u0c6b\3\2\2\2\u0262\u0c6d\3\2\2\2\u0264\u0c72\3\2"+
		"\2\2\u0266\u0c7a\3\2\2\2\u0268\u0c7c\3\2\2\2\u026a\u0c89\3\2\2\2\u026c"+
		"\u0c9e\3\2\2\2\u026e\u0cab\3\2\2\2\u0270\u0cad\3\2\2\2\u0272\u0caf\3\2"+
		"\2\2\u0274\u0cb7\3\2\2\2\u0276\u0cb9\3\2\2\2\u0278\u0cbe\3\2\2\2\u027a"+
		"\u0cc6\3\2\2\2\u027c\u0cc8\3\2\2\2\u027e\u0ccb\3\2\2\2\u0280\u0cd1\3\2"+
		"\2\2\u0282\u0cdf\3\2\2\2\u0284\u0ce1\3\2\2\2\u0286\u0ce9\3\2\2\2\u0288"+
		"\u0cfd\3\2\2\2\u028a\u0cff\3\2\2\2\u028c\u0d09\3\2\2\2\u028e\u0d0e\3\2"+
		"\2\2\u0290\u0d12\3\2\2\2\u0292\u0d16\3\2\2\2\u0294\u0d1a\3\2\2\2\u0296"+
		"\u0d1e\3\2\2\2\u0298\u0d20\3\2\2\2\u029a\u0d22\3\2\2\2\u029c\u0d25\3\2"+
		"\2\2\u029e\u0d2d\3\2\2\2\u02a0\u0d30\3\2\2\2\u02a2\u0d38\3\2\2\2\u02a4"+
		"\u0d45\3\2\2\2\u02a6\u0d48\3\2\2\2\u02a8\u0d6b\3\2\2\2\u02aa\u0d8b\3\2"+
		"\2\2\u02ac\u0d8f\3\2\2\2\u02ae\u0d97\3\2\2\2\u02b0\u0d99\3\2\2\2\u02b2"+
		"\u0d9e\3\2\2\2\u02b4\u0da0\3\2\2\2\u02b6\u0df8\3\2\2\2\u02b8\u0e11\3\2"+
		"\2\2\u02ba\u0e13\3\2\2\2\u02bc\u0e15\3\2\2\2\u02be\u0e17\3\2\2\2\u02c0"+
		"\u0e19\3\2\2\2\u02c2\u0e1e\3\2\2\2\u02c4\u0e21\3\2\2\2\u02c6\u0e30\3\2"+
		"\2\2\u02c8\u0e35\3\2\2\2\u02ca\u0e39\3\2\2\2\u02cc\u0e3b\3\2\2\2\u02ce"+
		"\u0e3d\3\2\2\2\u02d0\u0e45\3\2\2\2\u02d2\u0e4f\3\2\2\2\u02d4\u0e51\3\2"+
		"\2\2\u02d6\u0e53\3\2\2\2\u02d8\u0e58\3\2\2\2\u02da\u0e63\3\2\2\2\u02dc"+
		"\u0e67\3\2\2\2\u02de\u0e69\3\2\2\2\u02e0\u0e6c\3\2\2\2\u02e2\u0e76\3\2"+
		"\2\2\u02e4\u0e78\3\2\2\2\u02e6\u0e7a\3\2\2\2\u02e8\u0e7c\3\2\2\2\u02ea"+
		"\u0e7f\3\2\2\2\u02ec\u0e86\3\2\2\2\u02ee\u0e93\3\2\2\2\u02f0\u0e9a\3\2"+
		"\2\2\u02f2\u0e9c\3\2\2\2\u02f4\u0ea0\3\2\2\2\u02f6\u0ea8\3\2\2\2\u02f8"+
		"\u0ead\3\2\2\2\u02fa\u0eb5\3\2\2\2\u02fc\u0eba\3\2\2\2\u02fe\u0ec0\3\2"+
		"\2\2\u0300\u0ecd\3\2\2\2\u0302\u0ecf\3\2\2\2\u0304\u0ed2\3\2\2\2\u0306"+
		"\u0ed5\3\2\2\2\u0308\u0ed8\3\2\2\2\u030a\u0ee0\3\2\2\2\u030c\u0ee4\3\2"+
		"\2\2\u030e\u0ee6\3\2\2\2\u0310\u0eeb\3\2\2\2\u0312\u0ef6\3\2\2\2\u0314"+
		"\u0ef8\3\2\2\2\u0316\u0efc\3\2\2\2\u0318\u0f04\3\2\2\2\u031a\u0f08\3\2"+
		"\2\2\u031c\u0f0c\3\2\2\2\u031e\u0f11\3\2\2\2\u0320\u0f15\3\2\2\2\u0322"+
		"\u0f1c\3\2\2\2\u0324\u0f1e\3\2\2\2\u0326\u0f21\3\2\2\2\u0328\u0f26\3\2"+
		"\2\2\u032a\u0f28\3\2\2\2\u032c\u0f2e\3\2\2\2\u032e\u0f30\3\2\2\2\u0330"+
		"\u0f3d\3\2\2\2\u0332\u0f3f\3\2\2\2\u0334\u0f4f\3\2\2\2\u0336\u0f53\3\2"+
		"\2\2\u0338\u0f5a\3\2\2\2\u033a\u0f5c\3\2\2\2\u033c\u0f64\3\2\2\2\u033e"+
		"\u0f66\3\2\2\2\u0340\u0f6b\3\2\2\2\u0342\u0f6f\3\2\2\2\u0344\u0f79\3\2"+
		"\2\2\u0346\u0f7c\3\2\2\2\u0348\u0f88\3\2\2\2\u034a\u0f8e\3\2\2\2\u034c"+
		"\u0f96\3\2\2\2\u034e\u0fa2\3\2\2\2\u0350\u0fb4\3\2\2\2\u0352\u0fca\3\2"+
		"\2\2\u0354\u0fe2\3\2\2\2\u0356\u0fe7\3\2\2\2\u0358\u0fe9\3\2\2\2\u035a"+
		"\u0fec\3\2\2\2\u035c\u0ff4\3\2\2\2\u035e\u0ff6\3\2\2\2\u0360\u0ffa\3\2"+
		"\2\2\u0362\u0ffe\3\2\2\2\u0364\u100b\3\2\2\2\u0366\u100d\3\2\2\2\u0368"+
		"\u100f\3\2\2\2\u036a\u1011\3\2\2\2\u036c\u1019\3\2\2\2\u036e\u101b\3\2"+
		"\2\2\u0370\u1028\3\2\2\2\u0372\u102a\3\2\2\2\u0374\u102c\3\2\2\2\u0376"+
		"\u1037\3\2\2\2\u0378\u103f\3\2\2\2\u037a\u1041\3\2\2\2\u037c\u1043\3\2"+
		"\2\2\u037e\u1045\3\2\2\2\u0380\u1047\3\2\2\2\u0382\u1049\3\2\2\2\u0384"+
		"\u104b\3\2\2\2\u0386\u104d\3\2\2\2\u0388\u104f\3\2\2\2\u038a\u1066\3\2"+
		"\2\2\u038c\u1068\3\2\2\2\u038e\u106b\3\2\2\2\u0390\u106e\3\2\2\2\u0392"+
		"\u1070\3\2\2\2\u0394\u107f\3\2\2\2\u0396\u1081\3\2\2\2\u0398\u1085\3\2"+
		"\2\2\u039a\u108f\3\2\2\2\u039c\u1091\3\2\2\2\u039e\u109b\3\2\2\2\u03a0"+
		"\u109d\3\2\2\2\u03a2\u10a1\3\2\2\2\u03a4\u10a9\3\2\2\2\u03a6\u10ab\3\2"+
		"\2\2\u03a8\u10ad\3\2\2\2\u03aa\u10b1\3\2\2\2\u03ac\u10b9\3\2\2\2\u03ae"+
		"\u10bb\3\2\2\2\u03b0\u10bd\3\2\2\2\u03b2\u10c1\3\2\2\2\u03b4\u10ca\3\2"+
		"\2\2\u03b6\u10cc\3\2\2\2\u03b8\u10d7\3\2\2\2\u03ba\u10ee\3\2\2\2\u03bc"+
		"\u10f0\3\2\2\2\u03be\u10f7\3\2\2\2\u03c0\u10fb\3\2\2\2\u03c2\u10fd\3\2"+
		"\2\2\u03c4\u1106\3\2\2\2\u03c6\u1108\3\2\2\2\u03c8\u112a\3\2\2\2\u03ca"+
		"\u112c\3\2\2\2\u03cc\u112e\3\2\2\2\u03ce\u113b\3\2\2\2\u03d0\u113d\3\2"+
		"\2\2\u03d2\u113f\3\2\2\2\u03d4\u1143\3\2\2\2\u03d6\u114b\3\2\2\2\u03d8"+
		"\u114e\3\2\2\2\u03da\u1154\3\2\2\2\u03dc\u1157\3\2\2\2\u03de\u115d\3\2"+
		"\2\2\u03e0\u115f\3\2\2\2\u03e2\u1161\3\2\2\2\u03e4\u1163\3\2\2\2\u03e6"+
		"\u1166\3\2\2\2\u03e8\u1169\3\2\2\2\u03ea\u116c\3\2\2\2\u03ec\u1175\3\2"+
		"\2\2\u03ee\u1182\3\2\2\2\u03f0\u1184\3\2\2\2\u03f2\u1187\3\2\2\2\u03f4"+
		"\u1189\3\2\2\2\u03f6\u118c\3\2\2\2\u03f8\u118e\3\2\2\2\u03fa\u1190\3\2"+
		"\2\2\u03fc\u1193\3\2\2\2\u03fe\u119b\3\2\2\2\u0400\u119d\3\2\2\2\u0402"+
		"\u119f\3\2\2\2\u0404\u11a3\3\2\2\2\u0406\u11ab\3\2\2\2\u0408\u11af\3\2"+
		"\2\2\u040a\u11b7\3\2\2\2\u040c\u11ba\3\2\2\2\u040e\u11c1\3\2\2\2\u0410"+
		"\u11c4\3\2\2\2\u0412\u11cd\3\2\2\2\u0414\u11d7\3\2\2\2\u0416\u11d9\3\2"+
		"\2\2\u0418\u11db\3\2\2\2\u041a\u11e5\3\2\2\2\u041c\u11e7\3\2\2\2\u041e"+
		"\u11ea\3\2\2\2\u0420\u11ed\3\2\2\2\u0422\u11ef\3\2\2\2\u0424\u11f9\3\2"+
		"\2\2\u0426\u11fb\3\2\2\2\u0428\u11fd\3\2\2\2\u042a\u11ff\3\2\2\2\u042c"+
		"\u1201\3\2\2\2\u042e\u1204\3\2\2\2\u0430\u1207\3\2\2\2\u0432\u120a\3\2"+
		"\2\2\u0434\u120f\3\2\2\2\u0436\u1211\3\2\2\2\u0438\u1214\3\2\2\2\u043a"+
		"\u1217\3\2\2\2\u043c\u121a\3\2\2\2\u043e\u121d\3\2\2\2\u0440\u1220\3\2"+
		"\2\2\u0442\u1224\3\2\2\2\u0444\u1227\3\2\2\2\u0446\u122b\3\2\2\2\u0448"+
		"\u122d\3\2\2\2\u044a\u1230\3\2\2\2\u044c\u1232\3\2\2\2\u044e\u1235\3\2"+
		"\2\2\u0450\u123d\3\2\2\2\u0452\u1243\3\2\2\2\u0454\u1247\3\2\2\2\u0456"+
		"\u1259\3\2\2\2\u0458\u125b\3\2\2\2\u045a\u125f\3\2\2\2\u045c\u1266\3\2"+
		"\2\2\u045e\u126b\3\2\2\2\u0460\u126d\3\2\2\2\u0462\u126f\3\2\2\2\u0464"+
		"\u1271\3\2\2\2\u0466\u127d\3\2\2\2\u0468\u1288\3\2\2\2\u046a\u128a\3\2"+
		"\2\2\u046c\u1290\3\2\2\2\u046e\u1292\3\2\2\2\u0470\u129f\3\2\2\2\u0472"+
		"\u12a2\3\2\2\2\u0474\u12ba\3\2\2\2\u0476\u12c0\3\2\2\2\u0478\u12c3\3\2"+
		"\2\2\u047a\u12de\3\2\2\2\u047c\u12e0\3\2\2\2\u047e\u12e8\3\2\2\2\u0480"+
		"\u12ea\3\2\2\2\u0482\u12ec\3\2\2\2\u0484\u12ee\3\2\2\2\u0486\u12f4\3\2"+
		"\2\2\u0488\u12fb\3\2\2\2\u048a\u12fd\3\2\2\2\u048c\u12ff\3\2\2\2\u048e"+
		"\u1303\3\2\2\2\u0490\u1305\3\2\2\2\u0492\u130b\3\2\2\2\u0494\u1313\3\2"+
		"\2\2\u0496\u131b\3\2\2\2\u0498\u1321\3\2\2\2\u049a\u1323\3\2\2\2\u049c"+
		"\u1325\3\2\2\2\u049e\u132f\3\2\2\2\u04a0\u1337\3\2\2\2\u04a2\u133e\3\2"+
		"\2\2\u04a4\u1340\3\2\2\2\u04a6\u1346\3\2\2\2\u04a8\u1348\3\2\2\2\u04aa"+
		"\u134f\3\2\2\2\u04ac\u135b\3\2\2\2\u04ae\u1360\3\2\2\2\u04b0\u1366\3\2"+
		"\2\2\u04b2\u136c\3\2\2\2\u04b4\u136e\3\2\2\2\u04b6\u1372\3\2\2\2\u04b8"+
		"\u137c\3\2\2\2\u04ba\u137f\3\2\2\2\u04bc\u1390\3\2\2\2\u04be\u1392\3\2"+
		"\2\2\u04c0\u139a\3\2\2\2\u04c2\u139d\3\2\2\2\u04c4\u13a6\3\2\2\2\u04c6"+
		"\u13ae\3\2\2\2\u04c8\u13c2\3\2\2\2\u04ca\u13c4\3\2\2\2\u04cc\u13dc\3\2"+
		"\2\2\u04ce\u13e6\3\2\2\2\u04d0\u13e8\3\2\2\2\u04d2\u13ed\3\2\2\2\u04d4"+
		"\u13f2\3\2\2\2\u04d6\u13f8\3\2\2\2\u04d8\u1403\3\2\2\2\u04da\u1410\3\2"+
		"\2\2\u04dc\u1412\3\2\2\2\u04de\u1415\3\2\2\2\u04e0\u1417\3\2\2\2\u04e2"+
		"\u1426\3\2\2\2\u04e4\u1429\3\2\2\2\u04e6\u142f\3\2\2\2\u04e8\u1431\3\2"+
		"\2\2\u04ea\u143c\3\2\2\2\u04ec\u143e\3\2\2\2\u04ee\u1448\3\2\2\2\u04f0"+
		"\u144c\3\2\2\2\u04f2\u144e\3\2\2\2\u04f4\u145b\3\2\2\2\u04f6\u1468\3\2"+
		"\2\2\u04f8\u146a\3\2\2\2\u04fa\u1479\3\2\2\2\u04fc\u1492\3\2\2\2\u04fe"+
		"\u149f\3\2\2\2\u0500\u14a3\3\2\2\2\u0502\u14a5\3\2\2\2\u0504\u14a9\3\2"+
		"\2\2\u0506\u14b4\3\2\2\2\u0508\u14bc\3\2\2\2\u050a\u14be\3\2\2\2\u050c"+
		"\u14c0\3\2\2\2\u050e\u14cf\3\2\2\2\u0510\u14d1\3\2\2\2\u0512\u14d4\3\2"+
		"\2\2\u0514\u14d9\3\2\2\2\u0516\u14db\3\2\2\2\u0518\u14e7\3\2\2\2\u051a"+
		"\u14f6\3\2\2\2\u051c\u14fb\3\2\2\2\u051e\u1501\3\2\2\2\u0520\u1503\3\2"+
		"\2\2\u0522\u150e\3\2\2\2\u0524\u1510\3\2\2\2\u0526\u1514\3\2\2\2\u0528"+
		"\u1516\3\2\2\2\u052a\u1524\3\2\2\2\u052c\u1526\3\2\2\2\u052e\u1529\3\2"+
		"\2\2\u0530\u152b\3\2\2\2\u0532\u152f\3\2\2\2\u0534\u153a\3\2\2\2\u0536"+
		"\u1548\3\2\2\2\u0538\u154c\3\2\2\2\u053a\u154f\3\2\2\2\u053c\u1557\3\2"+
		"\2\2\u053e\u1559\3\2\2\2\u0540\u155b\3\2\2\2\u0542\u155d\3\2\2\2\u0544"+
		"\u1560\3\2\2\2\u0546\u1565\3\2\2\2\u0548\u1567\3\2\2\2\u054a\u156e\3\2"+
		"\2\2\u054c\u1570\3\2\2\2\u054e\u1572\3\2\2\2\u0550\u0551\7\u0183\2\2\u0551"+
		"\3\3\2\2\2\u0552\u0555\5\n\6\2\u0553\u0555\5\b\5\2\u0554\u0552\3\2\2\2"+
		"\u0554\u0553\3\2\2\2\u0555\5\3\2\2\2\u0556\u0559\5\f\7\2\u0557\u0559\5"+
		"\b\5\2\u0558\u0556\3\2\2\2\u0558\u0557\3\2\2\2\u0559\7\3\2\2\2\u055a\u0561"+
		"\7\u0193\2\2\u055b\u0561\7\u0194\2\2\u055c\u0561\7\u0195\2\2\u055d\u0561"+
		"\5\32\16\2\u055e\u0561\7\u019a\2\2\u055f\u0561\7\u019b\2\2\u0560\u055a"+
		"\3\2\2\2\u0560\u055b\3\2\2\2\u0560\u055c\3\2\2\2\u0560\u055d\3\2\2\2\u0560"+
		"\u055e\3\2\2\2\u0560\u055f\3\2\2\2\u0561\t\3\2\2\2\u0562\u0564\5\20\t"+
		"\2\u0563\u0562\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566"+
		"\5\f\7\2\u0566\13\3\2\2\2\u0567\u056a\5\16\b\2\u0568\u056a\5\22\n\2\u0569"+
		"\u0567\3\2\2\2\u0569\u0568\3\2\2\2\u056a\r\3\2\2\2\u056b\u0570\7\u0196"+
		"\2\2\u056c\u056e\7\u016f\2\2\u056d\u056f\7\u0196\2\2\u056e\u056d\3\2\2"+
		"\2\u056e\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u056c\3\2\2\2\u0570\u0571"+
		"\3\2\2\2\u0571\u0575\3\2\2\2\u0572\u0573\7\u016f\2\2\u0573\u0575\7\u0196"+
		"\2\2\u0574\u056b\3\2\2\2\u0574\u0572\3\2\2\2\u0575\17\3\2\2\2\u0576\u0577"+
		"\t\2\2\2\u0577\21\3\2\2\2\u0578\u0579\5\24\13\2\u0579\u057a\7\3\2\2\u057a"+
		"\u057b\5\26\f\2\u057b\23\3\2\2\2\u057c\u057d\5\16\b\2\u057d\25\3\2\2\2"+
		"\u057e\u057f\5\30\r\2\u057f\27\3\2\2\2\u0580\u0582\5\20\t\2\u0581\u0580"+
		"\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u0584\7\u0196\2"+
		"\2\u0584\31\3\2\2\2\u0585\u0586\t\3\2\2\u0586\33\3\2\2\2\u0587\u0588\5"+
		"\36\20\2\u0588\35\3\2\2\2\u0589\u058d\5\2\2\2\u058a\u058d\7\u0186\2\2"+
		"\u058b\u058d\7\u0187\2\2\u058c\u0589\3\2\2\2\u058c\u058a\3\2\2\2\u058c"+
		"\u058b\3\2\2\2\u058d\37\3\2\2\2\u058e\u0591\5h\65\2\u058f\u0591\5j\66"+
		"\2\u0590\u058e\3\2\2\2\u0590\u058f\3\2\2\2\u0591!\3\2\2\2\u0592\u0593"+
		"\5.\30\2\u0593#\3\2\2\2\u0594\u0595\5,\27\2\u0595%\3\2\2\2\u0596\u0597"+
		"\5*\26\2\u0597\u0598\7\u016f\2\2\u0598\u059a\3\2\2\2\u0599\u0596\3\2\2"+
		"\2\u0599\u059a\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059c\5(\25\2\u059c\'"+
		"\3\2\2\2\u059d\u059e\5\34\17\2\u059e)\3\2\2\2\u059f\u05a0\5\34\17\2\u05a0"+
		"+\3\2\2\2\u05a1\u05a2\5&\24\2\u05a2\u05a3\7\u016f\2\2\u05a3\u05a5\3\2"+
		"\2\2\u05a4\u05a1\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6"+
		"\u05a7\5\62\32\2\u05a7-\3\2\2\2\u05a8\u05a9\5\60\31\2\u05a9\u05aa\7\u016f"+
		"\2\2\u05aa\u05ac\3\2\2\2\u05ab\u05a8\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac"+
		"\u05ad\3\2\2\2\u05ad\u05ae\5\62\32\2\u05ae/\3\2\2\2\u05af\u05b2\5&\24"+
		"\2\u05b0\u05b2\5H%\2\u05b1\u05af\3\2\2\2\u05b1\u05b0\3\2\2\2\u05b2\61"+
		"\3\2\2\2\u05b3\u05b4\5\34\17\2\u05b4\63\3\2\2\2\u05b5\u05b6\5\34\17\2"+
		"\u05b6\65\3\2\2\2\u05b7\u05b8\5\34\17\2\u05b8\67\3\2\2\2\u05b9\u05ba\5"+
		"\34\17\2\u05ba9\3\2\2\2\u05bb\u05bc\5\34\17\2\u05bc;\3\2\2\2\u05bd\u05be"+
		"\5\34\17\2\u05be=\3\2\2\2\u05bf\u05c0\5,\27\2\u05c0?\3\2\2\2\u05c1\u05c2"+
		"\5\34\17\2\u05c2A\3\2\2\2\u05c3\u05c4\5,\27\2\u05c4C\3\2\2\2\u05c5\u05c6"+
		"\5F$\2\u05c6E\3\2\2\2\u05c7\u05c8\5H%\2\u05c8\u05c9\7\u016f\2\2\u05c9"+
		"\u05cb\3\2\2\2\u05ca\u05c7\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2"+
		"\2\2\u05cc\u05cd\5\62\32\2\u05cdG\3\2\2\2\u05ce\u05cf\7\4\2\2\u05cfI\3"+
		"\2\2\2\u05d0\u05d1\7\u0172\2\2\u05d1\u05d2\5\34\17\2\u05d2K\3\2\2\2\u05d3"+
		"\u05d4\5\34\17\2\u05d4M\3\2\2\2\u05d5\u05d6\5,\27\2\u05d6O\3\2\2\2\u05d7"+
		"\u05da\5\34\17\2\u05d8\u05da\7\u0193\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05d8"+
		"\3\2\2\2\u05daQ\3\2\2\2\u05db\u05dc\5,\27\2\u05dcS\3\2\2\2\u05dd\u05de"+
		"\5,\27\2\u05deU\3\2\2\2\u05df\u05e0\5&\24\2\u05e0\u05e1\7\u016f\2\2\u05e1"+
		"\u05e3\3\2\2\2\u05e2\u05df\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\3\2"+
		"\2\2\u05e4\u05e5\5\34\17\2\u05e5W\3\2\2\2\u05e6\u05e7\5,\27\2\u05e7Y\3"+
		"\2\2\2\u05e8\u05e9\5,\27\2\u05e9[\3\2\2\2\u05ea\u05eb\5^\60\2\u05eb]\3"+
		"\2\2\2\u05ec\u05ed\5&\24\2\u05ed\u05ee\7\u016f\2\2\u05ee\u05f0\3\2\2\2"+
		"\u05ef\u05ec\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2"+
		"\5\62\32\2\u05f2_\3\2\2\2\u05f3\u05f4\5\34\17\2\u05f4a\3\2\2\2\u05f5\u05f6"+
		"\5\34\17\2\u05f6c\3\2\2\2\u05f7\u05f8\5\34\17\2\u05f8e\3\2\2\2\u05f9\u05fa"+
		"\5,\27\2\u05fag\3\2\2\2\u05fb\u05fc\5\34\17\2\u05fci\3\2\2\2\u05fd\u05fe"+
		"\5\34\17\2\u05fek\3\2\2\2\u05ff\u0600\5\u00d0i\2\u0600m\3\2\2\2\u0601"+
		"\u0602\5\u00d0i\2\u0602o\3\2\2\2\u0603\u0604\5\u00d0i\2\u0604q\3\2\2\2"+
		"\u0605\u0608\5t;\2\u0606\u0608\5v<\2\u0607\u0605\3\2\2\2\u0607\u0606\3"+
		"\2\2\2\u0608s\3\2\2\2\u0609\u060a\5\34\17\2\u060au\3\2\2\2\u060b\u060d"+
		"\5\u0082B\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e\3\2\2"+
		"\2\u060e\u060f\5\u00d0i\2\u060fw\3\2\2\2\u0610\u0613\5D#\2\u0611\u0613"+
		"\5z>\2\u0612\u0610\3\2\2\2\u0612\u0611\3\2\2\2\u0613y\3\2\2\2\u0614\u0616"+
		"\5\u0082B\2\u0615\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\3\2\2"+
		"\2\u0617\u0618\5\u00d0i\2\u0618{\3\2\2\2\u0619\u061c\5~@\2\u061a\u061c"+
		"\5\u0080A\2\u061b\u0619\3\2\2\2\u061b\u061a\3\2\2\2\u061c}\3\2\2\2\u061d"+
		"\u061e\5\34\17\2\u061e\177\3\2\2\2\u061f\u0621\5\u0082B\2\u0620\u061f"+
		"\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0623\5\u00d0i"+
		"\2\u0623\u0081\3\2\2\2\u0624\u0625\t\4\2\2\u0625\u0083\3\2\2\2\u0626\u0627"+
		"\5\34\17\2\u0627\u0085\3\2\2\2\u0628\u0629\bD\1\2\u0629\u062e\5\u0088"+
		"E\2\u062a\u062e\5\u00b4[\2\u062b\u062e\5\u00be`\2\u062c\u062e\5\u00b8"+
		"]\2\u062d\u0628\3\2\2\2\u062d\u062a\3\2\2\2\u062d\u062b\3\2\2\2\u062d"+
		"\u062c\3\2\2\2\u062e\u063b\3\2\2\2\u062f\u0630\f\4\2\2\u0630\u0635\7\7"+
		"\2\2\u0631\u0632\7\u0178\2\2\u0632\u0633\5\u00c0a\2\u0633\u0634\7\u0179"+
		"\2\2\u0634\u0636\3\2\2\2\u0635\u0631\3\2\2\2\u0635\u0636\3\2\2\2\u0636"+
		"\u063a\3\2\2\2\u0637\u0638\f\3\2\2\u0638\u063a\7\b\2\2\u0639\u062f\3\2"+
		"\2\2\u0639\u0637\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u0639\3\2\2\2\u063b"+
		"\u063c\3\2\2\2\u063c\u0087\3\2\2\2\u063d\u063b\3\2\2\2\u063e\u0642\5\u008a"+
		"F\2\u063f\u0640\7\t\2\2\u0640\u0641\7\n\2\2\u0641\u0643\5\u045e\u0230"+
		"\2\u0642\u063f\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0645\3\2\2\2\u0644\u0646"+
		"\5\u0470\u0239\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u064d\3"+
		"\2\2\2\u0647\u064d\5\u008eH\2\u0648\u064d\5\u0092J\2\u0649\u064d\5\u00a6"+
		"T\2\u064a\u064d\5\u00a8U\2\u064b\u064d\5\u00b2Z\2\u064c\u063e\3\2\2\2"+
		"\u064c\u0647\3\2\2\2\u064c\u0648\3\2\2\2\u064c\u0649\3\2\2\2\u064c\u064a"+
		"\3\2\2\2\u064c\u064b\3\2\2\2\u064d\u0089\3\2\2\2\u064e\u0653\7\t\2\2\u064f"+
		"\u0650\7\u0169\2\2\u0650\u0651\5\u009aN\2\u0651\u0652\7\u016a\2\2\u0652"+
		"\u0654\3\2\2\2\u0653\u064f\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u066f\3\2"+
		"\2\2\u0655\u065a\7\13\2\2\u0656\u0657\7\u0169\2\2\u0657\u0658\5\u009a"+
		"N\2\u0658\u0659\7\u016a\2\2\u0659\u065b\3\2\2\2\u065a\u0656\3\2\2\2\u065a"+
		"\u065b\3\2\2\2\u065b\u066f\3\2\2\2\u065c\u065d\7\t\2\2\u065d\u065e\7\f"+
		"\2\2\u065e\u065f\7\u0169\2\2\u065f\u0660\5\u009aN\2\u0660\u0661\7\u016a"+
		"\2\2\u0661\u066f\3\2\2\2\u0662\u0663\7\13\2\2\u0663\u0664\7\f\2\2\u0664"+
		"\u0665\7\u0169\2\2\u0665\u0666\5\u009aN\2\u0666\u0667\7\u016a\2\2\u0667"+
		"\u066f\3\2\2\2\u0668\u0669\7\r\2\2\u0669\u066a\7\u0169\2\2\u066a\u066b"+
		"\5\u009aN\2\u066b\u066c\7\u016a\2\2\u066c\u066f\3\2\2\2\u066d\u066f\5"+
		"\u008cG\2\u066e\u064e\3\2\2\2\u066e\u0655\3\2\2\2\u066e\u065c\3\2\2\2"+
		"\u066e\u0662\3\2\2\2\u066e\u0668\3\2\2\2\u066e\u066d\3\2\2\2\u066f\u008b"+
		"\3\2\2\2\u0670\u0671\7\t\2\2\u0671\u0672\7\16\2\2\u0672\u0677\7\17\2\2"+
		"\u0673\u0674\7\u0169\2\2\u0674\u0675\5\u009eP\2\u0675\u0676\7\u016a\2"+
		"\2\u0676\u0678\3\2\2\2\u0677\u0673\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u068a"+
		"\3\2\2\2\u0679\u067a\7\13\2\2\u067a\u067b\7\16\2\2\u067b\u0680\7\17\2"+
		"\2\u067c\u067d\7\u0169\2\2\u067d\u067e\5\u009eP\2\u067e\u067f\7\u016a"+
		"\2\2\u067f\u0681\3\2\2\2\u0680\u067c\3\2\2\2\u0680\u0681\3\2\2\2\u0681"+
		"\u068a\3\2\2\2\u0682\u0687\7\20\2\2\u0683\u0684\7\u0169\2\2\u0684\u0685"+
		"\5\u009eP\2\u0685\u0686\7\u016a\2\2\u0686\u0688\3\2\2\2\u0687\u0683\3"+
		"\2\2\2\u0687\u0688\3\2\2\2\u0688\u068a\3\2\2\2\u0689\u0670\3\2\2\2\u0689"+
		"\u0679\3\2\2\2\u0689\u0682\3\2\2\2\u068a\u008d\3\2\2\2\u068b\u0690\7\21"+
		"\2\2\u068c\u068d\7\u0169\2\2\u068d\u068e\5\u0098M\2\u068e\u068f\7\u016a"+
		"\2\2\u068f\u0691\3\2\2\2\u0690\u068c\3\2\2\2\u0690\u0691\3\2\2\2\u0691"+
		"\u069f\3\2\2\2\u0692\u0693\7\21\2\2\u0693\u0694\7\f\2\2\u0694\u0695\7"+
		"\u0169\2\2\u0695\u0696\5\u0098M\2\u0696\u0697\7\u016a\2\2\u0697\u069f"+
		"\3\2\2\2\u0698\u0699\7\22\2\2\u0699\u069a\7\u0169\2\2\u069a\u069b\5\u0098"+
		"M\2\u069b\u069c\7\u016a\2\2\u069c\u069f\3\2\2\2\u069d\u069f\5\u0090I\2"+
		"\u069e\u068b\3\2\2\2\u069e\u0692\3\2\2\2\u069e\u0698\3\2\2\2\u069e\u069d"+
		"\3\2\2\2\u069f\u008f\3\2\2\2\u06a0\u06a1\7\21\2\2\u06a1\u06a2\7\16\2\2"+
		"\u06a2\u06a7\7\17\2\2\u06a3\u06a4\7\u0169\2\2\u06a4\u06a5\5\u009cO\2\u06a5"+
		"\u06a6\7\u016a\2\2\u06a6\u06a8\3\2\2\2\u06a7\u06a3\3\2\2\2\u06a7\u06a8"+
		"\3\2\2\2\u06a8\u06b1\3\2\2\2\u06a9\u06ae\7\23\2\2\u06aa\u06ab\7\u0169"+
		"\2\2\u06ab\u06ac\5\u009cO\2\u06ac\u06ad\7\u016a\2\2\u06ad\u06af\3\2\2"+
		"\2\u06ae\u06aa\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b1\3\2\2\2\u06b0\u06a0"+
		"\3\2\2\2\u06b0\u06a9\3\2\2\2\u06b1\u0091\3\2\2\2\u06b2\u06b5\5\u0094K"+
		"\2\u06b3\u06b5\5\u0096L\2\u06b4\u06b2\3\2\2\2\u06b4\u06b3\3\2\2\2\u06b5"+
		"\u0093\3\2\2\2\u06b6\u06bf\7\24\2\2\u06b7\u06b8\7\u0169\2\2\u06b8\u06bb"+
		"\5\u00a2R\2\u06b9\u06ba\7\u016d\2\2\u06ba\u06bc\5\u00a4S\2\u06bb\u06b9"+
		"\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\7\u016a\2"+
		"\2\u06be\u06c0\3\2\2\2\u06bf\u06b7\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06dc"+
		"\3\2\2\2\u06c1\u06ca\7\25\2\2\u06c2\u06c3\7\u0169\2\2\u06c3\u06c6\5\u00a2"+
		"R\2\u06c4\u06c5\7\u016d\2\2\u06c5\u06c7\5\u00a4S\2\u06c6\u06c4\3\2\2\2"+
		"\u06c6\u06c7\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9\7\u016a\2\2\u06c9"+
		"\u06cb\3\2\2\2\u06ca\u06c2\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06dc\3\2"+
		"\2\2\u06cc\u06d5\7\26\2\2\u06cd\u06ce\7\u0169\2\2\u06ce\u06d1\5\u00a2"+
		"R\2\u06cf\u06d0\7\u016d\2\2\u06d0\u06d2\5\u00a4S\2\u06d1\u06cf\3\2\2\2"+
		"\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4\7\u016a\2\2\u06d4"+
		"\u06d6\3\2\2\2\u06d5\u06cd\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06dc\3\2"+
		"\2\2\u06d7\u06dc\7\27\2\2\u06d8\u06dc\7\30\2\2\u06d9\u06dc\7\31\2\2\u06da"+
		"\u06dc\7\32\2\2\u06db\u06b6\3\2\2\2\u06db\u06c1\3\2\2\2\u06db\u06cc\3"+
		"\2\2\2\u06db\u06d7\3\2\2\2\u06db\u06d8\3\2\2\2\u06db\u06d9\3\2\2\2\u06db"+
		"\u06da\3\2\2\2\u06dc\u0095\3\2\2\2\u06dd\u06e2\7\33\2\2\u06de\u06df\7"+
		"\u0169\2\2\u06df\u06e0\5\u00a2R\2\u06e0\u06e1\7\u016a\2\2\u06e1\u06e3"+
		"\3\2\2\2\u06e2\u06de\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e8\3\2\2\2\u06e4"+
		"\u06e8\7\34\2\2\u06e5\u06e6\7\35\2\2\u06e6\u06e8\7\36\2\2\u06e7\u06dd"+
		"\3\2\2\2\u06e7\u06e4\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e8\u0097\3\2\2\2\u06e9"+
		"\u06ea\7\u0196\2\2\u06ea\u0099\3\2\2\2\u06eb\u06ed\5\u0098M\2\u06ec\u06ee"+
		"\5\u00a0Q\2\u06ed\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u009b\3\2\2"+
		"\2\u06ef\u06f1\5\u0098M\2\u06f0\u06f2\7\u0185\2\2\u06f1\u06f0\3\2\2\2"+
		"\u06f1\u06f2\3\2\2\2\u06f2\u06f5\3\2\2\2\u06f3\u06f5\7\u0184\2\2\u06f4"+
		"\u06ef\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5\u009d\3\2\2\2\u06f6\u06f8\5\u009c"+
		"O\2\u06f7\u06f9\5\u00a0Q\2\u06f8\u06f7\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9"+
		"\u009f\3\2\2\2\u06fa\u06fb\t\5\2\2\u06fb\u00a1\3\2\2\2\u06fc\u06fd\7\u0196"+
		"\2\2\u06fd\u00a3\3\2\2\2\u06fe\u06ff\7\u0196\2\2\u06ff\u00a5\3\2\2\2\u0700"+
		"\u0701\7!\2\2\u0701\u00a7\3\2\2\2\u0702\u0718\7\"\2\2\u0703\u0708\7#\2"+
		"\2\u0704\u0705\7\u0169\2\2\u0705\u0706\5\u00acW\2\u0706\u0707\7\u016a"+
		"\2\2\u0707\u0709\3\2\2\2\u0708\u0704\3\2\2\2\u0708\u0709\3\2\2\2\u0709"+
		"\u070b\3\2\2\2\u070a\u070c\5\u00aaV\2\u070b\u070a\3\2\2\2\u070b\u070c"+
		"\3\2\2\2\u070c\u0718\3\2\2\2\u070d\u0712\7$\2\2\u070e\u070f\7\u0169\2"+
		"\2\u070f\u0710\5\u00aeX\2\u0710\u0711\7\u016a\2\2\u0711\u0713\3\2\2\2"+
		"\u0712\u070e\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0715\3\2\2\2\u0714\u0716"+
		"\5\u00aaV\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0718\3\2\2"+
		"\2\u0717\u0702\3\2\2\2\u0717\u0703\3\2\2\2\u0717\u070d\3\2\2\2\u0718\u00a9"+
		"\3\2\2\2\u0719\u071a\7%\2\2\u071a\u071b\7#\2\2\u071b\u0720\7&\2\2\u071c"+
		"\u071d\7\'\2\2\u071d\u071e\7#\2\2\u071e\u0720\7&\2\2\u071f\u0719\3\2\2"+
		"\2\u071f\u071c\3\2\2\2\u0720\u00ab\3\2\2\2\u0721\u0722\5\u00b0Y\2\u0722"+
		"\u00ad\3\2\2\2\u0723\u0724\5\u00b0Y\2\u0724\u00af\3\2\2\2\u0725\u0726"+
		"\7\u0196\2\2\u0726\u00b1\3\2\2\2\u0727\u0728\7(\2\2\u0728\u0729\7\u019e"+
		"\2\2\u0729\u00b3\3\2\2\2\u072a\u072b\7)\2\2\u072b\u072c\5\u00b6\\\2\u072c"+
		"\u00b5\3\2\2\2\u072d\u072e\7\u0169\2\2\u072e\u0733\5\u00c2b\2\u072f\u0730"+
		"\7\u016d\2\2\u0730\u0732\5\u00c2b\2\u0731\u072f\3\2\2\2\u0732\u0735\3"+
		"\2\2\2\u0733\u0731\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2\u0735"+
		"\u0733\3\2\2\2\u0736\u0737\7\u016a\2\2\u0737\u00b7\3\2\2\2\u0738\u0739"+
		"\7*\2\2\u0739\u073a\7\u0169\2\2\u073a\u073b\5\u00bc_\2\u073b\u073d\7\u016a"+
		"\2\2\u073c\u073e\5\u00ba^\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e"+
		"\u00b9\3\2\2\2\u073f\u0740\7+\2\2\u0740\u0741\5\"\22\2\u0741\u00bb\3\2"+
		"\2\2\u0742\u0743\5\u00be`\2\u0743\u00bd\3\2\2\2\u0744\u0745\5^\60\2\u0745"+
		"\u00bf\3\2\2\2\u0746\u0747\7\u0196\2\2\u0747\u00c1\3\2\2\2\u0748\u0749"+
		"\5b\62\2\u0749\u074a\5\u0086D\2\u074a\u00c3\3\2\2\2\u074b\u074c\bc\1\2"+
		"\u074c\u0764\5\u00c6d\2\u074d\u0764\5\u00ccg\2\u074e\u0764\5\u00f4{\2"+
		"\u074f\u0764\5\u00f8}\2\u0750\u0764\5\u00fc\177\2\u0751\u0764\5\u0120"+
		"\u0091\2\u0752\u0764\5\u0382\u01c2\2\u0753\u0764\5\u0130\u0099\2\u0754"+
		"\u0764\5\u014a\u00a6\2\u0755\u0764\5\u0152\u00aa\2\u0756\u0764\5\u015c"+
		"\u00af\2\u0757\u0764\5\u0162\u00b2\2\u0758\u0764\5\u0166\u00b4\2\u0759"+
		"\u0764\5\u0170\u00b9\2\u075a\u0764\5\u00c8e\2\u075b\u075c\5\u025c\u012f"+
		"\2\u075c\u075d\7\u0178\2\2\u075d\u075e\5\u0180\u00c1\2\u075e\u075f\7\u0179"+
		"\2\2\u075f\u0764\3\2\2\2\u0760\u0764\5\u0174\u00bb\2\u0761\u0764\5\u0150"+
		"\u00a9\2\u0762\u0764\5\u0450\u0229\2\u0763\u074b\3\2\2\2\u0763\u074d\3"+
		"\2\2\2\u0763\u074e\3\2\2\2\u0763\u074f\3\2\2\2\u0763\u0750\3\2\2\2\u0763"+
		"\u0751\3\2\2\2\u0763\u0752\3\2\2\2\u0763\u0753\3\2\2\2\u0763\u0754\3\2"+
		"\2\2\u0763\u0755\3\2\2\2\u0763\u0756\3\2\2\2\u0763\u0757\3\2\2\2\u0763"+
		"\u0758\3\2\2\2\u0763\u0759\3\2\2\2\u0763\u075a\3\2\2\2\u0763\u075b\3\2"+
		"\2\2\u0763\u0760\3\2\2\2\u0763\u0761\3\2\2\2\u0763\u0762\3\2\2\2\u0764"+
		"\u0782\3\2\2\2\u0765\u0766\f\21\2\2\u0766\u0767\7\u016f\2\2\u0767\u0781"+
		"\5b\62\2\u0768\u0769\f\17\2\2\u0769\u076a\7\u016f\2\2\u076a\u076c\5@!"+
		"\2\u076b\u076d\5\u0454\u022b\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2\2"+
		"\u076d\u0781\3\2\2\2\u076e\u076f\f\13\2\2\u076f\u0770\5\u016a\u00b6\2"+
		"\u0770\u0772\5\62\32\2\u0771\u0773\5\u0454\u022b\2\u0772\u0771\3\2\2\2"+
		"\u0772\u0773\3\2\2\2\u0773\u0781\3\2\2\2\u0774\u0775\f\b\2\2\u0775\u0776"+
		"\7\u018b\2\2\u0776\u0777\5\u025a\u012e\2\u0777\u0778\7\u0178\2\2\u0778"+
		"\u0779\5\u0180\u00c1\2\u0779\u077a\7\u0179\2\2\u077a\u0781\3\2\2\2\u077b"+
		"\u077c\f\6\2\2\u077c\u077d\7\u0178\2\2\u077d\u077e\5\u0180\u00c1\2\u077e"+
		"\u077f\7\u0179\2\2\u077f\u0781\3\2\2\2\u0780\u0765\3\2\2\2\u0780\u0768"+
		"\3\2\2\2\u0780\u076e\3\2\2\2\u0780\u0774\3\2\2\2\u0780\u077b\3\2\2\2\u0781"+
		"\u0784\3\2\2\2\u0782\u0780\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u00c5\3\2"+
		"\2\2\u0784\u0782\3\2\2\2\u0785\u0786\7\u0169\2\2\u0786\u0787\5\u0176\u00bc"+
		"\2\u0787\u0788\7\u016a\2\2\u0788\u00c7\3\2\2\2\u0789\u078c\5\u0260\u0131"+
		"\2\u078a\u078c\5\u0274\u013b\2\u078b\u0789\3\2\2\2\u078b\u078a\3\2\2\2"+
		"\u078c\u00c9\3\2\2\2\u078d\u0790\5\4\3\2\u078e\u0790\5\u00ceh\2\u078f"+
		"\u078d\3\2\2\2\u078f\u078e\3\2\2\2\u0790\u00cb\3\2\2\2\u0791\u0794\5\6"+
		"\4\2\u0792\u0794\5\u00ceh\2\u0793\u0791\3\2\2\2\u0793\u0792\3\2\2\2\u0794"+
		"\u00cd\3\2\2\2\u0795\u07a7\5\u00d6l\2\u0796\u07a7\5\u00f6|\2\u0797\u07a7"+
		"\5\u00d8m\2\u0798\u07a7\5\u00dan\2\u0799\u07a7\5\u00e4s\2\u079a\u07a7"+
		"\7,\2\2\u079b\u07a7\7-\2\2\u079c\u07a7\7.\2\2\u079d\u07a7\7/\2\2\u079e"+
		"\u07a7\7\60\2\2\u079f\u07a0\7\61\2\2\u07a0\u07a7\5\u00be`\2\u07a1\u07a7"+
		"\7\62\2\2\u07a2\u07a7\7\63\2\2\u07a3\u07a7\7\64\2\2\u07a4\u07a7\7\65\2"+
		"\2\u07a5\u07a7\7\66\2\2\u07a6\u0795\3\2\2\2\u07a6\u0796\3\2\2\2\u07a6"+
		"\u0797\3\2\2\2\u07a6\u0798\3\2\2\2\u07a6\u0799\3\2\2\2\u07a6\u079a\3\2"+
		"\2\2\u07a6\u079b\3\2\2\2\u07a6\u079c\3\2\2\2\u07a6\u079d\3\2\2\2\u07a6"+
		"\u079e\3\2\2\2\u07a6\u079f\3\2\2\2\u07a6\u07a1\3\2\2\2\u07a6\u07a2\3\2"+
		"\2\2\u07a6\u07a3\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a5\3\2\2\2\u07a7"+
		"\u00cf\3\2\2\2\u07a8\u07ad\5\4\3\2\u07a9\u07ad\5J&\2\u07aa\u07ad\5\u00f6"+
		"|\2\u07ab\u07ad\5\u0542\u02a2\2\u07ac\u07a8\3\2\2\2\u07ac\u07a9\3\2\2"+
		"\2\u07ac\u07aa\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad\u00d1\3\2\2\2\u07ae\u07b5"+
		"\5\u00d6l\2\u07af\u07b5\5\u00f6|\2\u07b0\u07b5\5\u00f4{\2\u07b1\u07b5"+
		"\5\u00e0q\2\u07b2\u07b5\5\u00d8m\2\u07b3\u07b5\5\u00dan\2\u07b4\u07ae"+
		"\3\2\2\2\u07b4\u07af\3\2\2\2\u07b4\u07b0\3\2\2\2\u07b4\u07b1\3\2\2\2\u07b4"+
		"\u07b2\3\2\2\2\u07b4\u07b3\3\2\2\2\u07b5\u00d3\3\2\2\2\u07b6\u07bb\5J"+
		"&\2\u07b7\u07bb\5\u00f6|\2\u07b8\u07bb\5\u00f4{\2\u07b9\u07bb\5\u0542"+
		"\u02a2\2\u07ba\u07b6\3\2\2\2\u07ba\u07b7\3\2\2\2\u07ba\u07b8\3\2\2\2\u07ba"+
		"\u07b9\3\2\2\2\u07bb\u00d5\3\2\2\2\u07bc\u07be\5J&\2\u07bd\u07bf\5\u00de"+
		"p\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u00d7\3\2\2\2\u07c0"+
		"\u07c1\7\u0177\2\2\u07c1\u00d9\3\2\2\2\u07c2\u07c4\5\u0542\u02a2\2\u07c3"+
		"\u07c5\5\u00dco\2\u07c4\u07c3\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u00db"+
		"\3\2\2\2\u07c6\u07c8\7\67\2\2\u07c7\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2"+
		"\u07c8\u07c9\3\2\2\2\u07c9\u07ca\5\u0542\u02a2\2\u07ca\u00dd\3\2\2\2\u07cb"+
		"\u07cd\7\67\2\2\u07cc\u07cb\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07ce\3"+
		"\2\2\2\u07ce\u07cf\5J&\2\u07cf\u00df\3\2\2\2\u07d0\u07d1\5\u00e2r\2\u07d1"+
		"\u07d2\7\u0178\2\2\u07d2\u07d3\5\u00d0i\2\u07d3\u07d4\7\u0179\2\2\u07d4"+
		"\u00e1\3\2\2\2\u07d5\u07d8\5\u00f6|\2\u07d6\u07d8\5\u00f4{\2\u07d7\u07d5"+
		"\3\2\2\2\u07d7\u07d6\3\2\2\2\u07d8\u00e3\3\2\2\2\u07d9\u07da\78\2\2\u07da"+
		"\u07db\79\2\2\u07db\u07dc\7\u0169\2\2\u07dc\u07dd\5\u01d8\u00ed\2\u07dd"+
		"\u07de\7\u016a\2\2\u07de\u00e5\3\2\2\2\u07df\u07e2\5\u00e8u\2\u07e0\u07e2"+
		"\5\u00eex\2\u07e1\u07df\3\2\2\2\u07e1\u07e0\3\2\2\2\u07e2\u00e7\3\2\2"+
		"\2\u07e3\u07e6\5\u00eav\2\u07e4\u07e6\5\u00ecw\2\u07e5\u07e3\3\2\2\2\u07e5"+
		"\u07e4\3\2\2\2\u07e6\u00e9\3\2\2\2\u07e7\u07e8\7:\2\2\u07e8\u00eb\3\2"+
		"\2\2\u07e9\u07ea\7\7\2\2\u07ea\u07eb\7\u0178\2\2\u07eb\u07f0\7\u0179\2"+
		"\2\u07ec\u07ed\7\b\2\2\u07ed\u07ee\7\u0178\2\2\u07ee\u07f0\7\u0179\2\2"+
		"\u07ef\u07e9\3\2\2\2\u07ef\u07ec\3\2\2\2\u07f0\u00ed\3\2\2\2\u07f1\u07f2"+
		"\7;\2\2\u07f2\u00ef\3\2\2\2\u07f3\u07f8\5\34\17\2\u07f4\u07f5\7\u016f"+
		"\2\2\u07f5\u07f7\5\34\17\2\u07f6\u07f4\3\2\2\2\u07f7\u07fa\3\2\2\2\u07f8"+
		"\u07f6\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u00f1\3\2\2\2\u07fa\u07f8\3\2"+
		"\2\2\u07fb\u07fc\5\u00f0y\2\u07fc\u00f3\3\2\2\2\u07fd\u0805\5\u00f2z\2"+
		"\u07fe\u07ff\7\4\2\2\u07ff\u0800\7\u016f\2\2\u0800\u0801\5\62\32\2\u0801"+
		"\u0802\7\u016f\2\2\u0802\u0803\5\64\33\2\u0803\u0805\3\2\2\2\u0804\u07fd"+
		"\3\2\2\2\u0804\u07fe\3\2\2\2\u0805\u00f5\3\2\2\2\u0806\u0807\5\u00f2z"+
		"\2\u0807\u00f7\3\2\2\2\u0808\u080b\5\u047a\u023e\2\u0809\u080b\5\u00fa"+
		"~\2\u080a\u0808\3\2\2\2\u080a\u0809\3\2\2\2\u080b\u00f9\3\2\2\2\u080c"+
		"\u080d\7<\2\2\u080d\u080e\7\u0169\2\2\u080e\u0813\5\u00f4{\2\u080f\u0810"+
		"\7\u016d\2\2\u0810\u0812\5\u00f4{\2\u0811\u080f\3\2\2\2\u0812\u0815\3"+
		"\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0816\3\2\2\2\u0815"+
		"\u0813\3\2\2\2\u0816\u0817\7\u016a\2\2\u0817\u00fb\3\2\2\2\u0818\u0819"+
		"\5\u00fe\u0080\2\u0819\u081a\7=\2\2\u081a\u081b\5\u011c\u008f\2\u081b"+
		"\u00fd\3\2\2\2\u081c\u081d\5\u0100\u0081\2\u081d\u081e\7\u0169\2\2\u081e"+
		"\u081f\7\u016a\2\2\u081f\u0829\3\2\2\2\u0820\u0821\7>\2\2\u0821\u0822"+
		"\7\u0169\2\2\u0822\u0829\7\u016a\2\2\u0823\u0829\5\u047a\u023e\2\u0824"+
		"\u0829\5\u0102\u0082\2\u0825\u0829\5\u0106\u0084\2\u0826\u0829\5\u0112"+
		"\u008a\2\u0827\u0829\5\u0116\u008c\2\u0828\u081c\3\2\2\2\u0828\u0820\3"+
		"\2\2\2\u0828\u0823\3\2\2\2\u0828\u0824\3\2\2\2\u0828\u0825\3\2\2\2\u0828"+
		"\u0826\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0828\u0827\3\2\2\2\u0829\u00ff\3\2\2\2\u082a\u082b\t\6\2\2\u082b"+
		"\u0101\3\2\2\2\u082c\u082d\7C\2\2\u082d\u082e\7\u0169\2\2\u082e\u082f"+
		"\5\u0104\u0083\2\u082f\u0830\7\u016a\2\2\u0830\u0103\3\2\2\2\u0831\u0834"+
		"\5\u00d0i\2\u0832\u0834\5\u00d8m\2\u0833\u0831\3\2\2\2\u0833\u0832\3\2"+
		"\2\2\u0834\u0105\3\2\2\2\u0835\u0836\5\u0108\u0085\2\u0836\u0837\7\u0169"+
		"\2\2\u0837\u083e\5\u010a\u0086\2\u0838\u0839\7\u016d\2\2\u0839\u083c\5"+
		"\u010c\u0087\2\u083a\u083b\7\u016d\2\2\u083b\u083d\5\u010e\u0088\2\u083c"+
		"\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083f\3\2\2\2\u083e\u0838\3\2"+
		"\2\2\u083e\u083f\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0842\7\u016a\2\2\u0841"+
		"\u0843\5\u0110\u0089\2\u0842\u0841\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0107"+
		"\3\2\2\2\u0844\u0845\t\7\2\2\u0845\u0109\3\2\2\2\u0846\u0847\5\u0176\u00bc"+
		"\2\u0847\u010b\3\2\2\2\u0848\u0849\5\16\b\2\u0849\u010d\3\2\2\2\u084a"+
		"\u084b\5\u0176\u00bc\2\u084b\u010f\3\2\2\2\u084c\u084d\7F\2\2\u084d\u0851"+
		"\7G\2\2\u084e\u084f\7H\2\2\u084f\u0851\7G\2\2\u0850\u084c\3\2\2\2\u0850"+
		"\u084e\3\2\2\2\u0851\u0111\3\2\2\2\u0852\u0853\5\u0114\u008b\2\u0853\u0854"+
		"\7\u0169\2\2\u0854\u0855\5\u0176\u00bc\2\u0855\u0857\7\u016a\2\2\u0856"+
		"\u0858\5\u0110\u0089\2\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u0113"+
		"\3\2\2\2\u0859\u085a\t\b\2\2\u085a\u0115\3\2\2\2\u085b\u085c\7K\2\2\u085c"+
		"\u085d\7\u0169\2\2\u085d\u085e\5\u0176\u00bc\2\u085e\u085f\7\u016d\2\2"+
		"\u085f\u0860\5\u0118\u008d\2\u0860\u0862\7\u016a\2\2\u0861\u0863\5\u011a"+
		"\u008e\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0865\3\2\2\2\u0864"+
		"\u0866\5\u0110\u0089\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0117"+
		"\3\2\2\2\u0867\u086a\5\u00d0i\2\u0868\u086a\5\u00d8m\2\u0869\u0867\3\2"+
		"\2\2\u0869\u0868\3\2\2\2\u086a\u0119\3\2\2\2\u086b\u086c\7L\2\2\u086c"+
		"\u0870\7M\2\2\u086d\u086e\7L\2\2\u086e\u0870\7N\2\2\u086f\u086b\3\2\2"+
		"\2\u086f\u086d\3\2\2\2\u0870\u011b\3\2\2\2\u0871\u0874\5\u0084C\2\u0872"+
		"\u0874\5\u011e\u0090\2\u0873\u0871\3\2\2\2\u0873\u0872\3\2\2\2\u0874\u011d"+
		"\3\2\2\2\u0875\u0876\5\u030e\u0188\2\u0876\u011f\3\2\2\2\u0877\u087a\5"+
		"\u0122\u0092\2\u0878\u087a\5\u0124\u0093\2\u0879\u0877\3\2\2\2\u0879\u0878"+
		"\3\2\2\2\u087a\u0121\3\2\2\2\u087b\u087c\7>\2\2\u087c\u087d\7\u0169\2"+
		"\2\u087d\u087e\5\u0126\u0094\2\u087e\u087f\7\u016a\2\2\u087f\u0123\3\2"+
		"\2\2\u0880\u0881\7O\2\2\u0881\u0882\7\u0169\2\2\u0882\u0883\5\u0176\u00bc"+
		"\2\u0883\u0884\7P\2\2\u0884\u0887\5\u0128\u0095\2\u0885\u0886\7\u016d"+
		"\2\2\u0886\u0888\5\u012e\u0098\2\u0887\u0885\3\2\2\2\u0887\u0888\3\2\2"+
		"\2\u0888\u0889\3\2\2\2\u0889\u088a\7\u016a\2\2\u088a\u0125\3\2\2\2\u088b"+
		"\u088c\t\t\2\2\u088c\u0127\3\2\2\2\u088d\u088f\5\u0126\u0094\2\u088e\u0890"+
		"\5\u012a\u0096\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0129\3"+
		"\2\2\2\u0891\u0892\7\u016c\2\2\u0892\u0896\5\u012c\u0097\2\u0893\u0894"+
		"\7\u016e\2\2\u0894\u0896\5\u012c\u0097\2\u0895\u0891\3\2\2\2\u0895\u0893"+
		"\3\2\2\2\u0896\u012b\3\2\2\2\u0897\u089a\5\u00d0i\2\u0898\u089a\5\u00d8"+
		"m\2\u0899\u0897\3\2\2\2\u0899\u0898\3\2\2\2\u089a\u012d\3\2\2\2\u089b"+
		"\u089c\5\u0176\u00bc\2\u089c\u012f\3\2\2\2\u089d\u08a0\5\u0132\u009a\2"+
		"\u089e\u08a0\5\u0134\u009b\2\u089f\u089d\3\2\2\2\u089f\u089e\3\2\2\2\u08a0"+
		"\u0131\3\2\2\2\u08a1\u08a2\7W\2\2\u08a2\u08a3\7\u0169\2\2\u08a3\u08a4"+
		"\5\u0176\u00bc\2\u08a4\u08a5\7\u016d\2\2\u08a5\u08a6\5\u0176\u00bc\2\u08a6"+
		"\u08a7\7\u016a\2\2\u08a7\u08b4\3\2\2\2\u08a8\u08a9\7X\2\2\u08a9\u08aa"+
		"\7\u0169\2\2\u08aa\u08ad\5\u0176\u00bc\2\u08ab\u08ac\7\u016d\2\2\u08ac"+
		"\u08ae\5\u0176\u00bc\2\u08ad\u08ab\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08ad"+
		"\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b2\7\u016a\2"+
		"\2\u08b2\u08b4\3\2\2\2\u08b3\u08a1\3\2\2\2\u08b3\u08a8\3\2\2\2\u08b4\u0133"+
		"\3\2\2\2\u08b5\u08b8\5\u0136\u009c\2\u08b6\u08b8\5\u0138\u009d\2\u08b7"+
		"\u08b5\3\2\2\2\u08b7\u08b6\3\2\2\2\u08b8\u0135\3\2\2\2\u08b9\u08ba\7Y"+
		"\2\2\u08ba\u08bc\5\u0140\u00a1\2\u08bb\u08bd\5\u013a\u009e\2\u08bc\u08bb"+
		"\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08bc\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf"+
		"\u08c1\3\2\2\2\u08c0\u08c2\5\u013e\u00a0\2\u08c1\u08c0\3\2\2\2\u08c1\u08c2"+
		"\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c4\7Z\2\2\u08c4\u0137\3\2\2\2\u08c5"+
		"\u08c7\7Y\2\2\u08c6\u08c8\5\u013c\u009f\2\u08c7\u08c6\3\2\2\2\u08c8\u08c9"+
		"\3\2\2\2\u08c9\u08c7\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb"+
		"\u08cd\5\u013e\u00a0\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce"+
		"\3\2\2\2\u08ce\u08cf\7Z\2\2\u08cf\u0139\3\2\2\2\u08d0\u08d1\7[\2\2\u08d1"+
		"\u08d2\5\u0142\u00a2\2\u08d2\u08d3\7\\\2\2\u08d3\u08d4\5\u0146\u00a4\2"+
		"\u08d4\u013b\3\2\2\2\u08d5\u08d6\7[\2\2\u08d6\u08d7\5\u0446\u0224\2\u08d7"+
		"\u08d8\7\\\2\2\u08d8\u08d9\5\u0146\u00a4\2\u08d9\u013d\3\2\2\2\u08da\u08db"+
		"\7]\2\2\u08db\u08dc\5\u0146\u00a4\2\u08dc\u013f\3\2\2\2\u08dd\u08e0\5"+
		"\u0296\u014c\2\u08de\u08e0\5\u03f2\u01fa\2\u08df\u08dd\3\2\2\2\u08df\u08de"+
		"\3\2\2\2\u08e0\u0141\3\2\2\2\u08e1\u08e6\5\u0144\u00a3\2\u08e2\u08e3\7"+
		"\u016d\2\2\u08e3\u08e5\5\u0144\u00a3\2\u08e4\u08e2\3\2\2\2\u08e5\u08e8"+
		"\3\2\2\2\u08e6\u08e4\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u0143\3\2\2\2\u08e8"+
		"\u08e6\3\2\2\2\u08e9\u08fc\5\u0296\u014c\2\u08ea\u08fc\5\u038e\u01c8\2"+
		"\u08eb\u08fc\5\u0394\u01cb\2\u08ec\u08fc\5\u0398\u01cd\2\u08ed\u08fc\5"+
		"\u03a2\u01d2\2\u08ee\u08fc\5\u03aa\u01d6\2\u08ef\u08fc\5\u03b2\u01da\2"+
		"\u08f0\u08fc\5\u03d4\u01eb\2\u08f1\u08fc\5\u03d8\u01ed\2\u08f2\u08fc\5"+
		"\u03dc\u01ef\2\u08f3\u08fc\5\u03ea\u01f6\2\u08f4\u08fc\5\u03ee\u01f8\2"+
		"\u08f5\u08fc\5\u03f4\u01fb\2\u08f6\u08fc\5\u03fc\u01ff\2\u08f7\u08fc\5"+
		"\u0404\u0203\2\u08f8\u08fc\5\u0408\u0205\2\u08f9\u08fc\5\u040c\u0207\2"+
		"\u08fa\u08fc\5\u0410\u0209\2\u08fb\u08e9\3\2\2\2\u08fb\u08ea\3\2\2\2\u08fb"+
		"\u08eb\3\2\2\2\u08fb\u08ec\3\2\2\2\u08fb\u08ed\3\2\2\2\u08fb\u08ee\3\2"+
		"\2\2\u08fb\u08ef\3\2\2\2\u08fb\u08f0\3\2\2\2\u08fb\u08f1\3\2\2\2\u08fb"+
		"\u08f2\3\2\2\2\u08fb\u08f3\3\2\2\2\u08fb\u08f4\3\2\2\2\u08fb\u08f5\3\2"+
		"\2\2\u08fb\u08f6\3\2\2\2\u08fb\u08f7\3\2\2\2\u08fb\u08f8\3\2\2\2\u08fb"+
		"\u08f9\3\2\2\2\u08fb\u08fa\3\2\2\2\u08fc\u0145\3\2\2\2\u08fd\u0900\5\u0148"+
		"\u00a5\2\u08fe\u0900\7:\2\2\u08ff\u08fd\3\2\2\2\u08ff\u08fe\3\2\2\2\u0900"+
		"\u0147\3\2\2\2\u0901\u0902\5\u0176\u00bc\2\u0902\u0149\3\2\2\2\u0903\u0904"+
		"\7^\2\2\u0904\u0905\7\u0169\2\2\u0905\u0906\5\u014c\u00a7\2\u0906\u0907"+
		"\7_\2\2\u0907\u0908\5\u014e\u00a8\2\u0908\u0909\7\u016a\2\2\u0909\u014b"+
		"\3\2\2\2\u090a\u090d\5\u0176\u00bc\2\u090b\u090d\5\u00e8u\2\u090c\u090a"+
		"\3\2\2\2\u090c\u090b\3\2\2\2\u090d\u014d\3\2\2\2\u090e\u0911\5$\23\2\u090f"+
		"\u0911\5\u0086D\2\u0910\u090e\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u014f"+
		"\3\2\2\2\u0912\u0913\7`\2\2\u0913\u0914\7\66\2\2\u0914\u0915\79\2\2\u0915"+
		"\u0916\5f\64\2\u0916\u0151\3\2\2\2\u0917\u0918\7a\2\2\u0918\u0919\7\u0169"+
		"\2\2\u0919\u091a\5\u0154\u00ab\2\u091a\u091b\7_\2\2\u091b\u091c\5\u0156"+
		"\u00ac\2\u091c\u091d\7\u016a\2\2\u091d\u0153\3\2\2\2\u091e\u091f\5\u0176"+
		"\u00bc\2\u091f\u0155\3\2\2\2\u0920\u0923\5\u00be`\2\u0921\u0923\5\u00b8"+
		"]\2\u0922\u0920\3\2\2\2\u0922\u0921\3\2\2\2\u0923\u0157\3\2\2\2\u0924"+
		"\u0927\5\u015a\u00ae\2\u0925\u0927\5\u015c\u00af\2\u0926\u0924\3\2\2\2"+
		"\u0926\u0925\3\2\2\2\u0927\u0159\3\2\2\2\u0928\u0929\5\u00c4c\2\u0929"+
		"\u092a\7\u016f\2\2\u092a\u092c\5@!\2\u092b\u092d\5\u0454\u022b\2\u092c"+
		"\u092b\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u015b\3\2\2\2\u092e\u092f\7\u0169"+
		"\2\2\u092f\u0930\5\u00c4c\2\u0930\u0931\7_\2\2\u0931\u0932\5\u0086D\2"+
		"\u0932\u0933\7\u016a\2\2\u0933\u0934\7\u016f\2\2\u0934\u0936\5@!\2\u0935"+
		"\u0937\5\u0454\u022b\2\u0936\u0935\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u015d"+
		"\3\2\2\2\u0938\u0939\5\u0450\u0229\2\u0939\u015f\3\2\2\2\u093a\u093b\5"+
		"\u0450\u0229\2\u093b\u0161\3\2\2\2\u093c\u093d\5\u00be`\2\u093d\u093e"+
		"\7\u018d\2\2\u093e\u0940\5@!\2\u093f\u0941\5\u0454\u022b\2\u0940\u093f"+
		"\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0163\3\2\2\2\u0942\u0943\5\u0450\u0229"+
		"\2\u0943\u0165\3\2\2\2\u0944\u0945\7b\2\2\u0945\u0946\5\u00be`\2\u0946"+
		"\u0947\5\u0454\u022b\2\u0947\u0167\3\2\2\2\u0948\u094b\5\u0158\u00ad\2"+
		"\u0949\u094b\5\u0450\u0229\2\u094a\u0948\3\2\2\2\u094a\u0949\3\2\2\2\u094b"+
		"\u0169\3\2\2\2\u094c\u094d\7\u018c\2\2\u094d\u016b\3\2\2\2\u094e\u094f"+
		"\5\u017c\u00bf\2\u094f\u0950\5\u016a\u00b6\2\u0950\u0951\5`\61\2\u0951"+
		"\u016d\3\2\2\2\u0952\u0953\5\u00c4c\2\u0953\u0954\5\u016a\u00b6\2\u0954"+
		"\u0955\5@!\2\u0955\u0956\5\u0454\u022b\2\u0956\u016f\3\2\2\2\u0957\u0958"+
		"\7c\2\2\u0958\u0959\7\u0169\2\2\u0959\u095a\5\u017c\u00bf\2\u095a\u095b"+
		"\7\u016a\2\2\u095b\u0171\3\2\2\2\u095c\u095d\5\u0258\u012d\2\u095d\u095e"+
		"\7\u0178\2\2\u095e\u095f\5\u0180\u00c1\2\u095f\u0960\7\u0179\2\2\u0960"+
		"\u0173\3\2\2\2\u0961\u0962\7d\2\2\u0962\u0963\7\u0169\2\2\u0963\u0964"+
		"\5\u026a\u0136\2\u0964\u0965\7\u016a\2\2\u0965\u0175\3\2\2\2\u0966\u096a"+
		"\5\u0178\u00bd\2\u0967\u096a\5\u0248\u0125\2\u0968\u096a\5\u0290\u0149"+
		"\2\u0969\u0966\3\2\2\2\u0969\u0967\3\2\2\2\u0969\u0968\3\2\2\2\u096a\u0177"+
		"\3\2\2\2\u096b\u0973\5\u0180\u00c1\2\u096c\u0973\5\u01d8\u00ed\2\u096d"+
		"\u0973\5\u0222\u0112\2\u096e\u0973\5\u023a\u011e\2\u096f\u0973\5\u017a"+
		"\u00be\2\u0970\u0973\5\u017c\u00bf\2\u0971\u0973\5\u017e\u00c0\2\u0972"+
		"\u096b\3\2\2\2\u0972\u096c\3\2\2\2\u0972\u096d\3\2\2\2\u0972\u096e\3\2"+
		"\2\2\u0972\u096f\3\2\2\2\u0972\u0970\3\2\2\2\u0972\u0971\3\2\2\2\u0973"+
		"\u0179\3\2\2\2\u0974\u0975\5\u00c4c\2\u0975\u017b\3\2\2\2\u0976\u0977"+
		"\5\u00c4c\2\u0977\u017d\3\2\2\2\u0978\u097b\5\u0258\u012d\2\u0979\u097b"+
		"\5\u026a\u0136\2\u097a\u0978\3\2\2\2\u097a\u0979\3\2\2\2\u097b\u017f\3"+
		"\2\2\2\u097c\u097d\b\u00c1\1\2\u097d\u097e\5\u0182\u00c2\2\u097e\u0987"+
		"\3\2\2\2\u097f\u0980\f\4\2\2\u0980\u0981\7\u016c\2\2\u0981\u0986\5\u0182"+
		"\u00c2\2\u0982\u0983\f\3\2\2\u0983\u0984\7\u016e\2\2\u0984\u0986\5\u0182"+
		"\u00c2\2\u0985\u097f\3\2\2\2\u0985\u0982\3\2\2\2\u0986\u0989\3\2\2\2\u0987"+
		"\u0985\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0181\3\2\2\2\u0989\u0987\3\2"+
		"\2\2\u098a\u098b\b\u00c2\1\2\u098b\u098c\5\u0184\u00c3\2\u098c\u0995\3"+
		"\2\2\2\u098d\u098e\f\4\2\2\u098e\u098f\7\u016b\2\2\u098f\u0994\5\u0184"+
		"\u00c3\2\u0990\u0991\f\3\2\2\u0991\u0992\7\u0170\2\2\u0992\u0994\5\u0184"+
		"\u00c3\2\u0993\u098d\3\2\2\2\u0993\u0990\3\2\2\2\u0994\u0997\3\2\2\2\u0995"+
		"\u0993\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0183\3\2\2\2\u0997\u0995\3\2"+
		"\2\2\u0998\u099a\5\20\t\2\u0999\u0998\3\2\2\2\u0999\u099a\3\2\2\2\u099a"+
		"\u099b\3\2\2\2\u099b\u099c\5\u0186\u00c4\2\u099c\u0185\3\2\2\2\u099d\u09a0"+
		"\5\u00c4c\2\u099e\u09a0\5\u0188\u00c5\2\u099f\u099d\3\2\2\2\u099f\u099e"+
		"\3\2\2\2\u09a0\u0187\3\2\2\2\u09a1\u09b5\5\u018a\u00c6\2\u09a2\u09b5\5"+
		"\u018c\u00c7\2\u09a3\u09b5\5\u0194\u00cb\2\u09a4\u09b5\5\u01aa\u00d6\2"+
		"\u09a5\u09b5\5\u01a4\u00d3\2\u09a6\u09b5\5\u01b2\u00da\2\u09a7\u09b5\5"+
		"\u01b4\u00db\2\u09a8\u09b5\5\u01b6\u00dc\2\u09a9\u09b5\5\u01b8\u00dd\2"+
		"\u09aa\u09b5\5\u0544\u02a3\2\u09ab\u09b5\5\u0548\u02a5\2\u09ac\u09b5\5"+
		"\u054e\u02a8\2\u09ad\u09b5\5\u01be\u00e0\2\u09ae\u09b5\5\u01c0\u00e1\2"+
		"\u09af\u09b5\5\u01c2\u00e2\2\u09b0\u09b5\5\u01c8\u00e5\2\u09b1\u09b5\5"+
		"\u01ca\u00e6\2\u09b2\u09b5\5\u01cc\u00e7\2\u09b3\u09b5\5\u01ce\u00e8\2"+
		"\u09b4\u09a1\3\2\2\2\u09b4\u09a2\3\2\2\2\u09b4\u09a3\3\2\2\2\u09b4\u09a4"+
		"\3\2\2\2\u09b4\u09a5\3\2\2\2\u09b4\u09a6\3\2\2\2\u09b4\u09a7\3\2\2\2\u09b4"+
		"\u09a8\3\2\2\2\u09b4\u09a9\3\2\2\2\u09b4\u09aa\3\2\2\2\u09b4\u09ab\3\2"+
		"\2\2\u09b4\u09ac\3\2\2\2\u09b4\u09ad\3\2\2\2\u09b4\u09ae\3\2\2\2\u09b4"+
		"\u09af\3\2\2\2\u09b4\u09b0\3\2\2\2\u09b4\u09b1\3\2\2\2\u09b4\u09b2\3\2"+
		"\2\2\u09b4\u09b3\3\2\2\2\u09b5\u0189\3\2\2\2\u09b6\u09b9\5\u019c\u00cf"+
		"\2\u09b7\u09b9\5\u01a2\u00d2\2\u09b8\u09b6\3\2\2\2\u09b8\u09b7\3\2\2\2"+
		"\u09b9\u018b\3\2\2\2\u09ba\u09bb\7e\2\2\u09bb\u09bc\7\u0169\2\2\u09bc"+
		"\u09bf\5\u018e\u00c8\2\u09bd\u09be\7f\2\2\u09be\u09c0\5\u0190\u00c9\2"+
		"\u09bf\u09bd\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2"+
		"\7g\2\2\u09c2\u09c5\5\u0192\u00ca\2\u09c3\u09c4\7L\2\2\u09c4\u09c6\5\u021e"+
		"\u0110\2\u09c5\u09c3\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c9\3\2\2\2\u09c7"+
		"\u09c8\7h\2\2\u09c8\u09ca\5\u00a0Q\2\u09c9\u09c7\3\2\2\2\u09c9\u09ca\3"+
		"\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cc\7\u016a\2\2\u09cc\u018d\3\2\2\2"+
		"\u09cd\u09ce\5\u01da\u00ee\2\u09ce\u018f\3\2\2\2\u09cf\u09d0\5\u01da\u00ee"+
		"\2\u09d0\u0191\3\2\2\2\u09d1\u09d2\5\u01da\u00ee\2\u09d2\u0193\3\2\2\2"+
		"\u09d3\u09d4\7i\2\2\u09d4\u09d6\7\u0169\2\2\u09d5\u09d7\5\u0196\u00cc"+
		"\2\u09d6\u09d5\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09db"+
		"\5\u018e\u00c8\2\u09d9\u09da\7f\2\2\u09da\u09dc\5\u0190\u00c9\2\u09db"+
		"\u09d9\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd\u09de\7g"+
		"\2\2\u09de\u09e1\5\u0192\u00ca\2\u09df\u09e0\7L\2\2\u09e0\u09e2\5\u021e"+
		"\u0110\2\u09e1\u09df\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e5\3\2\2\2\u09e3"+
		"\u09e4\7h\2\2\u09e4\u09e6\5\u00a0Q\2\u09e5\u09e3\3\2\2\2\u09e5\u09e6\3"+
		"\2\2\2\u09e6\u09e9\3\2\2\2\u09e7\u09e8\7j\2\2\u09e8\u09ea\5\u0198\u00cd"+
		"\2\u09e9\u09e7\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09ed\3\2\2\2\u09eb\u09ec"+
		"\7k\2\2\u09ec\u09ee\5\u019a\u00ce\2\u09ed\u09eb\3\2\2\2\u09ed\u09ee\3"+
		"\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0\7\u016a\2\2\u09f0\u0195\3\2\2\2"+
		"\u09f1\u09f2\t\n\2\2\u09f2\u0197\3\2\2\2\u09f3\u09f4\5\u0180\u00c1\2\u09f4"+
		"\u0199\3\2\2\2\u09f5\u09f6\5\u0180\u00c1\2\u09f6\u019b\3\2\2\2\u09f7\u09f8"+
		"\7n\2\2\u09f8\u09f9\7\u0169\2\2\u09f9\u09fa\5\u019e\u00d0\2\u09fa\u09fb"+
		"\7g\2\2\u09fb\u09fe\5\u01a0\u00d1\2\u09fc\u09fd\7h\2\2\u09fd\u09ff\5\u00a0"+
		"Q\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00"+
		"\u0a01\7\u016a\2\2\u0a01\u019d\3\2\2\2\u0a02\u0a03\5\u01da\u00ee\2\u0a03"+
		"\u019f\3\2\2\2\u0a04\u0a05\5\u01da\u00ee\2\u0a05\u01a1\3\2\2\2\u0a06\u0a07"+
		"\7n\2\2\u0a07\u0a08\7\u0169\2\2\u0a08\u0a09\5\u01e0\u00f1\2\u0a09\u0a0a"+
		"\7g\2\2\u0a0a\u0a0b\5\u01e0\u00f1\2\u0a0b\u0a0c\7\u016a\2\2\u0a0c\u01a3"+
		"\3\2\2\2\u0a0d\u0a10\5\u01a6\u00d4\2\u0a0e\u0a10\5\u01a8\u00d5\2\u0a0f"+
		"\u0a0d\3\2\2\2\u0a0f\u0a0e\3\2\2\2\u0a10\u01a5\3\2\2\2\u0a11\u0a12\t\13"+
		"\2\2\u0a12\u0a13\7\u0169\2\2\u0a13\u0a16\5\u01da\u00ee\2\u0a14\u0a15\7"+
		"h\2\2\u0a15\u0a17\5\u00a0Q\2\u0a16\u0a14\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17"+
		"\u0a18\3\2\2\2\u0a18\u0a19\7\u016a\2\2\u0a19\u01a7\3\2\2\2\u0a1a\u0a1b"+
		"\7q\2\2\u0a1b\u0a1c\7\u0169\2\2\u0a1c\u0a1d\5\u01d8\u00ed\2\u0a1d\u0a1e"+
		"\7\u016a\2\2\u0a1e\u01a9\3\2\2\2\u0a1f\u0a20\7r\2\2\u0a20\u0a21\7\u0169"+
		"\2\2\u0a21\u0a22\5\u01ac\u00d7\2\u0a22\u0a23\7L\2\2\u0a23\u0a24\5\u01b0"+
		"\u00d9\2\u0a24\u0a25\7\u016a\2\2\u0a25\u01ab\3\2\2\2\u0a26\u0a29\7\u01a2"+
		"\2\2\u0a27\u0a29\5\u01ae\u00d8\2\u0a28\u0a26\3\2\2\2\u0a28\u0a27\3\2\2"+
		"\2\u0a29\u01ad\3\2\2\2\u0a2a\u0a2b\t\f\2\2\u0a2b\u01af\3\2\2\2\u0a2c\u0a2f"+
		"\5\u0222\u0112\2\u0a2d\u0a2f\5\u023a\u011e\2\u0a2e\u0a2c\3\2\2\2\u0a2e"+
		"\u0a2d\3\2\2\2\u0a2f\u01b1\3\2\2\2\u0a30\u0a31\7u\2\2\u0a31\u0a32\7\u0169"+
		"\2\2\u0a32\u0a33\5\u017e\u00c0\2\u0a33\u0a34\7\u016a\2\2\u0a34\u01b3\3"+
		"\2\2\2\u0a35\u0a36\7v\2\2\u0a36\u0a37\7\u0169\2\2\u0a37\u0a38\5\u0258"+
		"\u012d\2\u0a38\u0a39\7\u016a\2\2\u0a39\u01b5\3\2\2\2\u0a3a\u0a3b\7w\2"+
		"\2\u0a3b\u0a3c\7\u0169\2\2\u0a3c\u0a3d\5\u0180\u00c1\2\u0a3d\u0a3e\7\u016a"+
		"\2\2\u0a3e\u01b7\3\2\2\2\u0a3f\u0a40\7x\2\2\u0a40\u0a41\7\u0169\2\2\u0a41"+
		"\u0a42\5\u01ba\u00de\2\u0a42\u0a43\7\u016d\2\2\u0a43\u0a44\5\u01bc\u00df"+
		"\2\u0a44\u0a45\7\u016a\2\2\u0a45\u01b9\3\2\2\2\u0a46\u0a47\5\u0180\u00c1"+
		"\2\u0a47\u01bb\3\2\2\2\u0a48\u0a49\5\u0180\u00c1\2\u0a49\u01bd\3\2\2\2"+
		"\u0a4a\u0a4b\7y\2\2\u0a4b\u0a4c\7\u0169\2\2\u0a4c\u0a4d\5\u0180\u00c1"+
		"\2\u0a4d\u0a4e\7\u016a\2\2\u0a4e\u01bf\3\2\2\2\u0a4f\u0a50\7z\2\2\u0a50"+
		"\u0a51\7\u0169\2\2\u0a51\u0a52\5\u0180\u00c1\2\u0a52\u0a53\7\u016a\2\2"+
		"\u0a53\u01c1\3\2\2\2\u0a54\u0a55\7{\2\2\u0a55\u0a56\7\u0169\2\2\u0a56"+
		"\u0a57\5\u01c4\u00e3\2\u0a57\u0a58\7\u016d\2\2\u0a58\u0a59\5\u01c6\u00e4"+
		"\2\u0a59\u0a5a\7\u016a\2\2\u0a5a\u01c3\3\2\2\2\u0a5b\u0a5c\5\u0180\u00c1"+
		"\2\u0a5c\u01c5\3\2\2\2\u0a5d\u0a5e\5\u0180\u00c1\2\u0a5e\u01c7\3\2\2\2"+
		"\u0a5f\u0a60\7|\2\2\u0a60\u0a61\7\u0169\2\2\u0a61\u0a62\5\u0180\u00c1"+
		"\2\u0a62\u0a63\7\u016a\2\2\u0a63\u01c9\3\2\2\2\u0a64\u0a65\7}\2\2\u0a65"+
		"\u0a66\7\u0169\2\2\u0a66\u0a67\5\u0180\u00c1\2\u0a67\u0a68\7\u016a\2\2"+
		"\u0a68\u01cb\3\2\2\2\u0a69\u0a6a\t\r\2\2\u0a6a\u0a6b\7\u0169\2\2\u0a6b"+
		"\u0a6c\5\u0180\u00c1\2\u0a6c\u0a6d\7\u016a\2\2\u0a6d\u01cd\3\2\2\2\u0a6e"+
		"\u0a6f\7\u0080\2\2\u0a6f\u0a70\7\u0169\2\2\u0a70\u0a71\5\u01d0\u00e9\2"+
		"\u0a71\u0a72\7\u016d\2\2\u0a72\u0a73\5\u01d2\u00ea\2\u0a73\u0a74\7\u016d"+
		"\2\2\u0a74\u0a75\5\u01d4\u00eb\2\u0a75\u0a76\7\u016d\2\2\u0a76\u0a77\5"+
		"\u01d6\u00ec\2\u0a77\u0a78\7\u016a\2\2\u0a78\u01cf\3\2\2\2\u0a79\u0a7a"+
		"\5\u0180\u00c1\2\u0a7a\u01d1\3\2\2\2\u0a7b\u0a7c\5\u0180\u00c1\2\u0a7c"+
		"\u01d3\3\2\2\2\u0a7d\u0a7e\5\u0180\u00c1\2\u0a7e\u01d5\3\2\2\2\u0a7f\u0a80"+
		"\5\u0180\u00c1\2\u0a80\u01d7\3\2\2\2\u0a81\u0a84\5\u01da\u00ee\2\u0a82"+
		"\u0a84\5\u01e0\u00f1\2\u0a83\u0a81\3\2\2\2\u0a83\u0a82\3\2\2\2\u0a84\u01d9"+
		"\3\2\2\2\u0a85\u0a86\b\u00ee\1\2\u0a86\u0a87\5\u01dc\u00ef\2\u0a87\u0a8d"+
		"\3\2\2\2\u0a88\u0a89\f\4\2\2\u0a89\u0a8a\7\u018b\2\2\u0a8a\u0a8c\5\u01dc"+
		"\u00ef\2\u0a8b\u0a88\3\2\2\2\u0a8c\u0a8f\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8d"+
		"\u0a8e\3\2\2\2\u0a8e\u01db\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a90\u0a92\5\u01de"+
		"\u00f0\2\u0a91\u0a93\5\u0470\u0239\2\u0a92\u0a91\3\2\2\2\u0a92\u0a93\3"+
		"\2\2\2\u0a93\u01dd\3\2\2\2\u0a94\u0a97\5\u00c4c\2\u0a95\u0a97\5\u01e6"+
		"\u00f4\2\u0a96\u0a94\3\2\2\2\u0a96\u0a95\3\2\2\2\u0a97\u01df\3\2\2\2\u0a98"+
		"\u0a99\b\u00f1\1\2\u0a99\u0a9a\5\u01e2\u00f2\2\u0a9a\u0aa0\3\2\2\2\u0a9b"+
		"\u0a9c\f\4\2\2\u0a9c\u0a9d\7\u018b\2\2\u0a9d\u0a9f\5\u01e2\u00f2\2\u0a9e"+
		"\u0a9b\3\2\2\2\u0a9f\u0aa2\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2"+
		"\2\2\u0aa1\u01e1\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa4\5\u01e4\u00f3"+
		"\2\u0aa4\u01e3\3\2\2\2\u0aa5\u0aa8\5\u00c4c\2\u0aa6\u0aa8\5\u01e6\u00f4"+
		"\2\u0aa7\u0aa5\3\2\2\2\u0aa7\u0aa6\3\2\2\2\u0aa8\u01e5\3\2\2\2\u0aa9\u0aac"+
		"\5\u01e8\u00f5\2\u0aaa\u0aac\5\u0210\u0109\2\u0aab\u0aa9\3\2\2\2\u0aab"+
		"\u0aaa\3\2\2\2\u0aac\u01e7\3\2\2\2\u0aad\u0ab9\5\u01ea\u00f6\2\u0aae\u0ab9"+
		"\5\u01ec\u00f7\2\u0aaf\u0ab9\5\u01ee\u00f8\2\u0ab0\u0ab9\5\u01f0\u00f9"+
		"\2\u0ab1\u0ab9\5\u01f2\u00fa\2\u0ab2\u0ab9\5\u01f4\u00fb\2\u0ab3\u0ab9"+
		"\5\u01f6\u00fc\2\u0ab4\u0ab9\5\u01fc\u00ff\2\u0ab5\u0ab9\5\u0206\u0104"+
		"\2\u0ab6\u0ab9\5\u0208\u0105\2\u0ab7\u0ab9\5\u020e\u0108\2\u0ab8\u0aad"+
		"\3\2\2\2\u0ab8\u0aae\3\2\2\2\u0ab8\u0aaf\3\2\2\2\u0ab8\u0ab0\3\2\2\2\u0ab8"+
		"\u0ab1\3\2\2\2\u0ab8\u0ab2\3\2\2\2\u0ab8\u0ab3\3\2\2\2\u0ab8\u0ab4\3\2"+
		"\2\2\u0ab8\u0ab5\3\2\2\2\u0ab8\u0ab6\3\2\2\2\u0ab8\u0ab7\3\2\2\2\u0ab9"+
		"\u01e9\3\2\2\2\u0aba\u0abb\7\u0081\2\2\u0abb\u0abc\7\u0169\2\2\u0abc\u0abd"+
		"\5\u01da\u00ee\2\u0abd\u0abe\7L\2\2\u0abe\u0ac1\5\u021e\u0110\2\u0abf"+
		"\u0ac0\79\2\2\u0ac0\u0ac2\5\u0220\u0111\2\u0ac1\u0abf\3\2\2\2\u0ac1\u0ac2"+
		"\3\2\2\2\u0ac2\u0ac5\3\2\2\2\u0ac3\u0ac4\7h\2\2\u0ac4\u0ac6\5\u00a0Q\2"+
		"\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ac8"+
		"\7\u016a\2\2\u0ac8\u01eb\3\2\2\2\u0ac9\u0aca\7\u0081\2\2\u0aca\u0acb\7"+
		"\u0169\2\2\u0acb\u0acc\5\u01da\u00ee\2\u0acc\u0acd\7\u0082\2\2\u0acd\u0ace"+
		"\5\u01da\u00ee\2\u0ace\u0acf\7\u0083\2\2\u0acf\u0ad0\5\u03a6\u01d4\2\u0ad0"+
		"\u0ad1\7\u016a\2\2\u0ad1\u01ed\3\2\2\2\u0ad2\u0ad3\7\u0084\2\2\u0ad3\u0ad4"+
		"\7\u0169\2\2\u0ad4\u0ad7\5\u018e\u00c8\2\u0ad5\u0ad6\7f\2\2\u0ad6\u0ad8"+
		"\5\u0190\u00c9\2\u0ad7\u0ad5\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u0ad9\3"+
		"\2\2\2\u0ad9\u0ada\7g\2\2\u0ada\u0add\5\u0192\u00ca\2\u0adb\u0adc\7L\2"+
		"\2\u0adc\u0ade\5\u021e\u0110\2\u0add\u0adb\3\2\2\2\u0add\u0ade\3\2\2\2"+
		"\u0ade\u0ae1\3\2\2\2\u0adf\u0ae0\7h\2\2\u0ae0\u0ae2\5\u00a0Q\2\u0ae1\u0adf"+
		"\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae5\3\2\2\2\u0ae3\u0ae4\7j\2\2\u0ae4"+
		"\u0ae6\5\u0198\u00cd\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0ae9"+
		"\3\2\2\2\u0ae7\u0ae8\7k\2\2\u0ae8\u0aea\5\u019a\u00ce\2\u0ae9\u0ae7\3"+
		"\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aeb\3\2\2\2\u0aeb\u0aec\7\u016a\2\2"+
		"\u0aec\u01ef\3\2\2\2\u0aed\u0aee\t\16\2\2\u0aee\u0aef\7\u0169\2\2\u0aef"+
		"\u0af0\5\u01da\u00ee\2\u0af0\u0af1\7\u016a\2\2\u0af1\u01f1\3\2\2\2\u0af2"+
		"\u0af3\7\u0087\2\2\u0af3\u0af4\7\u0169\2\2\u0af4\u0af5\5\u01da\u00ee\2"+
		"\u0af5\u0af6\7h\2\2\u0af6\u0af7\5Z.\2\u0af7\u0af8\7\u016a\2\2\u0af8\u01f3"+
		"\3\2\2\2\u0af9\u0afa\7\u0088\2\2\u0afa\u0afb\7\u0169\2\2\u0afb\u0afc\5"+
		"\u01da\u00ee\2\u0afc\u0afd\7h\2\2\u0afd\u0afe\5X-\2\u0afe\u0aff\7\u016a"+
		"\2\2\u0aff\u01f5\3\2\2\2\u0b00\u0b01\7\u0089\2\2\u0b01\u0b02\7\u0169\2"+
		"\2\u0b02\u0b05\5\u018e\u00c8\2\u0b03\u0b04\7f\2\2\u0b04\u0b06\5\u0190"+
		"\u00c9\2\u0b05\u0b03\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07"+
		"\u0b08\7g\2\2\u0b08\u0b0b\5\u0192\u00ca\2\u0b09\u0b0a\7%\2\2\u0b0a\u0b0c"+
		"\5\u01f8\u00fd\2\u0b0b\u0b09\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0f\3"+
		"\2\2\2\u0b0d\u0b0e\7L\2\2\u0b0e\u0b10\5\u021e\u0110\2\u0b0f\u0b0d\3\2"+
		"\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b13\3\2\2\2\u0b11\u0b12\7h\2\2\u0b12"+
		"\u0b14\5\u00a0Q\2\u0b13\u0b11\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b17"+
		"\3\2\2\2\u0b15\u0b16\7j\2\2\u0b16\u0b18\5\u01fa\u00fe\2\u0b17\u0b15\3"+
		"\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1a\7\u016a\2\2"+
		"\u0b1a\u01f7\3\2\2\2\u0b1b\u0b1c\5\u01da\u00ee\2\u0b1c\u01f9\3\2\2\2\u0b1d"+
		"\u0b20\5\u0198\u00cd\2\u0b1e\u0b20\7\u008a\2\2\u0b1f\u0b1d\3\2\2\2\u0b1f"+
		"\u0b1e\3\2\2\2\u0b20\u01fb\3\2\2\2\u0b21\u0b22\7\u008b\2\2\u0b22\u0b23"+
		"\7\u0169\2\2\u0b23\u0b24\5\u01fe\u0100\2\u0b24\u0b25\7\u016a\2\2\u0b25"+
		"\u01fd\3\2\2\2\u0b26\u0b28\5\u0202\u0102\2\u0b27\u0b26\3\2\2\2\u0b27\u0b28"+
		"\3\2\2\2\u0b28\u0b2a\3\2\2\2\u0b29\u0b2b\5\u0204\u0103\2\u0b2a\u0b29\3"+
		"\2\2\2\u0b2a\u0b2b\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2e\7L\2\2\u0b2d"+
		"\u0b27\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b30\5\u0200"+
		"\u0101\2\u0b30\u01ff\3\2\2\2\u0b31\u0b32\5\u01da\u00ee\2\u0b32\u0201\3"+
		"\2\2\2\u0b33\u0b34\t\17\2\2\u0b34\u0203\3\2\2\2\u0b35\u0b36\5\u01da\u00ee"+
		"\2\u0b36\u0205\3\2\2\2\u0b37\u0b38\7\u008f\2\2\u0b38\u0b39\7\u0169\2\2"+
		"\u0b39\u0b3a\5\u01da\u00ee\2\u0b3a\u0b3b\7\u0090\2\2\u0b3b\u0b3c\5\u01da"+
		"\u00ee\2\u0b3c\u0b3d\7L\2\2\u0b3d\u0b40\5\u021e\u0110\2\u0b3e\u0b3f\7"+
		"9\2\2\u0b3f\u0b41\5\u0220\u0111\2\u0b40\u0b3e\3\2\2\2\u0b40\u0b41\3\2"+
		"\2\2\u0b41\u0b44\3\2\2\2\u0b42\u0b43\7h\2\2\u0b43\u0b45\5\u00a0Q\2\u0b44"+
		"\u0b42\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47\7\u016a"+
		"\2\2\u0b47\u0207\3\2\2\2\u0b48\u0b49\7\u0091\2\2\u0b49\u0b4a\7\u0169\2"+
		"\2\u0b4a\u0b51\5\u01da\u00ee\2\u0b4b\u0b4c\7\u016d\2\2\u0b4c\u0b4f\5\u020a"+
		"\u0106\2\u0b4d\u0b4e\7\u016d\2\2\u0b4e\u0b50\5\u020c\u0107\2\u0b4f\u0b4d"+
		"\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u0b52\3\2\2\2\u0b51\u0b4b\3\2\2\2\u0b51"+
		"\u0b52\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b54\7\u016a\2\2\u0b54\u0209"+
		"\3\2\2\2\u0b55\u0b56\t\20\2\2\u0b56\u020b\3\2\2\2\u0b57\u0b5a\5\u009a"+
		"N\2\u0b58\u0b5a\5\u009eP\2\u0b59\u0b57\3\2\2\2\u0b59\u0b58\3\2\2\2\u0b5a"+
		"\u020d\3\2\2\2\u0b5b\u0b5c\5\u017a\u00be\2\u0b5c\u0b5d\7\u016f\2\2\u0b5d"+
		"\u0b60\7\u0096\2\2\u0b5e\u0b5f\7\u0169\2\2\u0b5f\u0b61\7\u016a\2\2\u0b60"+
		"\u0b5e\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u020f\3\2\2\2\u0b62\u0b66\5\u0212"+
		"\u010a\2\u0b63\u0b66\5\u0214\u010b\2\u0b64\u0b66\5\u021c\u010f\2\u0b65"+
		"\u0b62\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b64\3\2\2\2\u0b66\u0211\3\2"+
		"\2\2\u0b67\u0b68\7\u0081\2\2\u0b68\u0b69\7\u0169\2\2\u0b69\u0b6a\5\u01e0"+
		"\u00f1\2\u0b6a\u0b6b\7L\2\2\u0b6b\u0b6e\5\u021e\u0110\2\u0b6c\u0b6d\7"+
		"9\2\2\u0b6d\u0b6f\5\u0220\u0111\2\u0b6e\u0b6c\3\2\2\2\u0b6e\u0b6f\3\2"+
		"\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b71\7\u016a\2\2\u0b71\u0213\3\2\2\2\u0b72"+
		"\u0b73\7\u008b\2\2\u0b73\u0b74\7\u0169\2\2\u0b74\u0b75\5\u0216\u010c\2"+
		"\u0b75\u0b76\7\u016a\2\2\u0b76\u0215\3\2\2\2\u0b77\u0b79\5\u0202\u0102"+
		"\2\u0b78\u0b77\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b7c"+
		"\5\u021a\u010e\2\u0b7b\u0b7a\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7d\3"+
		"\2\2\2\u0b7d\u0b7f\7L\2\2\u0b7e\u0b78\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f"+
		"\u0b80\3\2\2\2\u0b80\u0b81\5\u0218\u010d\2\u0b81\u0217\3\2\2\2\u0b82\u0b83"+
		"\5\u01e0\u00f1\2\u0b83\u0219\3\2\2\2\u0b84\u0b85\5\u01e0\u00f1\2\u0b85"+
		"\u021b\3\2\2\2\u0b86\u0b87\7\u008f\2\2\u0b87\u0b88\7\u0169\2\2\u0b88\u0b89"+
		"\5\u01e0\u00f1\2\u0b89\u0b8a\7\u0090\2\2\u0b8a\u0b8b\5\u01e0\u00f1\2\u0b8b"+
		"\u0b8c\7L\2\2\u0b8c\u0b8f\5\u021e\u0110\2\u0b8d\u0b8e\79\2\2\u0b8e\u0b90"+
		"\5\u0220\u0111\2\u0b8f\u0b8d\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b91\3"+
		"\2\2\2\u0b91\u0b92\7\u016a\2\2\u0b92\u021d\3\2\2\2\u0b93\u0b94\5\u0180"+
		"\u00c1\2\u0b94\u021f\3\2\2\2\u0b95\u0b96\5\u0180\u00c1\2\u0b96\u0221\3"+
		"\2\2\2\u0b97\u0b98\b\u0112\1\2\u0b98\u0b9e\5\u0224\u0113\2\u0b99\u0b9a"+
		"\5\u023a\u011e\2\u0b9a\u0b9b\7\u016c\2\2\u0b9b\u0b9c\5\u0224\u0113\2\u0b9c"+
		"\u0b9e\3\2\2\2\u0b9d\u0b97\3\2\2\2\u0b9d\u0b99\3\2\2\2\u0b9e\u0ba7\3\2"+
		"\2\2\u0b9f\u0ba0\f\4\2\2\u0ba0\u0ba1\7\u016c\2\2\u0ba1\u0ba6\5\u023c\u011f"+
		"\2\u0ba2\u0ba3\f\3\2\2\u0ba3\u0ba4\7\u016e\2\2\u0ba4\u0ba6\5\u023c\u011f"+
		"\2\u0ba5\u0b9f\3\2\2\2\u0ba5\u0ba2\3\2\2\2\u0ba6\u0ba9\3\2\2\2\u0ba7\u0ba5"+
		"\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0223\3\2\2\2\u0ba9\u0ba7\3\2\2\2\u0baa"+
		"\u0bab\5\u0226\u0114\2\u0bab\u0225\3\2\2\2\u0bac\u0bae\5\u0228\u0115\2"+
		"\u0bad\u0baf\5\u022a\u0116\2\u0bae\u0bad\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf"+
		"\u0227\3\2\2\2\u0bb0\u0bb3\5\u00c4c\2\u0bb1\u0bb3\5\u022e\u0118\2\u0bb2"+
		"\u0bb0\3\2\2\2\u0bb2\u0bb1\3\2\2\2\u0bb3\u0229\3\2\2\2\u0bb4\u0bb5\7P"+
		"\2\2\u0bb5\u0bb6\5\u022c\u0117\2\u0bb6\u022b\3\2\2\2\u0bb7\u0bbc\7\6\2"+
		"\2\u0bb8\u0bb9\7#\2\2\u0bb9\u0bba\7&\2\2\u0bba\u0bbc\5\u0240\u0121\2\u0bbb"+
		"\u0bb7\3\2\2\2\u0bbb\u0bb8\3\2\2\2\u0bbc\u022d\3\2\2\2\u0bbd\u0bc3\5\u0230"+
		"\u0119\2\u0bbe\u0bc3\5\u0232\u011a\2\u0bbf\u0bc3\5\u0236\u011c\2\u0bc0"+
		"\u0bc3\5\u0234\u011b\2\u0bc1\u0bc3\5\u0238\u011d\2\u0bc2\u0bbd\3\2\2\2"+
		"\u0bc2\u0bbe\3\2\2\2\u0bc2\u0bbf\3\2\2\2\u0bc2\u0bc0\3\2\2\2\u0bc2\u0bc1"+
		"\3\2\2\2\u0bc3\u022f\3\2\2\2\u0bc4\u0bc5\7\u0097\2\2\u0bc5\u0231\3\2\2"+
		"\2\u0bc6\u0bcb\7\u0098\2\2\u0bc7\u0bc8\7\u0169\2\2\u0bc8\u0bc9\5\u00ac"+
		"W\2\u0bc9\u0bca\7\u016a\2\2\u0bca\u0bcc\3\2\2\2\u0bcb\u0bc7\3\2\2\2\u0bcb"+
		"\u0bcc\3\2\2\2\u0bcc\u0233\3\2\2\2\u0bcd\u0bd2\7\u0099\2\2\u0bce\u0bcf"+
		"\7\u0169\2\2\u0bcf\u0bd0\5\u00acW\2\u0bd0\u0bd1\7\u016a\2\2\u0bd1\u0bd3"+
		"\3\2\2\2\u0bd2\u0bce\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0235\3\2\2\2\u0bd4"+
		"\u0bd9\7\u009a\2\2\u0bd5\u0bd6\7\u0169\2\2\u0bd6\u0bd7\5\u00aeX\2\u0bd7"+
		"\u0bd8\7\u016a\2\2\u0bd8\u0bda\3\2\2\2\u0bd9\u0bd5\3\2\2\2\u0bd9\u0bda"+
		"\3\2\2\2\u0bda\u0237\3\2\2\2\u0bdb\u0be0\7\u009b\2\2\u0bdc\u0bdd\7\u0169"+
		"\2\2\u0bdd\u0bde\5\u00aeX\2\u0bde\u0bdf\7\u016a\2\2\u0bdf\u0be1\3\2\2"+
		"\2\u0be0\u0bdc\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0239\3\2\2\2\u0be2\u0be3"+
		"\b\u011e\1\2\u0be3\u0bec\5\u023c\u011f\2\u0be4\u0be5\7\u0169\2\2\u0be5"+
		"\u0be6\5\u0222\u0112\2\u0be6\u0be7\7\u016e\2\2\u0be7\u0be8\5\u0224\u0113"+
		"\2\u0be8\u0be9\7\u016a\2\2\u0be9\u0bea\7\u019e\2\2\u0bea\u0bec\3\2\2\2"+
		"\u0beb\u0be2\3\2\2\2\u0beb\u0be4\3\2\2\2\u0bec\u0bf5\3\2\2\2\u0bed\u0bee"+
		"\f\5\2\2\u0bee\u0bef\7\u016c\2\2\u0bef\u0bf4\5\u0242\u0122\2\u0bf0\u0bf1"+
		"\f\4\2\2\u0bf1\u0bf2\7\u016e\2\2\u0bf2\u0bf4\5\u0242\u0122\2\u0bf3\u0bed"+
		"\3\2\2\2\u0bf3\u0bf0\3\2\2\2\u0bf4\u0bf7\3\2\2\2\u0bf5\u0bf3\3\2\2\2\u0bf5"+
		"\u0bf6\3\2\2\2\u0bf6\u023b\3\2\2\2\u0bf7\u0bf5\3\2\2\2\u0bf8\u0bf9\b\u011f"+
		"\1\2\u0bf9\u0bff\5\u023e\u0120\2\u0bfa\u0bfb\5\u0182\u00c2\2\u0bfb\u0bfc"+
		"\7\u016b\2\2\u0bfc\u0bfd\5\u023e\u0120\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bf8"+
		"\3\2\2\2\u0bfe\u0bfa\3\2\2\2\u0bff\u0c08\3\2\2\2\u0c00\u0c01\f\5\2\2\u0c01"+
		"\u0c02\7\u016b\2\2\u0c02\u0c07\5\u0184\u00c3\2\u0c03\u0c04\f\4\2\2\u0c04"+
		"\u0c05\7\u0170\2\2\u0c05\u0c07\5\u0184\u00c3\2\u0c06\u0c00\3\2\2\2\u0c06"+
		"\u0c03\3\2\2\2\u0c07\u0c0a\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c08\u0c09\3\2"+
		"\2\2\u0c09\u023d\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0b\u0c0d\5\20\t\2\u0c0c"+
		"\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c0f\5\u0240"+
		"\u0121\2\u0c0f\u023f\3\2\2\2\u0c10\u0c12\5\u00c4c\2\u0c11\u0c13\7\u019e"+
		"\2\2\u0c12\u0c11\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c16\3\2\2\2\u0c14"+
		"\u0c16\5\u0244\u0123\2\u0c15\u0c10\3\2\2\2\u0c15\u0c14\3\2\2\2\u0c16\u0241"+
		"\3\2\2\2\u0c17\u0c18\5\u023c\u011f\2\u0c18\u0243\3\2\2\2\u0c19\u0c1a\5"+
		"\u0246\u0124\2\u0c1a\u0245\3\2\2\2\u0c1b\u0c1c\7w\2\2\u0c1c\u0c1d\7\u0169"+
		"\2\2\u0c1d\u0c1e\5\u023a\u011e\2\u0c1e\u0c1f\7\u016a\2\2\u0c1f\u0247\3"+
		"\2\2\2\u0c20\u0c21\b\u0125\1\2\u0c21\u0c22\5\u024a\u0126\2\u0c22\u0c28"+
		"\3\2\2\2\u0c23\u0c24\f\3\2\2\u0c24\u0c25\7\u009c\2\2\u0c25\u0c27\5\u024a"+
		"\u0126\2\u0c26\u0c23\3\2\2\2\u0c27\u0c2a\3\2\2\2\u0c28\u0c26\3\2\2\2\u0c28"+
		"\u0c29\3\2\2\2\u0c29\u0249\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2b\u0c2c\b\u0126"+
		"\1\2\u0c2c\u0c2d\5\u024c\u0127\2\u0c2d\u0c33\3\2\2\2\u0c2e\u0c2f\f\3\2"+
		"\2\u0c2f\u0c30\7\u009d\2\2\u0c30\u0c32\5\u024c\u0127\2\u0c31\u0c2e\3\2"+
		"\2\2\u0c32\u0c35\3\2\2\2\u0c33\u0c31\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34"+
		"\u024b\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c36\u0c38\7\u009e\2\2\u0c37\u0c36"+
		"\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3a\5\u024e\u0128"+
		"\2\u0c3a\u024d\3\2\2\2\u0c3b\u0c41\5\u0252\u012a\2\u0c3c\u0c3e\7\u009f"+
		"\2\2\u0c3d\u0c3f\7\u009e\2\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f"+
		"\u0c40\3\2\2\2\u0c40\u0c42\5\u0250\u0129\2\u0c41\u0c3c\3\2\2\2\u0c41\u0c42"+
		"\3\2\2\2\u0c42\u024f\3\2\2\2\u0c43\u0c44\t\21\2\2\u0c44\u0251\3\2\2\2"+
		"\u0c45\u0c48\5\u038a\u01c6\2\u0c46\u0c48\5\u0254\u012b\2\u0c47\u0c45\3"+
		"\2\2\2\u0c47\u0c46\3\2\2\2\u0c48\u0253\3\2\2\2\u0c49\u0c4c\5\u0256\u012c"+
		"\2\u0c4a\u0c4c\5\u00c4c\2\u0c4b\u0c49\3\2\2\2\u0c4b\u0c4a\3\2\2\2\u0c4c"+
		"\u0255\3\2\2\2\u0c4d\u0c4e\7\u0169\2\2\u0c4e\u0c4f\5\u0248\u0125\2\u0c4f"+
		"\u0c50\7\u016a\2\2\u0c50\u0257\3\2\2\2\u0c51\u0c52\b\u012d\1\2\u0c52\u0c53"+
		"\5\u025a\u012e\2\u0c53\u0c59\3\2\2\2\u0c54\u0c55\f\4\2\2\u0c55\u0c56\7"+
		"\u018b\2\2\u0c56\u0c58\5\u025a\u012e\2\u0c57\u0c54\3\2\2\2\u0c58\u0c5b"+
		"\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0259\3\2\2\2\u0c5b"+
		"\u0c59\3\2\2\2\u0c5c\u0c5f\5\u025c\u012f\2\u0c5d\u0c5f\5\u00c4c\2\u0c5e"+
		"\u0c5c\3\2\2\2\u0c5e\u0c5d\3\2\2\2\u0c5f\u025b\3\2\2\2\u0c60\u0c61\5\u025e"+
		"\u0130\2\u0c61\u025d\3\2\2\2\u0c62\u0c63\7\u00a3\2\2\u0c63\u0c64\7\u0169"+
		"\2\2\u0c64\u0c65\5\u0258\u012d\2\u0c65\u0c66\7\u016d\2\2\u0c66\u0c67\5"+
		"\u0180\u00c1\2\u0c67\u0c68\7\u016a\2\2\u0c68\u025f\3\2\2\2\u0c69\u0c6c"+
		"\5\u0262\u0132\2\u0c6a\u0c6c\5\u0268\u0135\2\u0c6b\u0c69\3\2\2\2\u0c6b"+
		"\u0c6a\3\2\2\2\u0c6c\u0261\3\2\2\2\u0c6d\u0c6e\7\7\2\2\u0c6e\u0c6f\7\u0178"+
		"\2\2\u0c6f\u0c70\5\u0264\u0133\2\u0c70\u0c71\7\u0179\2\2\u0c71\u0263\3"+
		"\2\2\2\u0c72\u0c77\5\u0266\u0134\2\u0c73\u0c74\7\u016d\2\2\u0c74\u0c76"+
		"\5\u0266\u0134\2\u0c75\u0c73\3\2\2\2\u0c76\u0c79\3\2\2\2\u0c77\u0c75\3"+
		"\2\2\2\u0c77\u0c78\3\2\2\2\u0c78\u0265\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c7a"+
		"\u0c7b\5\u0176\u00bc\2\u0c7b\u0267\3\2\2\2\u0c7c\u0c7d\7\7\2\2\u0c7d\u0c7e"+
		"\5\u0386\u01c4\2\u0c7e\u0269\3\2\2\2\u0c7f\u0c80\b\u0136\1\2\u0c80\u0c8a"+
		"\5\u026c\u0137\2\u0c81\u0c83\7\u00a5\2\2\u0c82\u0c81\3\2\2\2\u0c82\u0c83"+
		"\3\2\2\2\u0c83\u0c84\3\2\2\2\u0c84\u0c8a\5\u026c\u0137\2\u0c85\u0c87\7"+
		"\u00a5\2\2\u0c86\u0c85\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\3\2\2\2"+
		"\u0c88\u0c8a\5\u026c\u0137\2\u0c89\u0c7f\3\2\2\2\u0c89\u0c82\3\2\2\2\u0c89"+
		"\u0c86\3\2\2\2\u0c8a\u0c95\3\2\2\2\u0c8b\u0c8c\f\6\2\2\u0c8c\u0c8d\7\b"+
		"\2\2\u0c8d\u0c8e\7\u00a4\2\2\u0c8e\u0c94\7\u008a\2\2\u0c8f\u0c90\f\4\2"+
		"\2\u0c90\u0c91\7\b\2\2\u0c91\u0c92\7\u00a6\2\2\u0c92\u0c94\7\u008a\2\2"+
		"\u0c93\u0c8b\3\2\2\2\u0c93\u0c8f\3\2\2\2\u0c94\u0c97\3\2\2\2\u0c95\u0c93"+
		"\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u026b\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c98"+
		"\u0c99\b\u0137\1\2\u0c99\u0c9f\5\u026e\u0138\2\u0c9a\u0c9c\7\u00a5\2\2"+
		"\u0c9b\u0c9a\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f"+
		"\5\u026e\u0138\2\u0c9e\u0c98\3\2\2\2\u0c9e\u0c9b\3\2\2\2\u0c9f\u0ca6\3"+
		"\2\2\2\u0ca0\u0ca1\f\4\2\2\u0ca1\u0ca2\7\b\2\2\u0ca2\u0ca3\7\u00a7\2\2"+
		"\u0ca3\u0ca5\7\u008a\2\2\u0ca4\u0ca0\3\2\2\2\u0ca5\u0ca8\3\2\2\2\u0ca6"+
		"\u0ca4\3\2\2\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u026d\3\2\2\2\u0ca8\u0ca6\3\2"+
		"\2\2\u0ca9\u0cac\5\u0270\u0139\2\u0caa\u0cac\5\u00c4c\2\u0cab\u0ca9\3"+
		"\2\2\2\u0cab\u0caa\3\2\2\2\u0cac\u026f\3\2\2\2\u0cad\u0cae\5\u0272\u013a"+
		"\2\u0cae\u0271\3\2\2\2\u0caf\u0cb0\7\n\2\2\u0cb0\u0cb1\7\u0169\2\2\u0cb1"+
		"\u0cb2\5\u026a\u0136\2\u0cb2\u0cb3\7\u016a\2\2\u0cb3\u0273\3\2\2\2\u0cb4"+
		"\u0cb8\5\u0276\u013c\2\u0cb5\u0cb8\5\u027c\u013f\2\u0cb6\u0cb8\5\u027e"+
		"\u0140\2\u0cb7\u0cb4\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7\u0cb6\3\2\2\2\u0cb8"+
		"\u0275\3\2\2\2\u0cb9\u0cba\7\b\2\2\u0cba\u0cbb\7\u0178\2\2\u0cbb\u0cbc"+
		"\5\u0278\u013d\2\u0cbc\u0cbd\7\u0179\2\2\u0cbd\u0277\3\2\2\2\u0cbe\u0cc3"+
		"\5\u027a\u013e\2\u0cbf\u0cc0\7\u016d\2\2\u0cc0\u0cc2\5\u027a\u013e\2\u0cc1"+
		"\u0cbf\3\2\2\2\u0cc2\u0cc5\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc3\u0cc4\3\2"+
		"\2\2\u0cc4\u0279\3\2\2\2\u0cc5\u0cc3\3\2\2\2\u0cc6\u0cc7\5\u0176\u00bc"+
		"\2\u0cc7\u027b\3\2\2\2\u0cc8\u0cc9\7\b\2\2\u0cc9\u0cca\5\u0386\u01c4\2"+
		"\u0cca\u027d\3\2\2\2\u0ccb\u0ccc\7\u00a8\2\2\u0ccc\u0ccd\5\u0386\u01c4"+
		"\2\u0ccd\u027f\3\2\2\2\u0cce\u0cd2\5\u0178\u00bd\2\u0ccf\u0cd2\5\u0248"+
		"\u0125\2\u0cd0\u0cd2\5\u0282\u0142\2\u0cd1\u0cce\3\2\2\2\u0cd1\u0ccf\3"+
		"\2\2\2\u0cd1\u0cd0\3\2\2\2\u0cd2\u0281\3\2\2\2\u0cd3\u0cd4\7\u0169\2\2"+
		"\u0cd4\u0cd5\5\u0286\u0144\2\u0cd5\u0cd6\7\u016d\2\2\u0cd6\u0cd7\5\u0284"+
		"\u0143\2\u0cd7\u0cd8\7\u016a\2\2\u0cd8\u0ce0\3\2\2\2\u0cd9\u0cda\7)\2"+
		"\2\u0cda\u0cdb\7\u0169\2\2\u0cdb\u0cdc\5\u0284\u0143\2\u0cdc\u0cdd\7\u016a"+
		"\2\2\u0cdd\u0ce0\3\2\2\2\u0cde\u0ce0\5\u0384\u01c3\2\u0cdf\u0cd3\3\2\2"+
		"\2\u0cdf\u0cd9\3\2\2\2\u0cdf\u0cde\3\2\2\2\u0ce0\u0283\3\2\2\2\u0ce1\u0ce6"+
		"\5\u0286\u0144\2\u0ce2\u0ce3\7\u016d\2\2\u0ce3\u0ce5\5\u0286\u0144\2\u0ce4"+
		"\u0ce2\3\2\2\2\u0ce5\u0ce8\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7\3\2"+
		"\2\2\u0ce7\u0285\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u0cea\5\u0176\u00bc"+
		"\2\u0cea\u0287\3\2\2\2\u0ceb\u0cfe\5\u0178\u00bd\2\u0cec\u0cfe\5\u0248"+
		"\u0125\2\u0ced\u0cfe\5\u00e6t\2\u0cee\u0cef\7\u0169\2\2\u0cef\u0cf0\5"+
		"\u00e6t\2\u0cf0\u0cf1\7\u016a\2\2\u0cf1\u0cfe\3\2\2\2\u0cf2\u0cf3\7\u0169"+
		"\2\2\u0cf3\u0cf4\5\u028c\u0147\2\u0cf4\u0cf5\7\u016d\2\2\u0cf5\u0cf6\5"+
		"\u028a\u0146\2\u0cf6\u0cf7\7\u016a\2\2\u0cf7\u0cfe\3\2\2\2\u0cf8\u0cf9"+
		"\7)\2\2\u0cf9\u0cfa\7\u0169\2\2\u0cfa\u0cfb\5\u028a\u0146\2\u0cfb\u0cfc"+
		"\7\u016a\2\2\u0cfc\u0cfe\3\2\2\2\u0cfd\u0ceb\3\2\2\2\u0cfd\u0cec\3\2\2"+
		"\2\u0cfd\u0ced\3\2\2\2\u0cfd\u0cee\3\2\2\2\u0cfd\u0cf2\3\2\2\2\u0cfd\u0cf8"+
		"\3\2\2\2\u0cfe\u0289\3\2\2\2\u0cff\u0d04\5\u028c\u0147\2\u0d00\u0d01\7"+
		"\u016d\2\2\u0d01\u0d03\5\u028c\u0147\2\u0d02\u0d00\3\2\2\2\u0d03\u0d06"+
		"\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u028b\3\2\2\2\u0d06"+
		"\u0d04\3\2\2\2\u0d07\u0d0a\5\u0176\u00bc\2\u0d08\u0d0a\5\u00e6t\2\u0d09"+
		"\u0d07\3\2\2\2\u0d09\u0d08\3\2\2\2\u0d0a\u028d\3\2\2\2\u0d0b\u0d0f\5\u0178"+
		"\u00bd\2\u0d0c\u0d0f\5\u0254\u012b\2\u0d0d\u0d0f\5\u0282\u0142\2\u0d0e"+
		"\u0d0b\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0e\u0d0d\3\2\2\2\u0d0f\u028f\3\2"+
		"\2\2\u0d10\u0d13\5\u0298\u014d\2\u0d11\u0d13\5\u0282\u0142\2\u0d12\u0d10"+
		"\3\2\2\2\u0d12\u0d11\3\2\2\2\u0d13\u0291\3\2\2\2\u0d14\u0d17\5\u0298\u014d"+
		"\2\u0d15\u0d17\5\u0280\u0141\2\u0d16\u0d14\3\2\2\2\u0d16\u0d15\3\2\2\2"+
		"\u0d17\u0293\3\2\2\2\u0d18\u0d1b\5\u0298\u014d\2\u0d19\u0d1b\5\u0288\u0145"+
		"\2\u0d1a\u0d18\3\2\2\2\u0d1a\u0d19\3\2\2\2\u0d1b\u0295\3\2\2\2\u0d1c\u0d1f"+
		"\5\u0298\u014d\2\u0d1d\u0d1f\5\u028e\u0148\2\u0d1e\u0d1c\3\2\2\2\u0d1e"+
		"\u0d1d\3\2\2\2\u0d1f\u0297\3\2\2\2\u0d20\u0d21\5\u00c4c\2\u0d21\u0299"+
		"\3\2\2\2\u0d22\u0d23\7\u00a9\2\2\u0d23\u0d24\5\u029c\u014f\2\u0d24\u029b"+
		"\3\2\2\2\u0d25\u0d2a\5\u0292\u014a\2\u0d26\u0d27\7\u016d\2\2\u0d27\u0d29"+
		"\5\u0292\u014a\2\u0d28\u0d26\3\2\2\2\u0d29\u0d2c\3\2\2\2\u0d2a\u0d28\3"+
		"\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u029d\3\2\2\2\u0d2c\u0d2a\3\2\2\2\u0d2d"+
		"\u0d2e\7\u00a9\2\2\u0d2e\u0d2f\5\u02a0\u0151\2\u0d2f\u029f\3\2\2\2\u0d30"+
		"\u0d35\5\u0294\u014b\2\u0d31\u0d32\7\u016d\2\2\u0d32\u0d34\5\u0294\u014b"+
		"\2\u0d33\u0d31\3\2\2\2\u0d34\u0d37\3\2\2\2\u0d35\u0d33\3\2\2\2\u0d35\u0d36"+
		"\3\2\2\2\u0d36\u02a1\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d38\u0d3a\5\u02a4\u0153"+
		"\2\u0d39\u0d3b\5\u02e8\u0175\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b\3\2\2\2"+
		"\u0d3b\u0d3d\3\2\2\2\u0d3c\u0d3e\5\u02ea\u0176\2\u0d3d\u0d3c\3\2\2\2\u0d3d"+
		"\u0d3e\3\2\2\2\u0d3e\u0d40\3\2\2\2\u0d3f\u0d41\5\u0304\u0183\2\u0d40\u0d3f"+
		"\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d44\5\u0306\u0184"+
		"\2\u0d43\u0d42\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u02a3\3\2\2\2\u0d45\u0d46"+
		"\7L\2\2\u0d46\u0d47\5\u02a6\u0154\2\u0d47\u02a5\3\2\2\2\u0d48\u0d4d\5"+
		"\u02a8\u0155\2\u0d49\u0d4a\7\u016d\2\2\u0d4a\u0d4c\5\u02a8\u0155\2\u0d4b"+
		"\u0d49\3\2\2\2\u0d4c\u0d4f\3\2\2\2\u0d4d\u0d4b\3\2\2\2\u0d4d\u0d4e\3\2"+
		"\2\2\u0d4e\u02a7\3\2\2\2\u0d4f\u0d4d\3\2\2\2\u0d50\u0d51\b\u0155\1\2\u0d51"+
		"\u0d6c\5\u02aa\u0156\2\u0d52\u0d54\5\u02d6\u016c\2\u0d53\u0d55\5\u02e2"+
		"\u0172\2\u0d54\u0d53\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56"+
		"\u0d59\7\u00ab\2\2\u0d57\u0d5a\5\u02a8\u0155\2\u0d58\u0d5a\5\u02d6\u016c"+
		"\2\u0d59\u0d57\3\2\2\2\u0d59\u0d58\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c"+
		"\5\u02dc\u016f\2\u0d5c\u0d6c\3\2\2\2\u0d5d\u0d5e\5\u02d6\u016c\2\u0d5e"+
		"\u0d60\7\u00ac\2\2\u0d5f\u0d61\5\u02e2\u0172\2\u0d60\u0d5f\3\2\2\2\u0d60"+
		"\u0d61\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d65\7\u00ab\2\2\u0d63\u0d66"+
		"\5\u02aa\u0156\2\u0d64\u0d66\5\u02d6\u016c\2\u0d65\u0d63\3\2\2\2\u0d65"+
		"\u0d64\3\2\2\2\u0d66\u0d6c\3\2\2\2\u0d67\u0d68\7\u0169\2\2\u0d68\u0d69"+
		"\5\u02a8\u0155\2\u0d69\u0d6a\7\u016a\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d50"+
		"\3\2\2\2\u0d6b\u0d52\3\2\2\2\u0d6b\u0d5d\3\2\2\2\u0d6b\u0d67\3\2\2\2\u0d6c"+
		"\u0d88\3\2\2\2\u0d6d\u0d6e\f\b\2\2\u0d6e\u0d6f\7\u00aa\2\2\u0d6f\u0d70"+
		"\7\u00ab\2\2\u0d70\u0d87\5\u02aa\u0156\2\u0d71\u0d73\f\7\2\2\u0d72\u0d74"+
		"\5\u02e2\u0172\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\3"+
		"\2\2\2\u0d75\u0d78\7\u00ab\2\2\u0d76\u0d79\5\u02a8\u0155\2\u0d77\u0d79"+
		"\5\u02d6\u016c\2\u0d78\u0d76\3\2\2\2\u0d78\u0d77\3\2\2\2\u0d79\u0d7a\3"+
		"\2\2\2\u0d7a\u0d7b\5\u02dc\u016f\2\u0d7b\u0d87\3\2\2\2\u0d7c\u0d7d\f\5"+
		"\2\2\u0d7d\u0d7f\7\u00ac\2\2\u0d7e\u0d80\5\u02e2\u0172\2\u0d7f\u0d7e\3"+
		"\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d84\7\u00ab\2\2"+
		"\u0d82\u0d85\5\u02aa\u0156\2\u0d83\u0d85\5\u02d6\u016c\2\u0d84\u0d82\3"+
		"\2\2\2\u0d84\u0d83\3\2\2\2\u0d85\u0d87\3\2\2\2\u0d86\u0d6d\3\2\2\2\u0d86"+
		"\u0d71\3\2\2\2\u0d86\u0d7c\3\2\2\2\u0d87\u0d8a\3\2\2\2\u0d88\u0d86\3\2"+
		"\2\2\u0d88\u0d89\3\2\2\2\u0d89\u02a9\3\2\2\2\u0d8a\u0d88\3\2\2\2\u0d8b"+
		"\u0d8d\5\u02b6\u015c\2\u0d8c\u0d8e\5\u02ac\u0157\2\u0d8d\u0d8c\3\2\2\2"+
		"\u0d8d\u0d8e\3\2\2\2\u0d8e\u02ab\3\2\2\2\u0d8f\u0d90\7\u00ad\2\2\u0d90"+
		"\u0d91\5\u02ae\u0158\2\u0d91\u0d92\7\u0169\2\2\u0d92\u0d93\5\u02b2\u015a"+
		"\2\u0d93\u0d95\7\u016a\2\2\u0d94\u0d96\5\u02b0\u0159\2\u0d95\u0d94\3\2"+
		"\2\2\u0d95\u0d96\3\2\2\2\u0d96\u02ad\3\2\2\2\u0d97\u0d98\t\22\2\2\u0d98"+
		"\u02af\3\2\2\2\u0d99\u0d9a\7\u00b0\2\2\u0d9a\u0d9b\7\u0169\2\2\u0d9b\u0d9c"+
		"\5\u02b4\u015b\2\u0d9c\u0d9d\7\u016a\2\2\u0d9d\u02b1\3\2\2\2\u0d9e\u0d9f"+
		"\5\u0180\u00c1\2\u0d9f\u02b3\3\2\2\2\u0da0\u0da1\5\u0180\u00c1\2\u0da1"+
		"\u02b5\3\2\2\2\u0da2\u0da4\5\u02ca\u0166\2\u0da3\u0da5\5\u02b8\u015d\2"+
		"\u0da4\u0da3\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0db0\3\2\2\2\u0da6\u0da8"+
		"\7_\2\2\u0da7\u0da6\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9"+
		"\u0dae\5\66\34\2\u0daa\u0dab\7\u0169\2\2\u0dab\u0dac\5\u02cc\u0167\2\u0dac"+
		"\u0dad\7\u016a\2\2\u0dad\u0daf\3\2\2\2\u0dae\u0daa\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db1\3\2\2\2\u0db0\u0da7\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1"+
		"\u0df9\3\2\2\2\u0db2\u0db4\5\u02c8\u0165\2\u0db3\u0db5\7_\2\2\u0db4\u0db3"+
		"\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u0dbb\5\66\34\2"+
		"\u0db7\u0db8\7\u0169\2\2\u0db8\u0db9\5\u02cc\u0167\2\u0db9\u0dba\7\u016a"+
		"\2\2\u0dba\u0dbc\3\2\2\2\u0dbb\u0db7\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc"+
		"\u0df9\3\2\2\2\u0dbd\u0dbf\5\u02c2\u0162\2\u0dbe\u0dc0\7_\2\2\u0dbf\u0dbe"+
		"\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc6\5\66\34\2"+
		"\u0dc2\u0dc3\7\u0169\2\2\u0dc3\u0dc4\5\u02cc\u0167\2\u0dc4\u0dc5\7\u016a"+
		"\2\2\u0dc5\u0dc7\3\2\2\2\u0dc6\u0dc2\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7"+
		"\u0df9\3\2\2\2\u0dc8\u0dca\5\u02c4\u0163\2\u0dc9\u0dcb\7_\2\2\u0dca\u0dc9"+
		"\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dd1\5\66\34\2"+
		"\u0dcd\u0dce\7\u0169\2\2\u0dce\u0dcf\5\u02cc\u0167\2\u0dcf\u0dd0\7\u016a"+
		"\2\2\u0dd0\u0dd2\3\2\2\2\u0dd1\u0dcd\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2"+
		"\u0df9\3\2\2\2\u0dd3\u0dd5\5\u02c6\u0164\2\u0dd4\u0dd6\7_\2\2\u0dd5\u0dd4"+
		"\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7\3\2\2\2\u0dd7\u0ddc\5\66\34\2"+
		"\u0dd8\u0dd9\7\u0169\2\2\u0dd9\u0dda\5\u02cc\u0167\2\u0dda\u0ddb\7\u016a"+
		"\2\2\u0ddb\u0ddd\3\2\2\2\u0ddc\u0dd8\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd"+
		"\u0df9\3\2\2\2\u0dde\u0de9\5\u02c0\u0161\2\u0ddf\u0de1\7_\2\2\u0de0\u0ddf"+
		"\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de2\3\2\2\2\u0de2\u0de7\5\66\34\2"+
		"\u0de3\u0de4\7\u0169\2\2\u0de4\u0de5\5\u02cc\u0167\2\u0de5\u0de6\7\u016a"+
		"\2\2\u0de6\u0de8\3\2\2\2\u0de7\u0de3\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8"+
		"\u0dea\3\2\2\2\u0de9\u0de0\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0df9\3\2"+
		"\2\2\u0deb\u0df6\5\u02d0\u0169\2\u0dec\u0dee\7_\2\2\u0ded\u0dec\3\2\2"+
		"\2\u0ded\u0dee\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df4\5\66\34\2\u0df0"+
		"\u0df1\7\u0169\2\2\u0df1\u0df2\5\u02cc\u0167\2\u0df2\u0df3\7\u016a\2\2"+
		"\u0df3\u0df5\3\2\2\2\u0df4\u0df0\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df7"+
		"\3\2\2\2\u0df6\u0ded\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0df9\3\2\2\2\u0df8"+
		"\u0da2\3\2\2\2\u0df8\u0db2\3\2\2\2\u0df8\u0dbd\3\2\2\2\u0df8\u0dc8\3\2"+
		"\2\2\u0df8\u0dd3\3\2\2\2\u0df8\u0dde\3\2\2\2\u0df8\u0deb\3\2\2\2\u0df9"+
		"\u02b7\3\2\2\2\u0dfa\u0dfb\79\2\2\u0dfb\u0dfc\7\u00b1\2\2\u0dfc\u0dfd"+
		"\7_\2\2\u0dfd\u0dfe\7\u00b2\2\2\u0dfe\u0e12\5\u02ba\u015e\2\u0dff\u0e00"+
		"\79\2\2\u0e00\u0e01\7\u00b1\2\2\u0e01\u0e02\7\u00b3\2\2\u0e02\u0e12\7"+
		"\u00b4\2\2\u0e03\u0e05\7\u00b5\2\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3\2"+
		"\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e07\5\u02ba\u015e\2\u0e07\u0e08\7\u009d"+
		"\2\2\u0e08\u0e09\5\u02bc\u015f\2\u0e09\u0e12\3\2\2\2\u0e0a\u0e0b\79\2"+
		"\2\u0e0b\u0e0c\7\u00b1\2\2\u0e0c\u0e0d\7L\2\2\u0e0d\u0e0e\5\u02ba\u015e"+
		"\2\u0e0e\u0e0f\7\u00b6\2\2\u0e0f\u0e10\5\u02bc\u015f\2\u0e10\u0e12\3\2"+
		"\2\2\u0e11\u0dfa\3\2\2\2\u0e11\u0dff\3\2\2\2\u0e11\u0e04\3\2\2\2\u0e11"+
		"\u0e0a\3\2\2\2\u0e12\u02b9\3\2\2\2\u0e13\u0e14\5\u02be\u0160\2\u0e14\u02bb"+
		"\3\2\2\2\u0e15\u0e16\5\u02be\u0160\2\u0e16\u02bd\3\2\2\2\u0e17\u0e18\5"+
		"\u0222\u0112\2\u0e18\u02bf\3\2\2\2\u0e19\u0e1a\7\u00b7\2\2\u0e1a\u0e1b"+
		"\7\u0169\2\2\u0e1b\u0e1c\5\u02ca\u0166\2\u0e1c\u0e1d\7\u016a\2\2\u0e1d"+
		"\u02c1\3\2\2\2\u0e1e\u0e1f\7\u00b8\2\2\u0e1f\u0e20\5\u0386\u01c4\2\u0e20"+
		"\u02c3\3\2\2\2\u0e21\u0e22\7\u00b9\2\2\u0e22\u0e23\7\u0169\2\2\u0e23\u0e28"+
		"\5\u017e\u00c0\2\u0e24\u0e25\7\u016d\2\2\u0e25\u0e27\5\u017e\u00c0\2\u0e26"+
		"\u0e24\3\2\2\2\u0e27\u0e2a\3\2\2\2\u0e28\u0e26\3\2\2\2\u0e28\u0e29\3\2"+
		"\2\2\u0e29\u0e2b\3\2\2\2\u0e2a\u0e28\3\2\2\2\u0e2b\u0e2e\7\u016a\2\2\u0e2c"+
		"\u0e2d\7%\2\2\u0e2d\u0e2f\7\u00ba\2\2\u0e2e\u0e2c\3\2\2\2\u0e2e\u0e2f"+
		"\3\2\2\2\u0e2f\u02c5\3\2\2\2\u0e30\u0e31\7\u00a8\2\2\u0e31\u0e32\7\u0169"+
		"\2\2\u0e32\u0e33\5\u017e\u00c0\2\u0e33\u0e34\7\u016a\2\2\u0e34\u02c7\3"+
		"\2\2\2\u0e35\u0e36\5\u0386\u01c4\2\u0e36\u02c9\3\2\2\2\u0e37\u0e3a\5\""+
		"\22\2\u0e38\u0e3a\58\35\2\u0e39\u0e37\3\2\2\2\u0e39\u0e38\3\2\2\2\u0e3a"+
		"\u02cb\3\2\2\2\u0e3b\u0e3c\5\u02ce\u0168\2\u0e3c\u02cd\3\2\2\2\u0e3d\u0e42"+
		"\5\64\33\2\u0e3e\u0e3f\7\u016d\2\2\u0e3f\u0e41\5\64\33\2\u0e40\u0e3e\3"+
		"\2\2\2\u0e41\u0e44\3\2\2\2\u0e42\u0e40\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43"+
		"\u02cf\3\2\2\2\u0e44\u0e42\3\2\2\2\u0e45\u0e46\5\u02d4\u016b\2\u0e46\u0e47"+
		"\7\u00a8\2\2\u0e47\u0e48\7\u0169\2\2\u0e48\u0e49\5\u02d2\u016a\2\u0e49"+
		"\u0e4a\7\u016a\2\2\u0e4a\u02d1\3\2\2\2\u0e4b\u0e50\5\u04ca\u0266\2\u0e4c"+
		"\u0e50\5\u04d0\u0269\2\u0e4d\u0e50\5\u04e0\u0271\2\u0e4e\u0e50\5\u04fa"+
		"\u027e\2\u0e4f\u0e4b\3\2\2\2\u0e4f\u0e4c\3\2\2\2\u0e4f\u0e4d\3\2\2\2\u0e4f"+
		"\u0e4e\3\2\2\2\u0e50\u02d3\3\2\2\2\u0e51\u0e52\t\23\2\2\u0e52\u02d5\3"+
		"\2\2\2\u0e53\u0e54\5\u02aa\u0156\2\u0e54\u0e55\7\u00bd\2\2\u0e55\u0e56"+
		"\7\u00be\2\2\u0e56\u0e57\5\u02d8\u016d\2\u0e57\u02d7\3\2\2\2\u0e58\u0e59"+
		"\7\u0169\2\2\u0e59\u0e5e\5\u02da\u016e\2\u0e5a\u0e5b\7\u016d\2\2\u0e5b"+
		"\u0e5d\5\u02da\u016e\2\u0e5c\u0e5a\3\2\2\2\u0e5d\u0e60\3\2\2\2\u0e5e\u0e5c"+
		"\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e61\3\2\2\2\u0e60\u0e5e\3\2\2\2\u0e61"+
		"\u0e62\7\u016a\2\2\u0e62\u02d9\3\2\2\2\u0e63\u0e64\5\u00f4{\2\u0e64\u02db"+
		"\3\2\2\2\u0e65\u0e68\5\u02de\u0170\2\u0e66\u0e68\5\u02e0\u0171\2\u0e67"+
		"\u0e65\3\2\2\2\u0e67\u0e66\3\2\2\2\u0e68\u02dd\3\2\2\2\u0e69\u0e6a\7\u00bf"+
		"\2\2\u0e6a\u0e6b\5\u0446\u0224\2\u0e6b\u02df\3\2\2\2\u0e6c\u0e6d\7h\2"+
		"\2\u0e6d\u0e6e\7\u0169\2\2\u0e6e\u0e6f\5\u02e6\u0174\2\u0e6f\u0e70\7\u016a"+
		"\2\2\u0e70\u02e1\3\2\2\2\u0e71\u0e77\7\u00c0\2\2\u0e72\u0e74\5\u02e4\u0173"+
		"\2\u0e73\u0e75\7\u00c1\2\2\u0e74\u0e73\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75"+
		"\u0e77\3\2\2\2\u0e76\u0e71\3\2\2\2\u0e76\u0e72\3\2\2\2\u0e77\u02e3\3\2"+
		"\2\2\u0e78\u0e79\t\24\2\2\u0e79\u02e5\3\2\2\2\u0e7a\u0e7b\5\u02ce\u0168"+
		"\2\u0e7b\u02e7\3\2\2\2\u0e7c\u0e7d\7\u00c5\2\2\u0e7d\u0e7e\5\u0446\u0224"+
		"\2\u0e7e\u02e9\3\2\2\2\u0e7f\u0e80\7k\2\2\u0e80\u0e82\7\u00be\2\2\u0e81"+
		"\u0e83\5\u0482\u0242\2\u0e82\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84"+
		"\3\2\2\2\u0e84\u0e85\5\u02ec\u0177\2\u0e85\u02eb\3\2\2\2\u0e86\u0e8b\5"+
		"\u02ee\u0178\2\u0e87\u0e88\7\u016d\2\2\u0e88\u0e8a\5\u02ee\u0178\2\u0e89"+
		"\u0e87\3\2\2\2\u0e8a\u0e8d\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8b\u0e8c\3\2"+
		"\2\2\u0e8c\u02ed\3\2\2\2\u0e8d\u0e8b\3\2\2\2\u0e8e\u0e94\5\u02f0\u0179"+
		"\2\u0e8f\u0e94\5\u02f6\u017c\2\u0e90\u0e94\5\u02fa\u017e\2\u0e91\u0e94"+
		"\5\u02fc\u017f\2\u0e92\u0e94\5\u0302\u0182\2\u0e93\u0e8e\3\2\2\2\u0e93"+
		"\u0e8f\3\2\2\2\u0e93\u0e90\3\2\2\2\u0e93\u0e91\3\2\2\2\u0e93\u0e92\3\2"+
		"\2\2\u0e94\u02ef\3\2\2\2\u0e95\u0e9b\5\u02f2\u017a\2\u0e96\u0e97\7\u0169"+
		"\2\2\u0e97\u0e98\5\u02f4\u017b\2\u0e98\u0e99\7\u016a\2\2\u0e99\u0e9b\3"+
		"\2\2\2\u0e9a\u0e95\3\2\2\2\u0e9a\u0e96\3\2\2\2\u0e9b\u02f1\3\2\2\2\u0e9c"+
		"\u0e9e\5\u00f4{\2\u0e9d\u0e9f\5\u0470\u0239\2\u0e9e\u0e9d\3\2\2\2\u0e9e"+
		"\u0e9f\3\2\2\2\u0e9f\u02f3\3\2\2\2\u0ea0\u0ea5\5\u02f2\u017a\2\u0ea1\u0ea2"+
		"\7\u016d\2\2\u0ea2\u0ea4\5\u02f2\u017a\2\u0ea3\u0ea1\3\2\2\2\u0ea4\u0ea7"+
		"\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u02f5\3\2\2\2\u0ea7"+
		"\u0ea5\3\2\2\2\u0ea8\u0ea9\7\u00c6\2\2\u0ea9\u0eaa\7\u0169\2\2\u0eaa\u0eab"+
		"\5\u02f8\u017d\2\u0eab\u0eac\7\u016a\2\2\u0eac\u02f7\3\2\2\2\u0ead\u0eb2"+
		"\5\u02f0\u0179\2\u0eae\u0eaf\7\u016d\2\2\u0eaf\u0eb1\5\u02f0\u0179\2\u0eb0"+
		"\u0eae\3\2\2\2\u0eb1\u0eb4\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb2\u0eb3\3\2"+
		"\2\2\u0eb3\u02f9\3\2\2\2\u0eb4\u0eb2\3\2\2\2\u0eb5\u0eb6\7\u00c7\2\2\u0eb6"+
		"\u0eb7\7\u0169\2\2\u0eb7\u0eb8\5\u02f8\u017d\2\u0eb8\u0eb9\7\u016a\2\2"+
		"\u0eb9\u02fb\3\2\2\2\u0eba\u0ebb\7<\2\2\u0ebb\u0ebc\7\u00c8\2\2\u0ebc"+
		"\u0ebd\7\u0169\2\2\u0ebd\u0ebe\5\u02fe\u0180\2\u0ebe\u0ebf\7\u016a\2\2"+
		"\u0ebf\u02fd\3\2\2\2\u0ec0\u0ec5\5\u0300\u0181\2\u0ec1\u0ec2\7\u016d\2"+
		"\2\u0ec2\u0ec4\5\u0300\u0181\2\u0ec3\u0ec1\3\2\2\2\u0ec4\u0ec7\3\2\2\2"+
		"\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u02ff\3\2\2\2\u0ec7\u0ec5"+
		"\3\2\2\2\u0ec8\u0ece\5\u02f0\u0179\2\u0ec9\u0ece\5\u02f6\u017c\2\u0eca"+
		"\u0ece\5\u02fa\u017e\2\u0ecb\u0ece\5\u02fc\u017f\2\u0ecc\u0ece\5\u0302"+
		"\u0182\2\u0ecd\u0ec8\3\2\2\2\u0ecd\u0ec9\3\2\2\2\u0ecd\u0eca\3\2\2\2\u0ecd"+
		"\u0ecb\3\2\2\2\u0ecd\u0ecc\3\2\2\2\u0ece\u0301\3\2\2\2\u0ecf\u0ed0\7\u0169"+
		"\2\2\u0ed0\u0ed1\7\u016a\2\2\u0ed1\u0303\3\2\2\2\u0ed2\u0ed3\7\u00c9\2"+
		"\2\u0ed3\u0ed4\5\u0446\u0224\2\u0ed4\u0305\3\2\2\2\u0ed5\u0ed6\7\u00ca"+
		"\2\2\u0ed6\u0ed7\5\u0308\u0185\2\u0ed7\u0307\3\2\2\2\u0ed8\u0edd\5\u030a"+
		"\u0186\2\u0ed9\u0eda\7\u016d\2\2\u0eda\u0edc\5\u030a\u0186\2\u0edb\u0ed9"+
		"\3\2\2\2\u0edc\u0edf\3\2\2\2\u0edd\u0edb\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede"+
		"\u0309\3\2\2\2\u0edf\u0edd\3\2\2\2\u0ee0\u0ee1\5\u030c\u0187\2\u0ee1\u0ee2"+
		"\7_\2\2\u0ee2\u0ee3\5\u030e\u0188\2\u0ee3\u030b\3\2\2\2\u0ee4\u0ee5\5"+
		"\u0084C\2\u0ee5\u030d\3\2\2\2\u0ee6\u0ee7\7\u0169\2\2\u0ee7\u0ee8\5\u0310"+
		"\u0189\2\u0ee8\u0ee9\7\u016a\2\2\u0ee9\u030f\3\2\2\2\u0eea\u0eec\5\u0312"+
		"\u018a\2\u0eeb\u0eea\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eee\3\2\2\2\u0eed"+
		"\u0eef\5\u0314\u018b\2\u0eee\u0eed\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef1"+
		"\3\2\2\2\u0ef0\u0ef2\5\u031a\u018e\2\u0ef1\u0ef0\3\2\2\2\u0ef1\u0ef2\3"+
		"\2\2\2\u0ef2\u0ef4\3\2\2\2\u0ef3\u0ef5\5\u031c\u018f\2\u0ef4\u0ef3\3\2"+
		"\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0311\3\2\2\2\u0ef6\u0ef7\5\u0084C\2\u0ef7"+
		"\u0313\3\2\2\2\u0ef8\u0ef9\7\u00bd\2\2\u0ef9\u0efa\7\u00be\2\2\u0efa\u0efb"+
		"\5\u0316\u018c\2\u0efb\u0315\3\2\2\2\u0efc\u0f01\5\u0318\u018d\2\u0efd"+
		"\u0efe\7\u016d\2\2\u0efe\u0f00\5\u0318\u018d\2\u0eff\u0efd\3\2\2\2\u0f00"+
		"\u0f03\3\2\2\2\u0f01\u0eff\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0317\3\2"+
		"\2\2\u0f03\u0f01\3\2\2\2\u0f04\u0f06\5\u00f4{\2\u0f05\u0f07\5\u0470\u0239"+
		"\2\u0f06\u0f05\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0319\3\2\2\2\u0f08\u0f09"+
		"\7\u00cb\2\2\u0f09\u0f0a\7\u00be\2\2\u0f0a\u0f0b\5\u049e\u0250\2\u0f0b"+
		"\u031b\3\2\2\2\u0f0c\u0f0d\5\u031e\u0190\2\u0f0d\u0f0f\5\u0320\u0191\2"+
		"\u0f0e\u0f10\5\u0330\u0199\2\u0f0f\u0f0e\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10"+
		"\u031d\3\2\2\2\u0f11\u0f12\t\25\2\2\u0f12\u031f\3\2\2\2\u0f13\u0f16\5"+
		"\u0322\u0192\2\u0f14\u0f16\5\u0326\u0194\2\u0f15\u0f13\3\2\2\2\u0f15\u0f14"+
		"\3\2\2\2\u0f16\u0321\3\2\2\2\u0f17\u0f18\7\u00cf\2\2\u0f18\u0f1d\7\u00d0"+
		"\2\2\u0f19\u0f1d\5\u0324\u0193\2\u0f1a\u0f1b\7\u00d1\2\2\u0f1b\u0f1d\7"+
		")\2\2\u0f1c\u0f17\3\2\2\2\u0f1c\u0f19\3\2\2\2\u0f1c\u0f1a\3\2\2\2\u0f1d"+
		"\u0323\3\2\2\2\u0f1e\u0f1f\5\u00ccg\2\u0f1f\u0f20\7\u00d0\2\2\u0f20\u0325"+
		"\3\2\2\2\u0f21\u0f22\7\u00b3\2\2\u0f22\u0f23\5\u0328\u0195\2\u0f23\u0f24"+
		"\7\u009d\2\2\u0f24\u0f25\5\u032a\u0196\2\u0f25\u0327\3\2\2\2\u0f26\u0f27"+
		"\5\u032c\u0197\2\u0f27\u0329\3\2\2\2\u0f28\u0f29\5\u032c\u0197\2\u0f29"+
		"\u032b\3\2\2\2\u0f2a\u0f2f\5\u0322\u0192\2\u0f2b\u0f2c\7\u00cf\2\2\u0f2c"+
		"\u0f2f\7\u00d2\2\2\u0f2d\u0f2f\5\u032e\u0198\2\u0f2e\u0f2a\3\2\2\2\u0f2e"+
		"\u0f2b\3\2\2\2\u0f2e\u0f2d\3\2\2\2\u0f2f\u032d\3\2\2\2\u0f30\u0f31\5\u00cc"+
		"g\2\u0f31\u0f32\7\u00d2\2\2\u0f32\u032f\3\2\2\2\u0f33\u0f34\7\u00d3\2"+
		"\2\u0f34\u0f35\7\u00d1\2\2\u0f35\u0f3e\7)\2\2\u0f36\u0f37\7\u00d3\2\2"+
		"\u0f37\u0f3e\7k\2\2\u0f38\u0f39\7\u00d3\2\2\u0f39\u0f3e\7\u00d4\2\2\u0f3a"+
		"\u0f3b\7\u00d3\2\2\u0f3b\u0f3c\7\u00d5\2\2\u0f3c\u0f3e\7\u00d6\2\2\u0f3d"+
		"\u0f33\3\2\2\2\u0f3d\u0f36\3\2\2\2\u0f3d\u0f38\3\2\2\2\u0f3d\u0f3a\3\2"+
		"\2\2\u0f3e\u0331\3\2\2\2\u0f3f\u0f41\7\u00d7\2\2\u0f40\u0f42\5\u0482\u0242"+
		"\2\u0f41\u0f40\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43\u0f44"+
		"\5\u0334\u019b\2\u0f44\u0f45\5\u02a2\u0152\2\u0f45\u0333\3\2\2\2\u0f46"+
		"\u0f50\7\u016b\2\2\u0f47\u0f4c\5\u0336\u019c\2\u0f48\u0f49\7\u016d\2\2"+
		"\u0f49\u0f4b\5\u0336\u019c\2\u0f4a\u0f48\3\2\2\2\u0f4b\u0f4e\3\2\2\2\u0f4c"+
		"\u0f4a\3\2\2\2\u0f4c\u0f4d\3\2\2\2\u0f4d\u0f50\3\2\2\2\u0f4e\u0f4c\3\2"+
		"\2\2\u0f4f\u0f46\3\2\2\2\u0f4f\u0f47\3\2\2\2\u0f50\u0335\3\2\2\2\u0f51"+
		"\u0f54\5\u033e\u01a0\2\u0f52\u0f54\5\u0338\u019d\2\u0f53\u0f51\3\2\2\2"+
		"\u0f53\u0f52\3\2\2\2\u0f54\u0337\3\2\2\2\u0f55\u0f56\5\u033a\u019e\2\u0f56"+
		"\u0f57\7\u016f\2\2\u0f57\u0f58\7\u016b\2\2\u0f58\u0f5b\3\2\2\2\u0f59\u0f5b"+
		"\5\u0342\u01a2\2\u0f5a\u0f55\3\2\2\2\u0f5a\u0f59\3\2\2\2\u0f5b\u0339\3"+
		"\2\2\2\u0f5c\u0f61\5\u033c\u019f\2\u0f5d\u0f5e\7\u016f\2\2\u0f5e\u0f60"+
		"\5\u033c\u019f\2\u0f5f\u0f5d\3\2\2\2\u0f60\u0f63\3\2\2\2\u0f61\u0f5f\3"+
		"\2\2\2\u0f61\u0f62\3\2\2\2\u0f62\u033b\3\2\2\2\u0f63\u0f61\3\2\2\2\u0f64"+
		"\u0f65\5\34\17\2\u0f65\u033d\3\2\2\2\u0f66\u0f68\5\u0176\u00bc\2\u0f67"+
		"\u0f69\5\u0340\u01a1\2\u0f68\u0f67\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69\u033f"+
		"\3\2\2\2\u0f6a\u0f6c\7_\2\2\u0f6b\u0f6a\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c"+
		"\u0f6d\3\2\2\2\u0f6d\u0f6e\5\64\33\2\u0f6e\u0341\3\2\2\2\u0f6f\u0f70\5"+
		"\u00c4c\2\u0f70\u0f71\7\u016f\2\2\u0f71\u0f77\7\u016b\2\2\u0f72\u0f73"+
		"\7_\2\2\u0f73\u0f74\7\u0169\2\2\u0f74\u0f75\5\u0344\u01a3\2\u0f75\u0f76"+
		"\7\u016a\2\2\u0f76\u0f78\3\2\2\2\u0f77\u0f72\3\2\2\2\u0f77\u0f78\3\2\2"+
		"\2\u0f78\u0343\3\2\2\2\u0f79\u0f7a\5\u02ce\u0168\2\u0f7a\u0345\3\2\2\2"+
		"\u0f7b\u0f7d\5\u0348\u01a5\2\u0f7c\u0f7b\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d"+
		"\u0f7e\3\2\2\2\u0f7e\u0f80\5\u0350\u01a9\2\u0f7f\u0f81\5\u035e\u01b0\2"+
		"\u0f80\u0f7f\3\2\2\2\u0f80\u0f81\3\2\2\2\u0f81\u0f83\3\2\2\2\u0f82\u0f84"+
		"\5\u0360\u01b1\2\u0f83\u0f82\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84\u0f86\3"+
		"\2\2\2\u0f85\u0f87\5\u0362\u01b2\2\u0f86\u0f85\3\2\2\2\u0f86\u0f87\3\2"+
		"\2\2\u0f87\u0347\3\2\2\2\u0f88\u0f8a\7%\2\2\u0f89\u0f8b\7\u00d8\2\2\u0f8a"+
		"\u0f89\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0f8d\5\u034a"+
		"\u01a6\2\u0f8d\u0349\3\2\2\2\u0f8e\u0f93\5\u034c\u01a7\2\u0f8f\u0f90\7"+
		"\u016d\2\2\u0f90\u0f92\5\u034c\u01a7\2\u0f91\u0f8f\3\2\2\2\u0f92\u0f95"+
		"\3\2\2\2\u0f93\u0f91\3\2\2\2\u0f93\u0f94\3\2\2\2\u0f94\u034b\3\2\2\2\u0f95"+
		"\u0f93\3\2\2\2\u0f96\u0f9b\58\35\2\u0f97\u0f98\7\u0169\2\2\u0f98\u0f99"+
		"\5\u034e\u01a8\2\u0f99\u0f9a\7\u016a\2\2\u0f9a\u0f9c\3\2\2\2\u0f9b\u0f97"+
		"\3\2\2\2\u0f9b\u0f9c\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9e\7_\2\2\u0f9e"+
		"\u0fa0\5\u0386\u01c4\2\u0f9f\u0fa1\5\u036c\u01b7\2\u0fa0\u0f9f\3\2\2\2"+
		"\u0fa0\u0fa1\3\2\2\2\u0fa1\u034d\3\2\2\2\u0fa2\u0fa3\5\u02ce\u0168\2\u0fa3"+
		"\u034f\3\2\2\2\u0fa4\u0fa5\b\u01a9\1\2\u0fa5\u0fb5\5\u0352\u01aa\2\u0fa6"+
		"\u0fa8\7\u00a5\2\2\u0fa7\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0faa"+
		"\3\2\2\2\u0fa9\u0fab\5\u035a\u01ae\2\u0faa\u0fa9\3\2\2\2\u0faa\u0fab\3"+
		"\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fb5\5\u0352\u01aa\2\u0fad\u0faf\7\u00a5"+
		"\2\2\u0fae\u0fad\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb1\3\2\2\2\u0fb0"+
		"\u0fb2\5\u035a\u01ae\2\u0fb1\u0fb0\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fb3"+
		"\3\2\2\2\u0fb3\u0fb5\5\u0352\u01aa\2\u0fb4\u0fa4\3\2\2\2\u0fb4\u0fa7\3"+
		"\2\2\2\u0fb4\u0fae\3\2\2\2\u0fb5\u0fbe\3\2\2\2\u0fb6\u0fb7\f\6\2\2\u0fb7"+
		"\u0fb8\7\u00a4\2\2\u0fb8\u0fbd\7\u008a\2\2\u0fb9\u0fba\f\4\2\2\u0fba\u0fbb"+
		"\7\u00a6\2\2\u0fbb\u0fbd\7\u008a\2\2\u0fbc\u0fb6\3\2\2\2\u0fbc\u0fb9\3"+
		"\2\2\2\u0fbd\u0fc0\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf"+
		"\u0351\3\2\2\2\u0fc0\u0fbe\3\2\2\2\u0fc1\u0fc2\b\u01aa\1\2\u0fc2\u0fcb"+
		"\5\u0354\u01ab\2\u0fc3\u0fc5\7\u00a5\2\2\u0fc4\u0fc3\3\2\2\2\u0fc4\u0fc5"+
		"\3\2\2\2\u0fc5\u0fc7\3\2\2\2\u0fc6\u0fc8\5\u035a\u01ae\2\u0fc7\u0fc6\3"+
		"\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0fc9\3\2\2\2\u0fc9\u0fcb\5\u0354\u01ab"+
		"\2\u0fca\u0fc1\3\2\2\2\u0fca\u0fc4\3\2\2\2\u0fcb\u0fd1\3\2\2\2\u0fcc\u0fcd"+
		"\f\4\2\2\u0fcd\u0fce\7\u00a7\2\2\u0fce\u0fd0\7\u008a\2\2\u0fcf\u0fcc\3"+
		"\2\2\2\u0fd0\u0fd3\3\2\2\2\u0fd1\u0fcf\3\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2"+
		"\u0353\3\2\2\2\u0fd3\u0fd1\3\2\2\2\u0fd4\u0fe3\5\u0356\u01ac\2\u0fd5\u0fd6"+
		"\7\u0169\2\2\u0fd6\u0fd8\5\u0350\u01a9\2\u0fd7\u0fd9\5\u035e\u01b0\2\u0fd8"+
		"\u0fd7\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fdb\3\2\2\2\u0fda\u0fdc\5\u0360"+
		"\u01b1\2\u0fdb\u0fda\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0fde\3\2\2\2\u0fdd"+
		"\u0fdf\5\u0362\u01b2\2\u0fde\u0fdd\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe0"+
		"\3\2\2\2\u0fe0\u0fe1\7\u016a\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fd4\3\2\2"+
		"\2\u0fe2\u0fd5\3\2\2\2\u0fe3\u0355\3\2\2\2\u0fe4\u0fe8\5\u0332\u019a\2"+
		"\u0fe5\u0fe8\5\u029a\u014e\2\u0fe6\u0fe8\5\u0358\u01ad\2\u0fe7\u0fe4\3"+
		"\2\2\2\u0fe7\u0fe5\3\2\2\2\u0fe7\u0fe6\3\2\2\2\u0fe8\u0357\3\2\2\2\u0fe9"+
		"\u0fea\7\u00a8\2\2\u0fea\u0feb\5\u02ca\u0166\2\u0feb\u0359\3\2\2\2\u0fec"+
		"\u0ff2\7\u00d9\2\2\u0fed\u0fee\7\u00be\2\2\u0fee\u0fef\7\u0169\2\2\u0fef"+
		"\u0ff0\5\u035c\u01af\2\u0ff0\u0ff1\7\u016a\2\2\u0ff1\u0ff3\3\2\2\2\u0ff2"+
		"\u0fed\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u035b\3\2\2\2\u0ff4\u0ff5\5\u02ce"+
		"\u0168\2\u0ff5\u035d\3\2\2\2\u0ff6\u0ff7\7\u00cb\2\2\u0ff7\u0ff8\7\u00be"+
		"\2\2\u0ff8\u0ff9\5\u049e\u0250\2\u0ff9\u035f\3\2\2\2\u0ffa\u0ffb\7\u00da"+
		"\2\2\u0ffb\u0ffc\5\u0366\u01b4\2\u0ffc\u0ffd\t\26\2\2\u0ffd\u0361\3\2"+
		"\2\2\u0ffe\u0fff\7\u00db\2\2\u0fff\u1001\t\27\2\2\u1000\u1002\5\u0364"+
		"\u01b3\2\u1001\u1000\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1003\3\2\2\2\u1003"+
		"\u1007\t\26\2\2\u1004\u1008\7\u00b7\2\2\u1005\u1006\7%\2\2\u1006\u1008"+
		"\7\u00d4\2\2\u1007\u1004\3\2\2\2\u1007\u1005\3\2\2\2\u1008\u0363\3\2\2"+
		"\2\u1009\u100c\5\u0368\u01b5\2\u100a\u100c\5\u036a\u01b6\2\u100b\u1009"+
		"\3\2\2\2\u100b\u100a\3\2\2\2\u100c\u0365\3\2\2\2\u100d\u100e\5\u00d0i"+
		"\2\u100e\u0367\3\2\2\2\u100f\u1010\5\u00d0i\2\u1010\u0369\3\2\2\2\u1011"+
		"\u1012\5\u00d0i\2\u1012\u1013\7\u00dc\2\2\u1013\u036b\3\2\2\2\u1014\u101a"+
		"\5\u036e\u01b8\2\u1015\u101a\5\u0374\u01bb\2\u1016\u1017\5\u036e\u01b8"+
		"\2\u1017\u1018\5\u0374\u01bb\2\u1018\u101a\3\2\2\2\u1019\u1014\3\2\2\2"+
		"\u1019\u1015\3\2\2\2\u1019\u1016\3\2\2\2\u101a\u036d\3\2\2\2\u101b\u101c"+
		"\7\u00dd\2\2\u101c\u101d\5\u0370\u01b9\2\u101d\u101e\7\n\2\2\u101e\u101f"+
		"\5\u0372\u01ba\2\u101f\u036f\3\2\2\2\u1020\u1021\7\u00de\2\2\u1021\u1022"+
		"\7M\2\2\u1022\u1023\7\u00be\2\2\u1023\u1029\5\u02ce\u0168\2\u1024\u1025"+
		"\7\u00df\2\2\u1025\u1026\7M\2\2\u1026\u1027\7\u00be\2\2\u1027\u1029\5"+
		"\u02ce\u0168\2\u1028\u1020\3\2\2\2\u1028\u1024\3\2\2\2\u1029\u0371\3\2"+
		"\2\2\u102a\u102b\5\64\33\2\u102b\u0373\3\2\2\2\u102c\u102d\7\u00e0\2\2"+
		"\u102d\u102e\5\u0376\u01bc\2\u102e\u102f\7\n\2\2\u102f\u1030\5\u037a\u01be"+
		"\2\u1030\u1031\7\u00b6\2\2\u1031\u1032\5\u037e\u01c0\2\u1032\u1033\7;"+
		"\2\2\u1033\u1034\5\u0380\u01c1\2\u1034\u1035\7h\2\2\u1035\u1036\5\u037c"+
		"\u01bf\2\u1036\u0375\3\2\2\2\u1037\u103c\5\u0378\u01bd\2\u1038\u1039\7"+
		"\u016d\2\2\u1039\u103b\5\u0378\u01bd\2\u103a\u1038\3\2\2\2\u103b\u103e"+
		"\3\2\2\2\u103c\u103a\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u0377\3\2\2\2\u103e"+
		"\u103c\3\2\2\2\u103f\u1040\5\64\33\2\u1040\u0379\3\2\2\2\u1041\u1042\5"+
		"\64\33\2\u1042\u037b\3\2\2\2\u1043\u1044\5\64\33\2\u1044\u037d\3\2\2\2"+
		"\u1045\u1046\5\u0176\u00bc\2\u1046\u037f\3\2\2\2\u1047\u1048\5\u0176\u00bc"+
		"\2\u1048\u0381\3\2\2\2\u1049\u104a\5\u0388\u01c5\2\u104a\u0383\3\2\2\2"+
		"\u104b\u104c\5\u0388\u01c5\2\u104c\u0385\3\2\2\2\u104d\u104e\5\u0388\u01c5"+
		"\2\u104e\u0387\3\2\2\2\u104f\u1050\7\u0169\2\2\u1050\u1051\5\u0346\u01a4"+
		"\2\u1051\u1052\7\u016a\2\2\u1052\u0389\3\2\2\2\u1053\u1067\5\u038c\u01c7"+
		"\2\u1054\u1067\5\u0392\u01ca\2\u1055\u1067\5\u0396\u01cc\2\u1056\u1067"+
		"\5\u039e\u01d0\2\u1057\u1067\5\u03b0\u01d9\2\u1058\u1067\5\u03d2\u01ea"+
		"\2\u1059\u1067\5\u03d6\u01ec\2\u105a\u1067\5\u03da\u01ee\2\u105b\u1067"+
		"\5\u03e4\u01f3\2\u105c\u1067\5\u03e6\u01f4\2\u105d\u1067\5\u03e8\u01f5"+
		"\2\u105e\u1067\5\u03ec\u01f7\2\u105f\u1067\5\u03f0\u01f9\2\u1060\u1067"+
		"\5\u03fa\u01fe\2\u1061\u1067\5\u0402\u0202\2\u1062\u1067\5\u0406\u0204"+
		"\2\u1063\u1067\5\u040a\u0206\2\u1064\u1067\5\u040e\u0208\2\u1065\u1067"+
		"\5\u041a\u020e\2\u1066\u1053\3\2\2\2\u1066\u1054\3\2\2\2\u1066\u1055\3"+
		"\2\2\2\u1066\u1056\3\2\2\2\u1066\u1057\3\2\2\2\u1066\u1058\3\2\2\2\u1066"+
		"\u1059\3\2\2\2\u1066\u105a\3\2\2\2\u1066\u105b\3\2\2\2\u1066\u105c\3\2"+
		"\2\2\u1066\u105d\3\2\2\2\u1066\u105e\3\2\2\2\u1066\u105f\3\2\2\2\u1066"+
		"\u1060\3\2\2\2\u1066\u1061\3\2\2\2\u1066\u1062\3\2\2\2\u1066\u1063\3\2"+
		"\2\2\u1066\u1064\3\2\2\2\u1066\u1065\3\2\2\2\u1067\u038b\3\2\2\2\u1068"+
		"\u1069\5\u0296\u014c\2\u1069\u106a\5\u038e\u01c8\2\u106a\u038d\3\2\2\2"+
		"\u106b\u106c\5\u0390\u01c9\2\u106c\u106d\5\u0296\u014c\2\u106d\u038f\3"+
		"\2\2\2\u106e\u106f\t\30\2\2\u106f\u0391\3\2\2\2\u1070\u1071\5\u0296\u014c"+
		"\2\u1071\u1072\5\u0394\u01cb\2\u1072\u0393\3\2\2\2\u1073\u1075\7\u009e"+
		"\2\2\u1074\u1073\3\2\2\2\u1074\u1075\3\2\2\2\u1075\u1076\3\2\2\2\u1076"+
		"\u1077\7\u00b3\2\2\u1077\u1080\7\u00b4\2\2\u1078\u107a\7\u00b5\2\2\u1079"+
		"\u1078\3\2\2\2\u1079\u107a\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u107c\5\u0296"+
		"\u014c\2\u107c\u107d\7\u009d\2\2\u107d\u107e\5\u0296\u014c\2\u107e\u1080"+
		"\3\2\2\2\u107f\u1074\3\2\2\2\u107f\u1079\3\2\2\2\u1080\u0395\3\2\2\2\u1081"+
		"\u1082\5\u0296\u014c\2\u1082\u1083\5\u0398\u01cd\2\u1083\u0397\3\2\2\2"+
		"\u1084\u1086\7\u009e\2\2\u1085\u1084\3\2\2\2\u1085\u1086\3\2\2\2\u1086"+
		"\u1087\3\2\2\2\u1087\u1088\7g\2\2\u1088\u1089\5\u039a\u01ce\2\u1089\u0399"+
		"\3\2\2\2\u108a\u1090\5\u0386\u01c4\2\u108b\u108c\7\u0169\2\2\u108c\u108d"+
		"\5\u039c\u01cf\2\u108d\u108e\7\u016a\2\2\u108e\u1090\3\2\2\2\u108f\u108a"+
		"\3\2\2\2\u108f\u108b\3\2\2\2\u1090\u039b\3\2\2\2\u1091\u1096\5\u0290\u0149"+
		"\2\u1092\u1093\7\u016d\2\2\u1093\u1095\5\u0290\u0149\2\u1094\u1092\3\2"+
		"\2\2\u1095\u1098\3\2\2\2\u1096\u1094\3\2\2\2\u1096\u1097\3\2\2\2\u1097"+
		"\u039d\3\2\2\2\u1098\u1096\3\2\2\2\u1099\u109c\5\u03a0\u01d1\2\u109a\u109c"+
		"\5\u03a8\u01d5\2\u109b\u1099\3\2\2\2\u109b\u109a\3\2\2\2\u109c\u039f\3"+
		"\2\2\2\u109d\u109e\5\u0296\u014c\2\u109e\u109f\5\u03a2\u01d2\2\u109f\u03a1"+
		"\3\2\2\2\u10a0\u10a2\7\u009e\2\2\u10a1\u10a0\3\2\2\2\u10a1\u10a2\3\2\2"+
		"\2\u10a2\u10a3\3\2\2\2\u10a3\u10a4\7\u00e1\2\2\u10a4\u10a7\5\u03a4\u01d3"+
		"\2\u10a5\u10a6\7\u0083\2\2\u10a6\u10a8\5\u03a6\u01d4\2\u10a7\u10a5\3\2"+
		"\2\2\u10a7\u10a8\3\2\2\2\u10a8\u03a3\3\2\2\2\u10a9\u10aa\5\u01da\u00ee"+
		"\2\u10aa\u03a5\3\2\2\2\u10ab\u10ac\5\u01da\u00ee\2\u10ac\u03a7\3\2\2\2"+
		"\u10ad\u10ae\5\u0296\u014c\2\u10ae\u10af\5\u03aa\u01d6\2\u10af\u03a9\3"+
		"\2\2\2\u10b0\u10b2\7\u009e\2\2\u10b1\u10b0\3\2\2\2\u10b1\u10b2\3\2\2\2"+
		"\u10b2\u10b3\3\2\2\2\u10b3\u10b4\7\u00e1\2\2\u10b4\u10b7\5\u03ac\u01d7"+
		"\2\u10b5\u10b6\7\u0083\2\2\u10b6\u10b8\5\u03ae\u01d8\2\u10b7\u10b5\3\2"+
		"\2\2\u10b7\u10b8\3\2\2\2\u10b8\u03ab\3\2\2\2\u10b9\u10ba\5\u01e0\u00f1"+
		"\2\u10ba\u03ad\3\2\2\2\u10bb\u10bc\5\u01e0\u00f1\2\u10bc\u03af\3\2\2\2"+
		"\u10bd\u10be\5\u0296\u014c\2\u10be\u10bf\5\u03b2\u01da\2\u10bf\u03b1\3"+
		"\2\2\2\u10c0\u10c2\7\u009e\2\2\u10c1\u10c0\3\2\2\2\u10c1\u10c2\3\2\2\2"+
		"\u10c2\u10c3\3\2\2\2\u10c3\u10c4\7\u0082\2\2\u10c4\u10c5\7\u00b6\2\2\u10c5"+
		"\u10c8\5\u03b4\u01db\2\u10c6\u10c7\7\u0083\2\2\u10c7\u10c9\5\u03a6\u01d4"+
		"\2\u10c8\u10c6\3\2\2\2\u10c8\u10c9\3\2\2\2\u10c9\u03b3\3\2\2\2\u10ca\u10cb"+
		"\5\u01da\u00ee\2\u10cb\u03b5\3\2\2\2\u10cc\u10cd\b\u01dc\1\2\u10cd\u10ce"+
		"\5\u03b8\u01dd\2\u10ce\u10d4\3\2\2\2\u10cf\u10d0\f\3\2\2\u10d0\u10d1\7"+
		"\u0180\2\2\u10d1\u10d3\5\u03b8\u01dd\2\u10d2\u10cf\3\2\2\2\u10d3\u10d6"+
		"\3\2\2\2\u10d4\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u03b7\3\2\2\2\u10d6"+
		"\u10d4\3\2\2\2\u10d7\u10d8\b\u01dd\1\2\u10d8\u10d9\5\u03ba\u01de\2\u10d9"+
		"\u10de\3\2\2\2\u10da\u10db\f\3\2\2\u10db\u10dd\5\u03ba\u01de\2\u10dc\u10da"+
		"\3\2\2\2\u10dd\u10e0\3\2\2\2\u10de\u10dc\3\2\2\2\u10de\u10df\3\2\2\2\u10df"+
		"\u03b9\3\2\2\2\u10e0\u10de\3\2\2\2\u10e1\u10ef\5\u03c4\u01e3\2\u10e2\u10e3"+
		"\5\u03c4\u01e3\2\u10e3\u10e4\7\u016b\2\2\u10e4\u10ef\3\2\2\2\u10e5\u10e6"+
		"\5\u03c4\u01e3\2\u10e6\u10e7\7\u016c\2\2\u10e7\u10ef\3\2\2\2\u10e8\u10e9"+
		"\5\u03c4\u01e3\2\u10e9\u10ea\7\u0177\2\2\u10ea\u10ef\3\2\2\2\u10eb\u10ec"+
		"\5\u03c4\u01e3\2\u10ec\u10ed\5\u03bc\u01df\2\u10ed\u10ef\3\2\2\2\u10ee"+
		"\u10e1\3\2\2\2\u10ee\u10e2\3\2\2\2\u10ee\u10e5\3\2\2\2\u10ee\u10e8\3\2"+
		"\2\2\u10ee\u10eb\3\2\2\2\u10ef\u03bb\3\2\2\2\u10f0\u10f1\7\u0181\2\2\u10f1"+
		"\u10f3\5\u03c0\u01e1\2\u10f2\u10f4\5\u03be\u01e0\2\u10f3\u10f2\3\2\2\2"+
		"\u10f3\u10f4\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f6\7\u0182\2\2\u10f6"+
		"\u03bd\3\2\2\2\u10f7\u10f9\7\u016d\2\2\u10f8\u10fa\5\u03c2\u01e2\2\u10f9"+
		"\u10f8\3\2\2\2\u10f9\u10fa\3\2\2\2\u10fa\u03bf\3\2\2\2\u10fb\u10fc\7\u0196"+
		"\2\2\u10fc\u03c1\3\2\2\2\u10fd\u10fe\7\u0196\2\2\u10fe\u03c3\3\2\2\2\u10ff"+
		"\u1107\5\u03c6\u01e4\2\u1100\u1107\7\u0166\2\2\u1101\u1107\5\u03c8\u01e5"+
		"\2\u1102\u1103\7\u0169\2\2\u1103\u1104\5\u03b6\u01dc\2\u1104\u1105\7\u016a"+
		"\2\2\u1105\u1107\3\2\2\2\u1106\u10ff\3\2\2\2\u1106\u1100\3\2\2\2\u1106"+
		"\u1101\3\2\2\2\u1106\u1102\3\2\2\2\u1107\u03c5\3\2\2\2\u1108\u1109\t\31"+
		"\2\2\u1109\u03c7\3\2\2\2\u110a\u112b\7\u017f\2\2\u110b\u110d\7\u017a\2"+
		"\2\u110c\u110e\5\u03ce\u01e8\2\u110d\u110c\3\2\2\2\u110e\u110f\3\2\2\2"+
		"\u110f\u110d\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u1111\3\2\2\2\u1111\u1112"+
		"\7\u017c\2\2\u1112\u112b\3\2\2\2\u1113\u1114\7\u017a\2\2\u1114\u1116\7"+
		"\u017e\2\2\u1115\u1117\5\u03ce\u01e8\2\u1116\u1115\3\2\2\2\u1117\u1118"+
		"\3\2\2\2\u1118\u1116\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111a\3\2\2\2\u111a"+
		"\u111b\7\u017c\2\2\u111b\u112b\3\2\2\2\u111c\u111e\7\u017a\2\2\u111d\u111f"+
		"\5\u03ca\u01e6\2\u111e\u111d\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u111e\3"+
		"\2\2\2\u1120\u1121\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1124\7\u017e\2\2"+
		"\u1123\u1125\5\u03cc\u01e7\2\u1124\u1123\3\2\2\2\u1125\u1126\3\2\2\2\u1126"+
		"\u1124\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1128\3\2\2\2\u1128\u1129\7\u017c"+
		"\2\2\u1129\u112b\3\2\2\2\u112a\u110a\3\2\2\2\u112a\u110b\3\2\2\2\u112a"+
		"\u1113\3\2\2\2\u112a\u111c\3\2\2\2\u112b\u03c9\3\2\2\2\u112c\u112d\5\u03ce"+
		"\u01e8\2\u112d\u03cb\3\2\2\2\u112e\u112f\5\u03ce\u01e8\2\u112f\u03cd\3"+
		"\2\2\2\u1130\u113c\5\u03c6\u01e4\2\u1131\u1132\5\u03c6\u01e4\2\u1132\u1133"+
		"\7\u016e\2\2\u1133\u1134\5\u03c6\u01e4\2\u1134\u113c\3\2\2\2\u1135\u1136"+
		"\7\u017a\2\2\u1136\u1137\7\u0172\2\2\u1137\u1138\5\u03d0\u01e9\2\u1138"+
		"\u1139\7\u0172\2\2\u1139\u113a\7\u017c\2\2\u113a\u113c\3\2\2\2\u113b\u1130"+
		"\3\2\2\2\u113b\u1131\3\2\2\2\u113b\u1135\3\2\2\2\u113c\u03cf\3\2\2\2\u113d"+
		"\u113e\5\34\17\2\u113e\u03d1\3\2\2\2\u113f\u1140\5\u0296\u014c\2\u1140"+
		"\u1141\5\u03d4\u01eb\2\u1141\u03d3\3\2\2\2\u1142\u1144\7\u009e\2\2\u1143"+
		"\u1142\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1146\7\u00e2"+
		"\2\2\u1146\u1149\5\u018e\u00c8\2\u1147\u1148\7f\2\2\u1148\u114a\5\u0190"+
		"\u00c9\2\u1149\u1147\3\2\2\2\u1149\u114a\3\2\2\2\u114a\u03d5\3\2\2\2\u114b"+
		"\u114c\5\u0296\u014c\2\u114c\u114d\5\u03d8\u01ed\2\u114d\u03d7\3\2\2\2"+
		"\u114e\u1150\7\u009f\2\2\u114f\u1151\7\u009e\2\2\u1150\u114f\3\2\2\2\u1150"+
		"\u1151\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u1153\7:\2\2\u1153\u03d9\3\2"+
		"\2\2\u1154\u1155\5\u0296\u014c\2\u1155\u1156\5\u03dc\u01ef\2\u1156\u03db"+
		"\3\2\2\2\u1157\u1158\5\u0390\u01c9\2\u1158\u1159\5\u03de\u01f0\2\u1159"+
		"\u115a\5\u0386\u01c4\2\u115a\u03dd\3\2\2\2\u115b\u115e\5\u03e0\u01f1\2"+
		"\u115c\u115e\5\u03e2\u01f2\2\u115d\u115b\3\2\2\2\u115d\u115c\3\2\2\2\u115e"+
		"\u03df\3\2\2\2\u115f\u1160\7\u008a\2\2\u1160\u03e1\3\2\2\2\u1161\u1162"+
		"\t\32\2\2\u1162\u03e3\3\2\2\2\u1163\u1164\7\u00e5\2\2\u1164\u1165\5\u0386"+
		"\u01c4\2\u1165\u03e5\3\2\2\2\u1166\u1167\7\u00e6\2\2\u1167\u1168\5\u0386"+
		"\u01c4\2\u1168\u03e7\3\2\2\2\u1169\u116a\5\u0296\u014c\2\u116a\u116b\5"+
		"\u03ea\u01f6\2\u116b\u03e9\3\2\2\2\u116c\u116e\7\u009f\2\2\u116d\u116f"+
		"\7\u009e\2\2\u116e\u116d\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u1171\3\2\2"+
		"\2\u1170\u1172\5\u020a\u0106\2\u1171\u1170\3\2\2\2\u1171\u1172\3\2\2\2"+
		"\u1172\u1173\3\2\2\2\u1173\u1174\7\u00e7\2\2\u1174\u03eb\3\2\2\2\u1175"+
		"\u1176\5\u0296\u014c\2\u1176\u1177\5\u03ee\u01f8\2\u1177\u03ed\3\2\2\2"+
		"\u1178\u117a\7\u00e8\2\2\u1179\u117b\7\u00e6\2\2\u117a\u1179\3\2\2\2\u117a"+
		"\u117b\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u1183\7\u00e9\2\2\u117d\u1183"+
		"\7\u00ea\2\2\u117e\u1180\7\u00c4\2\2\u117f\u117e\3\2\2\2\u117f\u1180\3"+
		"\2\2\2\u1180\u1181\3\2\2\2\u1181\u1183\5\u0386\u01c4\2\u1182\u1178\3\2"+
		"\2\2\u1182\u117d\3\2\2\2\u1182\u117f\3\2\2\2\u1183\u03ef\3\2\2\2\u1184"+
		"\u1185\5\u03f2\u01fa\2\u1185\u1186\5\u03f4\u01fb\2\u1186\u03f1\3\2\2\2"+
		"\u1187\u1188\5\u03f6\u01fc\2\u1188\u03f3\3\2\2\2\u1189\u118a\7\u00eb\2"+
		"\2\u118a\u118b\5\u03f8\u01fd\2\u118b\u03f5\3\2\2\2\u118c\u118d\5\u0296"+
		"\u014c\2\u118d\u03f7\3\2\2\2\u118e\u118f\5\u0296\u014c\2\u118f\u03f9\3"+
		"\2\2\2\u1190\u1191\5\u03fe\u0200\2\u1191\u1192\5\u03fc\u01ff\2\u1192\u03fb"+
		"\3\2\2\2\u1193\u1195\7\u009f\2\2\u1194\u1196\7\u009e\2\2\u1195\u1194\3"+
		"\2\2\2\u1195\u1196\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u1198\7\u00a5\2\2"+
		"\u1198\u1199\7L\2\2\u1199\u119a\5\u0400\u0201\2\u119a\u03fd\3\2\2\2\u119b"+
		"\u119c\5\u0296\u014c\2\u119c\u03ff\3\2\2\2\u119d\u119e\5\u0296\u014c\2"+
		"\u119e\u0401\3\2\2\2\u119f\u11a0\5\u0296\u014c\2\u11a0\u11a1\5\u0404\u0203"+
		"\2\u11a1\u0403\3\2\2\2\u11a2\u11a4\7\u009e\2\2\u11a3\u11a2\3\2\2\2\u11a3"+
		"\u11a4\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11a7\7\u00ec\2\2\u11a6\u11a8"+
		"\7\u00b2\2\2\u11a7\u11a6\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11a9\3\2\2"+
		"\2\u11a9\u11aa\5\u026a\u0136\2\u11aa\u0405\3\2\2\2\u11ab\u11ac\5\u0296"+
		"\u014c\2\u11ac\u11ad\5\u0408\u0205\2\u11ad\u0407\3\2\2\2\u11ae\u11b0\7"+
		"\u009e\2\2\u11af\u11ae\3\2\2\2\u11af\u11b0\3\2\2\2\u11b0\u11b1\3\2\2\2"+
		"\u11b1\u11b3\7\u00ed\2\2\u11b2\u11b4\7\u00b2\2\2\u11b3\u11b2\3\2\2\2\u11b3"+
		"\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b6\5\u026a\u0136\2\u11b6\u0409"+
		"\3\2\2\2\u11b7\u11b8\5\u0296\u014c\2\u11b8\u11b9\5\u040c\u0207\2\u11b9"+
		"\u040b\3\2\2\2\u11ba\u11bc\7\u009f\2\2\u11bb\u11bd\7\u009e\2\2\u11bc\u11bb"+
		"\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11bf\7\u00ee\2"+
		"\2\u11bf\u11c0\7\n\2\2\u11c0\u040d\3\2\2\2\u11c1\u11c2\5\u0296\u014c\2"+
		"\u11c2\u11c3\5\u0410\u0209\2\u11c3\u040f\3\2\2\2\u11c4\u11c6\7\u009f\2"+
		"\2\u11c5\u11c7\7\u009e\2\2\u11c6\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7"+
		"\u11c8\3\2\2\2\u11c8\u11c9\7\u00b2\2\2\u11c9\u11ca\7\u0169\2\2\u11ca\u11cb"+
		"\5\u0412\u020a\2\u11cb\u11cc\7\u016a\2\2\u11cc\u0411\3\2\2\2\u11cd\u11d2"+
		"\5\u0414\u020b\2\u11ce\u11cf\7\u016d\2\2\u11cf\u11d1\5\u0414\u020b\2\u11d0"+
		"\u11ce\3\2\2\2\u11d1\u11d4\3\2\2\2\u11d2\u11d0\3\2\2\2\u11d2\u11d3\3\2"+
		"\2\2\u11d3\u0413\3\2\2\2\u11d4\u11d2\3\2\2\2\u11d5\u11d8\5\u0416\u020c"+
		"\2\u11d6\u11d8\5\u0418\u020d\2\u11d7\u11d5\3\2\2\2\u11d7\u11d6\3\2\2\2"+
		"\u11d8\u0415\3\2\2\2\u11d9\u11da\5\u00be`\2\u11da\u0417\3\2\2\2\u11db"+
		"\u11dc\7\u00b7\2\2\u11dc\u11dd\5\u00be`\2\u11dd\u0419\3\2\2\2\u11de\u11e6"+
		"\5\u041c\u020f\2\u11df\u11e6\5\u042c\u0217\2\u11e0\u11e6\5\u0430\u0219"+
		"\2\u11e1\u11e6\5\u0436\u021c\2\u11e2\u11e6\5\u043a\u021e\2\u11e3\u11e6"+
		"\5\u043e\u0220\2\u11e4\u11e6\5\u0442\u0222\2\u11e5\u11de\3\2\2\2\u11e5"+
		"\u11df\3\2\2\2\u11e5\u11e0\3\2\2\2\u11e5\u11e1\3\2\2\2\u11e5\u11e2\3\2"+
		"\2\2\u11e5\u11e3\3\2\2\2\u11e5\u11e4\3\2\2\2\u11e6\u041b\3\2\2\2\u11e7"+
		"\u11e8\5\u0420\u0211\2\u11e8\u11e9\5\u041e\u0210\2\u11e9\u041d\3\2\2\2"+
		"\u11ea\u11eb\7\u00eb\2\2\u11eb\u11ec\5\u0422\u0212\2\u11ec\u041f\3\2\2"+
		"\2\u11ed\u11ee\5\u0424\u0213\2\u11ee\u0421\3\2\2\2\u11ef\u11f0\5\u0424"+
		"\u0213\2\u11f0\u0423\3\2\2\2\u11f1\u11fa\5\u0426\u0214\2\u11f2\u11f3\7"+
		"\u00ef\2\2\u11f3\u11f4\7\u0169\2\2\u11f4\u11f5\5\u0428\u0215\2\u11f5\u11f6"+
		"\7\u016d\2\2\u11f6\u11f7\5\u042a\u0216\2\u11f7\u11f8\7\u016a\2\2\u11f8"+
		"\u11fa\3\2\2\2\u11f9\u11f1\3\2\2\2\u11f9\u11f2\3\2\2\2\u11fa\u0425\3\2"+
		"\2\2\u11fb\u11fc\5\u00f2z\2\u11fc\u0427\3\2\2\2\u11fd\u11fe\5\u0222\u0112"+
		"\2\u11fe\u0429\3\2\2\2\u11ff\u1200\5\u0222\u0112\2\u1200\u042b\3\2\2\2"+
		"\u1201\u1202\5\u0420\u0211\2\u1202\u1203\5\u042e\u0218\2\u1203\u042d\3"+
		"\2\2\2\u1204\u1205\7\u00f0\2\2\u1205\u1206\5\u0422\u0212\2\u1206\u042f"+
		"\3\2\2\2\u1207\u1208\5\u0420\u0211\2\u1208\u1209\5\u0432\u021a\2\u1209"+
		"\u0431\3\2\2\2\u120a\u120b\7\u00f1\2\2\u120b\u120c\5\u0434\u021b\2\u120c"+
		"\u0433\3\2\2\2\u120d\u1210\5\u0424\u0213\2\u120e\u1210\5\u0222\u0112\2"+
		"\u120f\u120d\3\2\2\2\u120f\u120e\3\2\2\2\u1210\u0435\3\2\2\2\u1211\u1212"+
		"\5\u0420\u0211\2\u1212\u1213\5\u0438\u021d\2\u1213\u0437\3\2\2\2\u1214"+
		"\u1215\7\u00f2\2\2\u1215\u1216\5\u0422\u0212\2\u1216\u0439\3\2\2\2\u1217"+
		"\u1218\5\u0420\u0211\2\u1218\u1219\5\u043c\u021f\2\u1219\u043b\3\2\2\2"+
		"\u121a\u121b\7\u00f3\2\2\u121b\u121c\5\u0422\u0212\2\u121c\u043d\3\2\2"+
		"\2\u121d\u121e\5\u0420\u0211\2\u121e\u121f\5\u0440\u0221\2\u121f\u043f"+
		"\3\2\2\2\u1220\u1221\7\u00f4\2\2\u1221\u1222\7\u00f2\2\2\u1222\u1223\5"+
		"\u0422\u0212\2\u1223\u0441\3\2\2\2\u1224\u1225\5\u0420\u0211\2\u1225\u1226"+
		"\5\u0444\u0223\2\u1226\u0443\3\2\2\2\u1227\u1228\7\u00f4\2\2\u1228\u1229"+
		"\7\u00f3\2\2\u1229\u122a\5\u0422\u0212\2\u122a\u0445\3\2\2\2\u122b\u122c"+
		"\5\u0248\u0125\2\u122c\u0447\3\2\2\2\u122d\u122e\7\u00f5\2\2\u122e\u122f"+
		"\5\u044a\u0226\2\u122f\u0449\3\2\2\2\u1230\u1231\t\33\2\2\u1231\u044b"+
		"\3\2\2\2\u1232\u1233\7\u00ff\2\2\u1233\u1234\5\u044e\u0228\2\u1234\u044d"+
		"\3\2\2\2\u1235\u123a\5&\24\2\u1236\u1237\7\u016d\2\2\u1237\u1239\5&\24"+
		"\2\u1238\u1236\3\2\2\2\u1239\u123c\3\2\2\2\u123a\u1238\3\2\2\2\u123a\u123b"+
		"\3\2\2\2\u123b\u044f\3\2\2\2\u123c\u123a\3\2\2\2\u123d\u123e\5\u0452\u022a"+
		"\2\u123e\u123f\5\u0454\u022b\2\u123f\u0451\3\2\2\2\u1240\u1241\5&\24\2"+
		"\u1241\u1242\7\u016f\2\2\u1242\u1244\3\2\2\2\u1243\u1240\3\2\2\2\u1243"+
		"\u1244\3\2\2\2\u1244\u1245\3\2\2\2\u1245\u1246\5\62\32\2\u1246\u0453\3"+
		"\2\2\2\u1247\u1250\7\u0169\2\2\u1248\u124d\5\u0456\u022c\2\u1249\u124a"+
		"\7\u016d\2\2\u124a\u124c\5\u0456\u022c\2\u124b\u1249\3\2\2\2\u124c\u124f"+
		"\3\2\2\2\u124d\u124b\3\2\2\2\u124d\u124e\3\2\2\2\u124e\u1251\3\2\2\2\u124f"+
		"\u124d\3\2\2\2\u1250\u1248\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u1252\3\2"+
		"\2\2\u1252\u1253\7\u016a\2\2\u1253\u0455\3\2\2\2\u1254\u125a\5\u0176\u00bc"+
		"\2\u1255\u125a\5\u0458\u022d\2\u1256\u125a\5\u00d2j\2\u1257\u125a\5\u00e6"+
		"t\2\u1258\u125a\5\u045a\u022e\2\u1259\u1254\3\2\2\2\u1259\u1255\3\2\2"+
		"\2\u1259\u1256\3\2\2\2\u1259\u1257\3\2\2\2\u1259\u1258\3\2\2\2\u125a\u0457"+
		"\3\2\2\2\u125b\u125c\5\u0176\u00bc\2\u125c\u125d\7_\2\2\u125d\u125e\5"+
		"\u00be`\2\u125e\u0459\3\2\2\2\u125f\u1260\5L\'\2\u1260\u1261\7\u018f\2"+
		"\2\u1261\u1262\5\u045c\u022f\2\u1262\u045b\3\2\2\2\u1263\u1267\5\u0176"+
		"\u00bc\2\u1264\u1267\5\u00d2j\2\u1265\u1267\5\u00e6t\2\u1266\u1263\3\2"+
		"\2\2\u1266\u1264\3\2\2\2\u1266\u1265\3\2\2\2\u1267\u045d\3\2\2\2\u1268"+
		"\u126c\5\u0460\u0231\2\u1269\u126c\5\u0462\u0232\2\u126a\u126c\5\u0464"+
		"\u0233\2\u126b\u1268\3\2\2\2\u126b\u1269\3\2\2\2\u126b\u126a\3\2\2\2\u126c"+
		"\u045f\3\2\2\2\u126d\u126e\5V,\2\u126e\u0461\3\2\2\2\u126f\u1270\5V,\2"+
		"\u1270\u0463\3\2\2\2\u1271\u1272\5V,\2\u1272\u0465\3\2\2\2\u1273\u1274"+
		"\7\u0100\2\2\u1274\u1275\5\u0468\u0235\2\u1275\u1276\5B\"\2\u1276\u127e"+
		"\3\2\2\2\u1277\u1278\5\u0468\u0235\2\u1278\u127b\5\u046a\u0236\2\u1279"+
		"\u127a\79\2\2\u127a\u127c\5\\/\2\u127b\u1279\3\2\2\2\u127b\u127c\3\2\2"+
		"\2\u127c\u127e\3\2\2\2\u127d\u1273\3\2\2\2\u127d\u1277\3\2\2\2\u127e\u0467"+
		"\3\2\2\2\u127f\u1289\7\u0101\2\2\u1280\u1289\7\u0102\2\2\u1281\u1289\7"+
		"\u0103\2\2\u1282\u1289\7\u0104\2\2\u1283\u1289\7\u0105\2\2\u1284\u1286"+
		"\7\u0106\2\2\u1285\u1284\3\2\2\2\u1285\u1286\3\2\2\2\u1286\u1287\3\2\2"+
		"\2\u1287\u1289\7\u0107\2\2\u1288\u127f\3\2\2\2\u1288\u1280\3\2\2\2\u1288"+
		"\u1281\3\2\2\2\u1288\u1282\3\2\2\2\u1288\u1283\3\2\2\2\u1288\u1285\3\2"+
		"\2\2\u1289\u0469\3\2\2\2\u128a\u128c\5\u046c\u0237\2\u128b\u128d\5\u046e"+
		"\u0238\2\u128c\u128b\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u046b\3\2\2\2\u128e"+
		"\u1291\5> \2\u128f\u1291\5@!\2\u1290\u128e\3\2\2\2\u1290\u128f\3\2\2\2"+
		"\u1291\u046d\3\2\2\2\u1292\u129b\7\u0169\2\2\u1293\u1298\5\u0086D\2\u1294"+
		"\u1295\7\u016d\2\2\u1295\u1297\5\u0086D\2\u1296\u1294\3\2\2\2\u1297\u129a"+
		"\3\2\2\2\u1298\u1296\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u129c\3\2\2\2\u129a"+
		"\u1298\3\2\2\2\u129b\u1293\3\2\2\2\u129b\u129c\3\2\2\2\u129c\u129d\3\2"+
		"\2\2\u129d\u129e\7\u016a\2\2\u129e\u046f\3\2\2\2\u129f\u12a0\7\u0108\2"+
		"\2\u12a0\u12a1\5T+\2\u12a1\u0471\3\2\2\2\u12a2\u12a3\7\u0109\2\2\u12a3"+
		"\u12a4\5N(\2\u12a4\u0473\3\2\2\2\u12a5\u12aa\5\u0476\u023c\2\u12a6\u12a8"+
		"\7\u009e\2\2\u12a7\u12a6\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12a9\3\2\2"+
		"\2\u12a9\u12ab\7\u010a\2\2\u12aa\u12a7\3\2\2\2\u12aa\u12ab\3\2\2\2\u12ab"+
		"\u12ad\3\2\2\2\u12ac\u12ae\5\u0478\u023d\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae"+
		"\3\2\2\2\u12ae\u12bb\3\2\2\2\u12af\u12b1\7\u009e\2\2\u12b0\u12af\3\2\2"+
		"\2\u12b0\u12b1\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u12b4\7\u010a\2\2\u12b3"+
		"\u12b5\5\u0476\u023c\2\u12b4\u12b3\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5\u12b7"+
		"\3\2\2\2\u12b6\u12b8\5\u0478\u023d\2\u12b7\u12b6\3\2\2\2\u12b7\u12b8\3"+
		"\2\2\2\u12b8\u12bb\3\2\2\2\u12b9\u12bb\5\u0478\u023d\2\u12ba\u12a5\3\2"+
		"\2\2\u12ba\u12b0\3\2\2\2\u12ba\u12b9\3\2\2\2\u12bb\u0475\3\2\2\2\u12bc"+
		"\u12bd\7\u010b\2\2\u12bd\u12c1\7\u010c\2\2\u12be\u12bf\7\u010b\2\2\u12bf"+
		"\u12c1\7\u010d\2\2\u12c0\u12bc\3\2\2\2\u12c0\u12be\3\2\2\2\u12c1\u0477"+
		"\3\2\2\2\u12c2\u12c4\7\u009e\2\2\u12c3\u12c2\3\2\2\2\u12c3\u12c4\3\2\2"+
		"\2\u12c4\u12c5\3\2\2\2\u12c5\u12c6\7\u010e\2\2\u12c6\u0479\3\2\2\2\u12c7"+
		"\u12c8\7\u010f\2\2\u12c8\u12c9\7\u0169\2\2\u12c9\u12ca\7\u016b\2\2\u12ca"+
		"\u12cc\7\u016a\2\2\u12cb\u12cd\5\u0484\u0243\2\u12cc\u12cb\3\2\2\2\u12cc"+
		"\u12cd\3\2\2\2\u12cd\u12df\3\2\2\2\u12ce\u12d0\5\u047c\u023f\2\u12cf\u12d1"+
		"\5\u0484\u0243\2\u12d0\u12cf\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12df\3"+
		"\2\2\2\u12d2\u12d4\5\u0486\u0244\2\u12d3\u12d5\5\u0484\u0243\2\u12d4\u12d3"+
		"\3\2\2\2\u12d4\u12d5\3\2\2\2\u12d5\u12df\3\2\2\2\u12d6\u12d8\5\u048e\u0248"+
		"\2\u12d7\u12d9\5\u0484\u0243\2\u12d8\u12d7\3\2\2\2\u12d8\u12d9\3\2\2\2"+
		"\u12d9\u12df\3\2\2\2\u12da\u12dc\5\u049c\u024f\2\u12db\u12dd\5\u0484\u0243"+
		"\2\u12dc\u12db\3\2\2\2\u12dc\u12dd\3\2\2\2\u12dd\u12df\3\2\2\2\u12de\u12c7"+
		"\3\2\2\2\u12de\u12ce\3\2\2\2\u12de\u12d2\3\2\2\2\u12de\u12d6\3\2\2\2\u12de"+
		"\u12da\3\2\2\2\u12df\u047b\3\2\2\2\u12e0\u12e1\5\u047e\u0240\2\u12e1\u12e3"+
		"\7\u0169\2\2\u12e2\u12e4\5\u0482\u0242\2\u12e3\u12e2\3\2\2\2\u12e3\u12e4"+
		"\3\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u12e6\5\u0176\u00bc\2\u12e6\u12e7\7"+
		"\u016a\2\2\u12e7\u047d\3\2\2\2\u12e8\u12e9\5\u0480\u0241\2\u12e9\u047f"+
		"\3\2\2\2\u12ea\u12eb\t\34\2\2\u12eb\u0481\3\2\2\2\u12ec\u12ed\t\35\2\2"+
		"\u12ed\u0483\3\2\2\2\u12ee\u12ef\7\u011c\2\2\u12ef\u12f0\7\u0169\2\2\u12f0"+
		"\u12f1\7\u00c5\2\2\u12f1\u12f2\5\u0446\u0224\2\u12f2\u12f3\7\u016a\2\2"+
		"\u12f3\u0485\3\2\2\2\u12f4\u12f5\5\u0488\u0245\2\u12f5\u12f6\7\u0169\2"+
		"\2\u12f6\u12f7\5\u048a\u0246\2\u12f7\u12f8\7\u016d\2\2\u12f8\u12f9\5\u048c"+
		"\u0247\2\u12f9\u12fa\7\u016a\2\2\u12fa\u0487\3\2\2\2\u12fb\u12fc\t\36"+
		"\2\2\u12fc\u0489\3\2\2\2\u12fd\u12fe\5\u0180\u00c1\2\u12fe\u048b\3\2\2"+
		"\2\u12ff\u1300\5\u0180\u00c1\2\u1300\u048d\3\2\2\2\u1301\u1304\5\u0490"+
		"\u0249\2\u1302\u1304\5\u0496\u024c\2\u1303\u1301\3\2\2\2\u1303\u1302\3"+
		"\2\2\2\u1304\u048f\3\2\2\2\u1305\u1306\5\u0100\u0081\2\u1306\u1307\7\u0169"+
		"\2\2\u1307\u1308\5\u0494\u024b\2\u1308\u1309\7\u016a\2\2\u1309\u130a\5"+
		"\u0492\u024a\2\u130a\u0491\3\2\2\2\u130b\u130c\7\u0129\2\2\u130c\u130d"+
		"\7k\2\2\u130d\u130e\7\u0169\2\2\u130e\u130f\7\u00cb\2\2\u130f\u1310\7"+
		"\u00be\2\2\u1310\u1311\5\u049e\u0250\2\u1311\u1312\7\u016a\2\2\u1312\u0493"+
		"\3\2\2\2\u1313\u1318\5\u0176\u00bc\2\u1314\u1315\7\u016d\2\2\u1315\u1317"+
		"\5\u0176\u00bc\2\u1316\u1314\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316\3"+
		"\2\2\2\u1318\u1319\3\2\2\2\u1319\u0495\3\2\2\2\u131a\u1318\3\2\2\2\u131b"+
		"\u131c\5\u049a\u024e\2\u131c\u131d\7\u0169\2\2\u131d\u131e\5\u0498\u024d"+
		"\2\u131e\u131f\7\u016a\2\2\u131f\u1320\5\u0492\u024a\2\u1320\u0497\3\2"+
		"\2\2\u1321\u1322\5\u0180\u00c1\2\u1322\u0499\3\2\2\2\u1323\u1324\t\37"+
		"\2\2\u1324\u049b\3\2\2\2\u1325\u1326\7\u012c\2\2\u1326\u1327\7\u0169\2"+
		"\2\u1327\u132b\5\u0176\u00bc\2\u1328\u1329\7\u00cb\2\2\u1329\u132a\7\u00be"+
		"\2\2\u132a\u132c\5\u049e\u0250\2\u132b\u1328\3\2\2\2\u132b\u132c\3\2\2"+
		"\2\u132c\u132d\3\2\2\2\u132d\u132e\7\u016a\2\2\u132e\u049d\3\2\2\2\u132f"+
		"\u1334\5\u04a0\u0251\2\u1330\u1331\7\u016d\2\2\u1331\u1333\5\u04a0\u0251"+
		"\2\u1332\u1330\3\2\2\2\u1333\u1336\3\2\2\2\u1334\u1332\3\2\2\2\u1334\u1335"+
		"\3\2\2\2\u1335\u049f\3\2\2\2\u1336\u1334\3\2\2\2\u1337\u1339\5\u04a2\u0252"+
		"\2\u1338\u133a\5\u04a4\u0253\2\u1339\u1338\3\2\2\2\u1339\u133a\3\2\2\2"+
		"\u133a\u133c\3\2\2\2\u133b\u133d\5\u04a6\u0254\2\u133c\u133b\3\2\2\2\u133c"+
		"\u133d\3\2\2\2\u133d\u04a1\3\2\2\2\u133e\u133f\5\u0176\u00bc\2\u133f\u04a3"+
		"\3\2\2\2\u1340\u1341\t \2\2\u1341\u04a5\3\2\2\2\u1342\u1343\7G\2\2\u1343"+
		"\u1347\7M\2\2\u1344\u1345\7G\2\2\u1345\u1347\7N\2\2\u1346\u1342\3\2\2"+
		"\2\u1346\u1344\3\2\2\2\u1347\u04a7\3\2\2\2\u1348\u1349\7\u012f\2\2\u1349"+
		"\u134a\5D#\2\u134a\u134b\5\u04aa\u0256\2\u134b\u134c\79\2\2\u134c\u134d"+
		"\5\u04b4\u025b\2\u134d\u04a9\3\2\2\2\u134e\u1350\5\u04ac\u0257\2\u134f"+
		"\u134e\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1352\3\2\2\2\u1351\u1353\5\u04ae"+
		"\u0258\2\u1352\u1351\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1354\3\2\2\2\u1354"+
		"\u1356\7\u0130\2\2\u1355\u1357\5\u04b0\u0259\2\u1356\u1355\3\2\2\2\u1356"+
		"\u1357\3\2\2\2\u1357\u1359\3\2\2\2\u1358\u135a\5\u04b2\u025a\2\u1359\u1358"+
		"\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u04ab\3\2\2\2\u135b\u135c\t!\2\2\u135c"+
		"\u04ad\3\2\2\2\u135d\u1361\7\u0134\2\2\u135e\u135f\7\u00d5\2\2\u135f\u1361"+
		"\7\u0134\2\2\u1360\u135d\3\2\2\2\u1360\u135e\3\2\2\2\u1361\u04af\3\2\2"+
		"\2\u1362\u1363\7%\2\2\u1363\u1367\7\u0135\2\2\u1364\u1365\7\'\2\2\u1365"+
		"\u1367\7\u0135\2\2\u1366\u1362\3\2\2\2\u1366\u1364\3\2\2\2\u1367\u04b1"+
		"\3\2\2\2\u1368\u1369\7%\2\2\u1369\u136d\7\u0136\2\2\u136a\u136b\7\'\2"+
		"\2\u136b\u136d\7\u0136\2\2\u136c\u1368\3\2\2\2\u136c\u136a\3\2\2\2\u136d"+
		"\u04b3\3\2\2\2\u136e\u1370\5\u0346\u01a4\2\u136f\u1371\5\u04b6\u025c\2"+
		"\u1370\u136f\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u04b5\3\2\2\2\u1372\u137a"+
		"\79\2\2\u1373\u1374\7\u0137\2\2\u1374\u137b\7\u00b7\2\2\u1375\u1378\7"+
		"\u0138\2\2\u1376\u1377\7\u00b2\2\2\u1377\u1379\5\u02ce\u0168\2\u1378\u1376"+
		"\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u137b\3\2\2\2\u137a\u1373\3\2\2\2\u137a"+
		"\u1375\3\2\2\2\u137b\u04b7\3\2\2\2\u137c\u137d\7\u0139\2\2\u137d\u137e"+
		"\5D#\2\u137e\u04b9\3\2\2\2\u137f\u1384\7\u00db\2\2\u1380\u1382\5\u04bc"+
		"\u025f\2\u1381\u1380\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u1383\3\2\2\2\u1383"+
		"\u1385\7L\2\2\u1384\u1381\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1386\3\2"+
		"\2\2\u1386\u1387\5D#\2\u1387\u1388\7\u013a\2\2\u1388\u1389\5\u04be\u0260"+
		"\2\u1389\u04bb\3\2\2\2\u138a\u1391\7`\2\2\u138b\u1391\7\u013b\2\2\u138c"+
		"\u1391\7M\2\2\u138d\u1391\7N\2\2\u138e\u138f\t\"\2\2\u138f\u1391\5\u00d0"+
		"i\2\u1390\u138a\3\2\2\2\u1390\u138b\3\2\2\2\u1390\u138c\3\2\2\2\u1390"+
		"\u138d\3\2\2\2\u1390\u138e\3\2\2\2\u1391\u04bd\3\2\2\2\u1392\u1397\5\u00d2"+
		"j\2\u1393\u1394\7\u016d\2\2\u1394\u1396\5\u00d2j\2\u1395\u1393\3\2\2\2"+
		"\u1396\u1399\3\2\2\2\u1397\u1395\3\2\2\2\u1397\u1398\3\2\2\2\u1398\u04bf"+
		"\3\2\2\2\u1399\u1397\3\2\2\2\u139a\u139b\7\u013e\2\2\u139b\u139c\5D#\2"+
		"\u139c\u04c1\3\2\2\2\u139d\u139f\7\u00d7\2\2\u139e\u13a0\5\u0482\u0242"+
		"\2\u139f\u139e\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13a2"+
		"\5\u0334\u019b\2\u13a2\u13a3\7\u013a\2\2\u13a3\u13a4\5\u04c4\u0263\2\u13a4"+
		"\u13a5\5\u02a2\u0152\2\u13a5\u04c3\3\2\2\2\u13a6\u13ab\5\u00d2j\2\u13a7"+
		"\u13a8\7\u016d\2\2\u13a8\u13aa\5\u00d2j\2\u13a9\u13a7\3\2\2\2\u13aa\u13ad"+
		"\3\2\2\2\u13ab\u13a9\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u04c5\3\2\2\2\u13ad"+
		"\u13ab\3\2\2\2\u13ae\u13af\7\u013f\2\2\u13af\u13b0\7L\2\2\u13b0\u13b5"+
		"\5\u04c8\u0265\2\u13b1\u13b3\7_\2\2\u13b2\u13b1\3\2\2\2\u13b2\u13b3\3"+
		"\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b6\5\66\34\2\u13b5\u13b2\3\2\2\2\u13b5"+
		"\u13b6\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13b8\7\u00c5\2\2\u13b8\u13b9"+
		"\7\u00d1\2\2\u13b9\u13ba\7\u00b2\2\2\u13ba\u13bb\5D#\2\u13bb\u04c7\3\2"+
		"\2\2\u13bc\u13c3\5\"\22\2\u13bd\u13be\7\u00b7\2\2\u13be\u13bf\7\u0169"+
		"\2\2\u13bf\u13c0\5\"\22\2\u13c0\u13c1\7\u016a\2\2\u13c1\u13c3\3\2\2\2"+
		"\u13c2\u13bc\3\2\2\2\u13c2\u13bd\3\2\2\2\u13c3\u04c9\3\2\2\2\u13c4\u13c5"+
		"\7\u013f\2\2\u13c5\u13c6\7L\2\2\u13c6\u13d0\5\u04c8\u0265\2\u13c7\u13c8"+
		"\79\2\2\u13c8\u13c9\7\u0140\2\2\u13c9\u13ca\7\u00b2\2\2\u13ca\u13cb\5"+
		"\u0540\u02a1\2\u13cb\u13cc\7L\2\2\u13cc\u13cd\5\u02ba\u015e\2\u13cd\u13ce"+
		"\7\u00b6\2\2\u13ce\u13cf\5\u02bc\u015f\2\u13cf\u13d1\3\2\2\2\u13d0\u13c7"+
		"\3\2\2\2\u13d0\u13d1\3\2\2\2\u13d1\u13d6\3\2\2\2\u13d2\u13d4\7_\2\2\u13d3"+
		"\u13d2\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d5\3\2\2\2\u13d5\u13d7\5\66"+
		"\34\2\u13d6\u13d3\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13da\3\2\2\2\u13d8"+
		"\u13d9\7\u00c5\2\2\u13d9\u13db\5\u0446\u0224\2\u13da\u13d8\3\2\2\2\u13da"+
		"\u13db\3\2\2\2\u13db\u04cb\3\2\2\2\u13dc\u13dd\7\u0141\2\2\u13dd\u13de"+
		"\7\u00a8\2\2\u13de\u13e0\5\u04c8\u0265\2\u13df\u13e1\5\u04ce\u0268\2\u13e0"+
		"\u13df\3\2\2\2\u13e0\u13e1\3\2\2\2\u13e1\u04cd\3\2\2\2\u13e2\u13e3\7\u0142"+
		"\2\2\u13e3\u13e7\7\u0143\2\2\u13e4\u13e5\7\u0144\2\2\u13e5\u13e7\7\u0143"+
		"\2\2\u13e6\u13e2\3\2\2\2\u13e6\u13e4\3\2\2\2\u13e7\u04cf\3\2\2\2\u13e8"+
		"\u13e9\7\u0145\2\2\u13e9\u13ea\7\u013a\2\2\u13ea\u13eb\5\u04d2\u026a\2"+
		"\u13eb\u13ec\5\u04d4\u026b\2\u13ec\u04d1\3\2\2\2\u13ed\u13ee\5\"\22\2"+
		"\u13ee\u04d3\3\2\2\2\u13ef\u13f3\5\u04d6\u026c\2\u13f0\u13f3\5\u04d8\u026d"+
		"\2\u13f1\u13f3\5\u04dc\u026f\2\u13f2\u13ef\3\2\2\2\u13f2\u13f0\3\2\2\2"+
		"\u13f2\u13f1\3\2\2\2\u13f3\u04d5\3\2\2\2\u13f4\u13f5\7\u0169\2\2\u13f5"+
		"\u13f6\5\u04de\u0270\2\u13f6\u13f7\7\u016a\2\2\u13f7\u13f9\3\2\2\2\u13f8"+
		"\u13f4\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fb\3\2\2\2\u13fa\u13fc\5\u04da"+
		"\u026e\2\u13fb\u13fa\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd"+
		"\u13fe\5\u0346\u01a4\2\u13fe\u04d7\3\2\2\2\u13ff\u1400\7\u0169\2\2\u1400"+
		"\u1401\5\u04de\u0270\2\u1401\u1402\7\u016a\2\2\u1402\u1404\3\2\2\2\u1403"+
		"\u13ff\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1406\3\2\2\2\u1405\u1407\5\u04da"+
		"\u026e\2\u1406\u1405\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u1408\3\2\2\2\u1408"+
		"\u1409\5\u029e\u0150\2\u1409\u04d9\3\2\2\2\u140a\u140b\7\u0146\2\2\u140b"+
		"\u140c\7\65\2\2\u140c\u1411\7\66\2\2\u140d\u140e\7\u0146\2\2\u140e\u140f"+
		"\7\u00af\2\2\u140f\u1411\7\66\2\2\u1410\u140a\3\2\2\2\u1410\u140d\3\2"+
		"\2\2\u1411\u04db\3\2\2\2\u1412\u1413\7;\2\2\u1413\u1414\7\u00a9\2\2\u1414"+
		"\u04dd\3\2\2\2\u1415\u1416\5\u02ce\u0168\2\u1416\u04df\3\2\2\2\u1417\u1418"+
		"\7\u0147\2\2\u1418\u1419\7\u013a\2\2\u1419\u141e\5\u04c8\u0265\2\u141a"+
		"\u141c\7_\2\2\u141b\u141a\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u141d\3\2"+
		"\2\2\u141d\u141f\5\u04e2\u0272\2\u141e\u141b\3\2\2\2\u141e\u141f\3\2\2"+
		"\2\u141f\u1420\3\2\2\2\u1420\u1421\7h\2\2\u1421\u1422\5\u02a8\u0155\2"+
		"\u1422\u1423\7\u00bf\2\2\u1423\u1424\5\u0446\u0224\2\u1424\u1425\5\u04e4"+
		"\u0273\2\u1425\u04e1\3\2\2\2\u1426\u1427\5\66\34\2\u1427\u04e3\3\2\2\2"+
		"\u1428\u142a\5\u04e6\u0274\2\u1429\u1428\3\2\2\2\u142a\u142b\3\2\2\2\u142b"+
		"\u1429\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u04e5\3\2\2\2\u142d\u1430\5\u04e8"+
		"\u0275\2\u142e\u1430\5\u04ec\u0277\2\u142f\u142d\3\2\2\2\u142f\u142e\3"+
		"\2\2\2\u1430\u04e7\3\2\2\2\u1431\u1432\7[\2\2\u1432\u1435\7\u0148\2\2"+
		"\u1433\u1434\7\u009d\2\2\u1434\u1436\5\u0446\u0224\2\u1435\u1433\3\2\2"+
		"\2\u1435\u1436\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1438\7\\\2\2\u1438\u1439"+
		"\5\u04ea\u0276\2\u1439\u04e9\3\2\2\2\u143a\u143d\5\u04ee\u0278\2\u143b"+
		"\u143d\5\u04f0\u0279\2\u143c\u143a\3\2\2\2\u143c\u143b\3\2\2\2\u143d\u04eb"+
		"\3\2\2\2\u143e\u143f\7[\2\2\u143f\u1440\7\u009e\2\2\u1440\u1443\7\u0148"+
		"\2\2\u1441\u1442\7\u009d\2\2\u1442\u1444\5\u0446\u0224\2\u1443\u1441\3"+
		"\2\2\2\u1443\u1444\3\2\2\2\u1444\u1445\3\2\2\2\u1445\u1446\7\\\2\2\u1446"+
		"\u1447\5\u04f2\u027a\2\u1447\u04ed\3\2\2\2\u1448\u1449\7\u0138\2\2\u1449"+
		"\u144a\7\n\2\2\u144a\u144b\5\u04fc\u027f\2\u144b\u04ef\3\2\2\2\u144c\u144d"+
		"\7\u013f\2\2\u144d\u04f1\3\2\2\2\u144e\u1453\7\u0145\2\2\u144f\u1450\7"+
		"\u0169\2\2\u1450\u1451\5\u04de\u0270\2\u1451\u1452\7\u016a\2\2\u1452\u1454"+
		"\3\2\2\2\u1453\u144f\3\2\2\2\u1453\u1454\3\2\2\2\u1454\u1456\3\2\2\2\u1455"+
		"\u1457\5\u04da\u026e\2\u1456\u1455\3\2\2\2\u1456\u1457\3\2\2\2\u1457\u1458"+
		"\3\2\2\2\u1458\u1459";
	private static final String _serializedATNSegment2 =
		"\7\u00a9\2\2\u1459\u145a\5\u04f4\u027b\2\u145a\u04f3\3\2\2\2\u145b\u145c"+
		"\7\u0169\2\2\u145c\u1461\5\u04f6\u027c\2\u145d\u145e\7\u016d\2\2\u145e"+
		"\u1460\5\u04f6\u027c\2\u145f\u145d\3\2\2\2\u1460\u1463\3\2\2\2\u1461\u145f"+
		"\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u1464\3\2\2\2\u1463\u1461\3\2\2\2\u1464"+
		"\u1465\7\u016a\2\2\u1465\u04f5\3\2\2\2\u1466\u1469\5\u0176\u00bc\2\u1467"+
		"\u1469\5\u00e6t\2\u1468\u1466\3\2\2\2\u1468\u1467\3\2\2\2\u1469\u04f7"+
		"\3\2\2\2\u146a\u146b\7\u0138\2\2\u146b\u1470\5\u04c8\u0265\2\u146c\u146e"+
		"\7_\2\2\u146d\u146c\3\2\2\2\u146d\u146e\3\2\2\2\u146e\u146f\3\2\2\2\u146f"+
		"\u1471\5\66\34\2\u1470\u146d\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u1472\3"+
		"\2\2\2\u1472\u1473\7\n\2\2\u1473\u1474\5\u04fc\u027f\2\u1474\u1475\7\u00c5"+
		"\2\2\u1475\u1476\7\u00d1\2\2\u1476\u1477\7\u00b2\2\2\u1477\u1478\5D#\2"+
		"\u1478\u04f9\3\2\2\2\u1479\u147a\7\u0138\2\2\u147a\u1484\5\u04c8\u0265"+
		"\2\u147b\u147c\79\2\2\u147c\u147d\7\u0140\2\2\u147d\u147e\7\u00b2\2\2"+
		"\u147e\u147f\5\u0540\u02a1\2\u147f\u1480\7L\2\2\u1480\u1481\5\u02ba\u015e"+
		"\2\u1481\u1482\7\u00b6\2\2\u1482\u1483\5\u02bc\u015f\2\u1483\u1485\3\2"+
		"\2\2\u1484\u147b\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u148a\3\2\2\2\u1486"+
		"\u1488\7_\2\2\u1487\u1486\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u1489\3\2"+
		"\2\2\u1489\u148b\5\66\34\2\u148a\u1487\3\2\2\2\u148a\u148b\3\2\2\2\u148b"+
		"\u148c\3\2\2\2\u148c\u148d\7\n\2\2\u148d\u1490\5\u04fc\u027f\2\u148e\u148f"+
		"\7\u00c5\2\2\u148f\u1491\5\u0446\u0224\2\u1490\u148e\3\2\2\2\u1490\u1491"+
		"\3\2\2\2\u1491\u04fb\3\2\2\2\u1492\u1497\5\u04fe\u0280\2\u1493\u1494\7"+
		"\u016d\2\2\u1494\u1496\5\u04fe\u0280\2\u1495\u1493\3\2\2\2\u1496\u1499"+
		"\3\2\2\2\u1497\u1495\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u04fd\3\2\2\2\u1499"+
		"\u1497\3\2\2\2\u149a\u14a0\5\u0502\u0282\2\u149b\u149c\5\u0500\u0281\2"+
		"\u149c\u149d\7\u0175\2\2\u149d\u149e\5\u050e\u0288\2\u149e\u14a0\3\2\2"+
		"\2\u149f\u149a\3\2\2\2\u149f\u149b\3\2\2\2\u14a0\u04ff\3\2\2\2\u14a1\u14a4"+
		"\5\u0508\u0285\2\u14a2\u14a4\5\u050c\u0287\2\u14a3\u14a1\3\2\2\2\u14a3"+
		"\u14a2\3\2\2\2\u14a4\u0501\3\2\2\2\u14a5\u14a6\5\u0504\u0283\2\u14a6\u14a7"+
		"\7\u0175\2\2\u14a7\u14a8\5\u0506\u0284\2\u14a8\u0503\3\2\2\2\u14a9\u14aa"+
		"\7\u0169\2\2\u14aa\u14af\5\u0500\u0281\2\u14ab\u14ac\7\u016d\2\2\u14ac"+
		"\u14ae\5\u0500\u0281\2\u14ad\u14ab\3\2\2\2\u14ae\u14b1\3\2\2\2\u14af\u14ad"+
		"\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14b2\3\2\2\2\u14b1\u14af\3\2\2\2\u14b2"+
		"\u14b3\7\u016a\2\2\u14b3\u0505\3\2\2\2\u14b4\u14b5\5\u0294\u014b\2\u14b5"+
		"\u0507\3\2\2\2\u14b6\u14bd\5\u050a\u0286\2\u14b7\u14b8\5\u050a\u0286\2"+
		"\u14b8\u14b9\7\u0178\2\2\u14b9\u14ba\5\u00d0i\2\u14ba\u14bb\7\u0179\2"+
		"\2\u14bb\u14bd\3\2\2\2\u14bc\u14b6\3\2\2\2\u14bc\u14b7\3\2\2\2\u14bd\u0509"+
		"\3\2\2\2\u14be\u14bf\5\64\33\2\u14bf\u050b\3\2\2\2\u14c0\u14c1\b\u0287"+
		"\1\2\u14c1\u14c2\5\u050a\u0286\2\u14c2\u14c3\7\u016f\2\2\u14c3\u14c4\5"+
		"@!\2\u14c4\u14ca\3\2\2\2\u14c5\u14c6\f\3\2\2\u14c6\u14c7\7\u016f\2\2\u14c7"+
		"\u14c9\5@!\2\u14c8\u14c5\3\2\2\2\u14c9\u14cc\3\2\2\2\u14ca\u14c8\3\2\2"+
		"\2\u14ca\u14cb\3\2\2\2\u14cb\u050d\3\2\2\2\u14cc\u14ca\3\2\2\2\u14cd\u14d0"+
		"\5\u0176\u00bc\2\u14ce\u14d0\5\u00e6t\2\u14cf\u14cd\3\2\2\2\u14cf\u14ce"+
		"\3\2\2\2\u14d0\u050f\3\2\2\2\u14d1\u14d2\7\u0149\2\2\u14d2\u14d3\5\u0450"+
		"\u0229\2\u14d3\u0511\3\2\2\2\u14d4\u14d5\7\u0136\2\2\u14d5\u14d6\5\u0514"+
		"\u028b\2\u14d6\u0513\3\2\2\2\u14d7\u14da\5\u0176\u00bc\2\u14d8\u14da\7"+
		":\2\2\u14d9\u14d7\3\2\2\2\u14d9\u14d8\3\2\2\2\u14da\u0515\3\2\2\2\u14db"+
		"\u14dc\7l\2\2\u14dc\u14e5\7\u014a\2\2\u14dd\u14e2\5\u051c\u028f\2\u14de"+
		"\u14df\7\u016d\2\2\u14df\u14e1\5\u051c\u028f\2\u14e0\u14de\3\2\2\2\u14e1"+
		"\u14e4\3\2\2\2\u14e2\u14e0\3\2\2\2\u14e2\u14e3\3\2\2\2\u14e3\u14e6\3\2"+
		"\2\2\u14e4\u14e2\3\2\2\2\u14e5\u14dd\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6"+
		"\u0517\3\2\2\2\u14e7\u14e9\7\n\2\2\u14e8\u14ea\7\6\2\2\u14e9\u14e8\3\2"+
		"\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb\u14ec\7\u014a\2\2\u14ec"+
		"\u14ed\5\u051a\u028e\2\u14ed\u0519\3\2\2\2\u14ee\u14f3\5\u051c\u028f\2"+
		"\u14ef\u14f0\7\u016d\2\2\u14f0\u14f2\5\u051c\u028f\2\u14f1\u14ef\3\2\2"+
		"\2\u14f2\u14f5\3\2\2\2\u14f3\u14f1\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u14f7"+
		"\3\2\2\2\u14f5\u14f3\3\2\2\2\u14f6\u14ee\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7"+
		"\u051b\3\2\2\2\u14f8\u14fc\5\u0520\u0291\2\u14f9\u14fc\5\u051e\u0290\2"+
		"\u14fa\u14fc\5\u0524\u0293\2\u14fb\u14f8\3\2\2\2\u14fb\u14f9\3\2\2\2\u14fb"+
		"\u14fa\3\2\2\2\u14fc\u051d\3\2\2\2\u14fd\u14fe\7\u0137\2\2\u14fe\u1502"+
		"\7\u00b7\2\2\u14ff\u1500\7\u0137\2\2\u1500\u1502\7\u014b\2\2\u1501\u14fd"+
		"\3\2\2\2\u1501\u14ff\3\2\2\2\u1502\u051f\3\2\2\2\u1503\u1504\7\u014c\2"+
		"\2\u1504\u1505\7\u014d\2\2\u1505\u1506\5\u0522\u0292\2\u1506\u0521\3\2"+
		"\2\2\u1507\u1508\7\u0137\2\2\u1508\u150f\7\u014e\2\2\u1509\u150a\7\u0137"+
		"\2\2\u150a\u150f\7\u014f\2\2\u150b\u150c\7\u00b0\2\2\u150c\u150f\7\u0137"+
		"\2\2\u150d\u150f\7\u0150\2\2\u150e\u1507\3\2\2\2\u150e\u1509\3\2\2\2\u150e"+
		"\u150b\3\2\2\2\u150e\u150d\3\2\2\2\u150f\u0523\3\2\2\2\u1510\u1511\7\u0151"+
		"\2\2\u1511\u1512\7\u0152\2\2\u1512\u1513\5\u0526\u0294\2\u1513\u0525\3"+
		"\2\2\2\u1514\u1515\5\u00d0i\2\u1515\u0527\3\2\2\2\u1516\u1517\7\n\2\2"+
		"\u1517\u1518\7\u0153\2\2\u1518\u1519\5\u052a\u0296\2\u1519\u151a\t#\2"+
		"\2\u151a\u0529\3\2\2\2\u151b\u1525\7\u008a\2\2\u151c\u1521\5N(\2\u151d"+
		"\u151e\7\u016d\2\2\u151e\u1520\5N(\2\u151f\u151d\3\2\2\2\u1520\u1523\3"+
		"\2\2\2\u1521\u151f\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1525\3\2\2\2\u1523"+
		"\u1521\3\2\2\2\u1524\u151b\3\2\2\2\u1524\u151c\3\2\2\2\u1525\u052b\3\2"+
		"\2\2\u1526\u1527\7\u0154\2\2\u1527\u1528\5\u052e\u0298\2\u1528\u052d\3"+
		"\2\2\2\u1529\u152a\5d\63\2\u152a\u052f\3\2\2\2\u152b\u152c\7\u0155\2\2"+
		"\u152c\u152d\7\u0154\2\2\u152d\u152e\5\u052e\u0298\2\u152e\u0531\3\2\2"+
		"\2\u152f\u1531\7\u0156\2\2\u1530\u1532\7\u0157\2\2\u1531\u1530\3\2\2\2"+
		"\u1531\u1532\3\2\2\2\u1532\u1538\3\2\2\2\u1533\u1535\7\u009d\2\2\u1534"+
		"\u1536\7\u00d5\2\2\u1535\u1534\3\2\2\2\u1535\u1536\3\2\2\2\u1536\u1537"+
		"\3\2\2\2\u1537\u1539\7\u0158\2\2\u1538\u1533\3\2\2\2\u1538\u1539\3\2\2"+
		"\2\u1539\u0533\3\2\2\2\u153a\u153c\7\u0159\2\2\u153b\u153d\7\u0157\2\2"+
		"\u153c\u153b\3\2\2\2\u153c\u153d\3\2\2\2\u153d\u1543\3\2\2\2\u153e\u1540"+
		"\7\u009d\2\2\u153f\u1541\7\u00d5\2\2\u1540\u153f\3\2\2\2\u1540\u1541\3"+
		"\2\2\2\u1541\u1542\3\2\2\2\u1542\u1544\7\u0158\2\2\u1543\u153e\3\2\2\2"+
		"\u1543\u1544\3\2\2\2\u1544\u1546\3\2\2\2\u1545\u1547\5\u0536\u029c\2\u1546"+
		"\u1545\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u0535\3\2\2\2\u1548\u1549\7\u00b6"+
		"\2\2\u1549\u154a\7\u0154\2\2\u154a\u154b\5\u052e\u0298\2\u154b\u0537\3"+
		"\2\2\2\u154c\u154d\5\u053a\u029e\2\u154d\u154e\7\u0173\2\2\u154e\u0539"+
		"\3\2\2\2\u154f\u1550\5\u053c\u029f\2\u1550\u053b\3\2\2\2\u1551\u1558\5"+
		"\u04ca\u0266\2\u1552\u1558\5\u053e\u02a0\2\u1553\u1558\5\u04d0\u0269\2"+
		"\u1554\u1558\5\u04fa\u027e\2\u1555\u1558\5\u04cc\u0267\2\u1556\u1558\5"+
		"\u04e0\u0271\2\u1557\u1551\3\2\2\2\u1557\u1552\3\2\2\2\u1557\u1553\3\2"+
		"\2\2\u1557\u1554\3\2\2\2\u1557\u1555\3\2\2\2\u1557\u1556\3\2\2\2\u1558"+
		"\u053d\3\2\2\2\u1559\u155a\5\u04b4\u025b\2\u155a\u053f\3\2\2\2\u155b\u155c"+
		"\5\34\17\2\u155c\u0541\3\2\2\2\u155d\u155e\7\u0172\2\2\u155e\u155f\5\34"+
		"\17\2\u155f\u0543\3\2\2\2\u1560\u1561\5\u0546\u02a4\2\u1561\u1562\7\u0169"+
		"\2\2\u1562\u1563\5\u0180\u00c1\2\u1563\u1564\7\u016a\2\2\u1564\u0545\3"+
		"\2\2\2\u1565\u1566\t$\2\2\u1566\u0547\3\2\2\2\u1567\u1568\7\u0163\2\2"+
		"\u1568\u1569\7\u0169\2\2\u1569\u156a\5\u054a\u02a6\2\u156a\u156b\7\u016d"+
		"\2\2\u156b\u156c\5\u054c\u02a7\2\u156c\u156d\7\u016a\2\2\u156d\u0549\3"+
		"\2\2\2\u156e\u156f\5\u0180\u00c1\2\u156f\u054b\3\2\2\2\u1570\u1571\5\u0180"+
		"\u00c1\2\u1571\u054d\3\2\2\2\u1572\u1573\7\u0164\2\2\u1573\u1574\7\u0169"+
		"\2\2\u1574\u1575\5\u0180\u00c1\2\u1575\u1576\7\u016a\2\2\u1576\u054f\3"+
		"\2\2\2\u0201\u0554\u0558\u0560\u0563\u0569\u056e\u0570\u0574\u0581\u058c"+
		"\u0590\u0599\u05a4\u05ab\u05b1\u05ca\u05d9\u05e2\u05ef\u0607\u060c\u0612"+
		"\u0615\u061b\u0620\u062d\u0635\u0639\u063b\u0642\u0645\u064c\u0653\u065a"+
		"\u066e\u0677\u0680\u0687\u0689\u0690\u069e\u06a7\u06ae\u06b0\u06b4\u06bb"+
		"\u06bf\u06c6\u06ca\u06d1\u06d5\u06db\u06e2\u06e7\u06ed\u06f1\u06f4\u06f8"+
		"\u0708\u070b\u0712\u0715\u0717\u071f\u0733\u073d\u0763\u076c\u0772\u0780"+
		"\u0782\u078b\u078f\u0793\u07a6\u07ac\u07b4\u07ba\u07be\u07c4\u07c7\u07cc"+
		"\u07d7\u07e1\u07e5\u07ef\u07f8\u0804\u080a\u0813\u0828\u0833\u083c\u083e"+
		"\u0842\u0850\u0857\u0862\u0865\u0869\u086f\u0873\u0879\u0887\u088f\u0895"+
		"\u0899\u089f\u08af\u08b3\u08b7\u08be\u08c1\u08c9\u08cc\u08df\u08e6\u08fb"+
		"\u08ff\u090c\u0910\u0922\u0926\u092c\u0936\u0940\u094a\u0969\u0972\u097a"+
		"\u0985\u0987\u0993\u0995\u0999\u099f\u09b4\u09b8\u09bf\u09c5\u09c9\u09d6"+
		"\u09db\u09e1\u09e5\u09e9\u09ed\u09fe\u0a0f\u0a16\u0a28\u0a2e\u0a83\u0a8d"+
		"\u0a92\u0a96\u0aa0\u0aa7\u0aab\u0ab8\u0ac1\u0ac5\u0ad7\u0add\u0ae1\u0ae5"+
		"\u0ae9\u0b05\u0b0b\u0b0f\u0b13\u0b17\u0b1f\u0b27\u0b2a\u0b2d\u0b40\u0b44"+
		"\u0b4f\u0b51\u0b59\u0b60\u0b65\u0b6e\u0b78\u0b7b\u0b7e\u0b8f\u0b9d\u0ba5"+
		"\u0ba7\u0bae\u0bb2\u0bbb\u0bc2\u0bcb\u0bd2\u0bd9\u0be0\u0beb\u0bf3\u0bf5"+
		"\u0bfe\u0c06\u0c08\u0c0c\u0c12\u0c15\u0c28\u0c33\u0c37\u0c3e\u0c41\u0c47"+
		"\u0c4b\u0c59\u0c5e\u0c6b\u0c77\u0c82\u0c86\u0c89\u0c93\u0c95\u0c9b\u0c9e"+
		"\u0ca6\u0cab\u0cb7\u0cc3\u0cd1\u0cdf\u0ce6\u0cfd\u0d04\u0d09\u0d0e\u0d12"+
		"\u0d16\u0d1a\u0d1e\u0d2a\u0d35\u0d3a\u0d3d\u0d40\u0d43\u0d4d\u0d54\u0d59"+
		"\u0d60\u0d65\u0d6b\u0d73\u0d78\u0d7f\u0d84\u0d86\u0d88\u0d8d\u0d95\u0da4"+
		"\u0da7\u0dae\u0db0\u0db4\u0dbb\u0dbf\u0dc6\u0dca\u0dd1\u0dd5\u0ddc\u0de0"+
		"\u0de7\u0de9\u0ded\u0df4\u0df6\u0df8\u0e04\u0e11\u0e28\u0e2e\u0e39\u0e42"+
		"\u0e4f\u0e5e\u0e67\u0e74\u0e76\u0e82\u0e8b\u0e93\u0e9a\u0e9e\u0ea5\u0eb2"+
		"\u0ec5\u0ecd\u0edd\u0eeb\u0eee\u0ef1\u0ef4\u0f01\u0f06\u0f0f\u0f15\u0f1c"+
		"\u0f2e\u0f3d\u0f41\u0f4c\u0f4f\u0f53\u0f5a\u0f61\u0f68\u0f6b\u0f77\u0f7c"+
		"\u0f80\u0f83\u0f86\u0f8a\u0f93\u0f9b\u0fa0\u0fa7\u0faa\u0fae\u0fb1\u0fb4"+
		"\u0fbc\u0fbe\u0fc4\u0fc7\u0fca\u0fd1\u0fd8\u0fdb\u0fde\u0fe2\u0fe7\u0ff2"+
		"\u1001\u1007\u100b\u1019\u1028\u103c\u1066\u1074\u1079\u107f\u1085\u108f"+
		"\u1096\u109b\u10a1\u10a7\u10b1\u10b7\u10c1\u10c8\u10d4\u10de\u10ee\u10f3"+
		"\u10f9\u1106\u110f\u1118\u1120\u1126\u112a\u113b\u1143\u1149\u1150\u115d"+
		"\u116e\u1171\u117a\u117f\u1182\u1195\u11a3\u11a7\u11af\u11b3\u11bc\u11c6"+
		"\u11d2\u11d7\u11e5\u11f9\u120f\u123a\u1243\u124d\u1250\u1259\u1266\u126b"+
		"\u127b\u127d\u1285\u1288\u128c\u1290\u1298\u129b\u12a7\u12aa\u12ad\u12b0"+
		"\u12b4\u12b7\u12ba\u12c0\u12c3\u12cc\u12d0\u12d4\u12d8\u12dc\u12de\u12e3"+
		"\u1303\u1318\u132b\u1334\u1339\u133c\u1346\u134f\u1352\u1356\u1359\u1360"+
		"\u1366\u136c\u1370\u1378\u137a\u1381\u1384\u1390\u1397\u139f\u13ab\u13b2"+
		"\u13b5\u13c2\u13d0\u13d3\u13d6\u13da\u13e0\u13e6\u13f2\u13f8\u13fb\u1403"+
		"\u1406\u1410\u141b\u141e\u142b\u142f\u1435\u143c\u1443\u1453\u1456\u1461"+
		"\u1468\u146d\u1470\u1484\u1487\u148a\u1490\u1497\u149f\u14a3\u14af\u14bc"+
		"\u14ca\u14cf\u14d9\u14e2\u14e5\u14e9\u14f3\u14f6\u14fb\u1501\u150e\u1521"+
		"\u1524\u1531\u1535\u1538\u153c\u1540\u1543\u1546\u1557";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}