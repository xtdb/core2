* Bibliography
** Columnar:
- [[https://www.cs.umd.edu/class/spring2015/cmsc724/abadi-column-stores.pdf][(Abadi) The Design and Implementation of Modern Columnar Store Systems]]
- [[https://web.stanford.edu/class/cs345d-01/rl/cstore.pdf][C-Store: A Column-oriented DBMS]]
- [[https://arxiv.org/pdf/2004.14471.pdf][Mainlining Databases: Supporting Fast Transactional Workloads on Universal Columnar Data File Formats]]
  - [[https://db.in.tum.de/~muehlbau/papers/mvcc.pdf][Fast Serializable Multi-Version Concurrency Controlfor Main-Memory Database Systems]]
  - [[https://www.cs.cmu.edu/~pavlo/courses/fall2013/static/papers/p731-sikka.pdf][Efficient Transaction Processing in SAP HANA Database –The End of a Column Store Myth]]

MonetDB/VectorWise:
- [[http://www.cs.cmu.edu/~natassa/courses/15-823/syllabus/papers/boncz99database.pdf][Database Architecture Optimized for the new Bottleneck: Memory Access]]
- [[https://strum355.netsoc.co/books/PDF/MonetDB-X100%20-%20Hyper-Pipelining%20Query%20Execution%20(CIDR%202005%20P19).pdf][MonetDB/X100: Hyper-Pipelining Query Execution]]
- [[https://pdfs.semanticscholar.org/3854/4aae01b27a3a429c2e3accd70cc932531136.pdf][Database Architecture Evolution: Mammals Flourished long before Dinosaurs became Extinct]]
- [[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.43.8552&rep=rep1&type=pdf][MIL Primitives for Querying a Fragmented World]]
- [[https://ir.cwi.nl/pub/18687/18687B.pdf][The Story of Vectorwise]] (BDA Keynote)
- [[https://www.monetdb.org/Assets/MonetDB-wiki/MonetDB-Insight.pdf][Open-source Database Technology Beyond Textbooks]] (presentation)

SingleStore (formerly MemSQL):
- https://www.singlestore.com/blog/linux-off-cpu-investigation/ - issues with =mmap=
- [[https://www.singlestore.com/blog/memsql-singlestore-then-there-was-one/][Erasing any apparent difference between today's rowstore and columnstore tables]]

** Separating Storage from Compute
blog posts:
- https://ajstorm.medium.com/separating-compute-and-storage-59def4f27d64
- https://www.teradata.co.uk/Trends/Cloud/The-Power-of-Separating-Cloud-Compute-and-Cloud-Storage
- https://www.vertica.com/blog/verticas-architectural-direction-separation-of-compute-and-storage/

papers:
- [[http://pages.cs.wisc.edu/~yxy/cs839-s20/papers/p2170-tan.pdf][Choosing A Cloud DBMS: Architectures and Tradeoffs]] - good intro, focuses on OLAP.
- [[https://people.csail.mit.edu/kraska/pub/sigmod08-s3.pdf][Building a Database on S3]] - accessible paper from 2008 that tries to directly map the buffer manager of old architectures to S3, uses SQS for logging and synchornisation between nodes.
- [[https://www.usenix.org/system/files/nsdi20-paper-vuppalapati.pdf][Building An Elastic Query Engine on Disaggregated Storage]] - describes Snowflake, which was directly built in this way, also summarised [[https://blog.acolyer.org/2020/03/09/snowflake/][here]].
- [[https://www.microsoft.com/en-us/research/uploads/prod/2019/05/socrates.pdf][Socrates: The New SQL Server in the Cloud]] - the Azure paper I posted yesterday.
- [[https://www.vertica.com/wp-content/uploads/2018/05/Vertica_EON_SIGMOD_Paper.pdf][Eon Mode: Bringing the Vertica Columnar Database to the Cloud]] - explains their journey from the old enterprise model to the cloud EON-mode.
- [[https://media.amazonwebservices.com/blog/2017/aurora-design-considerations-paper.pdf][Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases]] - stores the logs in S3, and all other data is derived from it.
- [[https://www.eecg.utoronto.ca/~ashvin/publications/hailstorm.pdf][Hailstorm: Disaggregated Compute and Storage for Distributed LSM-based Databases]] - more of a cloud LSM implementation paper.

** CMU Courses
- [[https://15445.courses.cs.cmu.edu/fall2020/schedule.html][Intro to Database Systems (Fall 2020)]]
- [[https://15721.courses.cs.cmu.edu/spring2020/schedule.html][Advanced Database Systems (Spring 2020)]]

** Temporal
- [[http://www2.cs.arizona.edu/~rts/tdbbook.pdf][Developing Time-Oriented Database Applications in SQL]] - Snodgrass book
- [[https://people.cs.aau.dk/~csj/Thesis/][Temporal Database Management]] - Jensen thesis
  - [[https://people.cs.aau.dk/~csj/Thesis/pdf/chapter2.pdf][Semantics of Time-Varying Information]] - Ch 2
  - [[https://people.cs.aau.dk/~csj/Thesis/pdf/chapter4.pdf][On the Semantics of 'Now' in Databases]] - Ch 4
    This suggests that using either 'until now' or 'forever' to represent unknown end times creates anomalies; recommends (and defines) 'until changed' semantics.
  - Implementation
    - [[https://people.cs.aau.dk/~csj/Thesis/pdf/chapter36.pdf][R-Tree Based Indexing of Now-Relative Bitemporal Data]] - Ch 36
    - [[https://people.cs.aau.dk/~csj/Thesis/pdf/chapter37.pdf][Light-Weight Indexing of General Bitemporal Data]] - Ch 37
- [[https://core.ac.uk/download/pdf/143854032.pdf][The POINT Approach to Represent now in Bitemporal Databases]], uses [[https://en.wikipedia.org/wiki/R*_tree][R* trees]]
  We represent vt/tt as areas in 2D space, and index them using spatial indexes.
  Implementing spatial indexes using Long/MAX_VALUE to denote 'still valid' is inefficient, because this creates big rectangles in vt/tt space.
  Spatial indexes perform better with smaller rectangles, because each level in the tree is represented by the bounding box of all of the points/lines/rectangles within.
  By implementing 'still valid' as start-vt=end-vt, this reduces the size of the bounding boxes.
  Cost is that queries then need to do a disjunction of 'rectangles that overlap ∨ points within', but this is offset in practice by more efficient use of the index.
  - [[https://drum.lib.umd.edu/bitstream/handle/1903/889/CS-TR-3764.pdf][Designing Access Methods for Bitemporal Databases]] advocates keeping two separate R*-trees - one for current (TT) data, one for historical
  - [[https://research-repository.griffith.edu.au/bitstream/handle/10072/58356/91581_1.pdf?sequence=1][Querying now-relative data]]
- [[http://www.cs.ucr.edu/~tsotras/cs236/W15/tempDB-survey.pdf][Comparison of Access Methods for Time-Evolving Data]]
- [[https://standards.iso.org/ittf/PubliclyAvailableStandards/c060394_ISO_IEC_TR_19075-2_2015.zip][ISO/IEC JTC 1/SC 32: SQL Technical Reports — Part 2: SQL Support for Time-Related Information]]
  time-related predicates:

  overlaps, equals, contains, precedes, succeeds, immediately precedes, immediately succeeds

  application time updates:

  More precisely, the effect of UPDATE statements that contain the FOR PORTION OF clause are as follows:
  1) Let FT be the first value and ST be the second value specified in the FOR PORTION OF clause.
  2) For each row R in the table that qualifies for update and whose application-time period overlaps with the
  period formed by FT and ST, let BPS be its application-time period start value, and let BPE be its application-
  time period end value.
  a) If BPS < FT and BPE > FT, then a copy of R with its application-time period end value set to FT is
  inserted.
  b) If BPS < ST and BPE > ST, then a copy of R with its application-time period start value set to ST is
  inserted.
  c) R is updated with its application-period start value set to the maximum of BPS and FT and the appli-
  cation-time end value set to the minimum of BPE and ST.

  application time deletes:

  More precisely, the effect of DELETE statements that contain the FOR PORTION OF clause are as follows:
  1) Let FT be the first value and ST be the second value specified in the FOR PORTION OF clause.
  2) For each row R in the table that qualifies for deletion and whose application-time period overlaps with the
  period formed by FT and ST, let BPS be its application-time period start value, and let BPE be its application-
  time period end value.
  a) If BPS < FT and BPE > FT, then a copy of R with its application-time period end value set to FT is
  inserted.
  b) If BPS < ST and BPE > ST, then a copy of R with its application-time period start value set to ST is
  inserted.
  c) R is deleted.

  system time tables:

  (suggested sys_end: 9999-12-31 23:59:59)

  INSERT into a system-versioned table automatically sets the value of Sys_start column to the transaction
  timestamp, a special value associated with every transaction, and sets the value of Sys_end column to the
  highest value of the column's data type.

  UPDATE and DELETE on system-versioned tables result in the automatic insertion of a historical system
  row for every current system row that is updated or deleted.

  An UPDATE statement on a system-versioned table first inserts a copy of the old row with its system-time
  period end time set to the transaction timestamp, indicating that the row ceased to be current as of the transaction
  timestamp. It then updates the row while changing its system-period start time to the transaction timestamp,
  indicating that the updated row to be the current system row as of the transaction timestamp.
- [[https://www2.cs.arizona.edu/~rts/pubs/ISDec04.pdf][Modification Semantics in Now-Relative Databases]] (Torp, Jensen, Snodgrass)
- [[https://www.researchgate.net/profile/Michael-Boehlen/publication/3892903_A_split_operator_for_now-relative_bitemporal_databases/links/5428352e0cf26120b7b56556/A-split-operator-for-now-relative-bitemporal-databases.pdf?origin=publication_detail][A split operator for now-relative bitemporal databases]]
- [[https://www2.cs.arizona.edu/~rts/pubs/TODS87.pdf][The Temporal Query Language TQuel]]
- [[https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/73726/eth-7496-01.pdf][TPC Bi-H specification]]
- [[https://opus.bibliothek.uni-augsburg.de/opus4/frontdoor/deliver/index/docId/59478/file/ssdbm2015-bitemporal-windows.pdf][Indexing Bi-temporal Windows]]

** Trees
- [[https://www.researchgate.net/profile/Susana-Ladra/publication/221580271_k2-Trees_for_Compact_Web_Graph_Representation/links/0fcfd51080b06db631000000/k2-Trees-for-Compact-Web-Graph-Representation.pdf?origin=publication_detail][k^{2}-trees for Compact Web Graph Representation]]
- [[https://en.wikipedia.org/wiki/K-d_tree][k-d tree]] (wikipedia)
- [[https://en.wikipedia.org/wiki/R*_tree][R* trees]]
- [[https://research-repository.griffith.edu.au/bitstream/handle/10072/43351/76130_1.pdf?sequence=1&isAllowed=y][TD-tree: A Triangular Decomposition Access Method for Temporal Data]] (POINT folks)
- [[https://openproceedings.org/2019/conf/edbt/EDBT19_paper_27.pdf][BB-Tree: A practical and efficient main-memory indexstructure for multidimensional workloads]]

** Array Programming
- [[https://www.eecg.utoronto.ca/~jzhu/csc326/readings/iverson.pdf][Notation as a Tool of Thought]]
- [[https://www.jsoftware.com/help/learning/contents.htm][Learning J]]
- [[https://code.kx.com/q4m3/][Q for Mortals - An introduction to q programming]]

** Query planning/SQL
- [[http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CFD3DCD1A3AECA50776F3A913BF541B4?doi=10.1.1.498.5779&rep=rep1&type=pdf][Execution Strategies for SQL Subqueries]]
- [[https://cs.ulb.ac.be/public/_media/teaching/infoh417/sql2alg_eng.pdf][Translating SQL into the Relational Algebra]]
- [[https://subs.emis.de/LNI/Proceedings/Proceedings241/383.pdf][Unnesting Arbitrary Queries]]
- [[http://db.in.tum.de/~freitag/papers/p1891-freitag.pdf][Adopting Worst-Case Optimal Joins in Relational Database Systems]]

** Misc
- [[http://nms.csail.mit.edu/~stavros/pubs/hstore.pdf][The End of an Architectural Era (It’s Time for a Complete Rewrite)]]
- [[https://arxiv.org/pdf/1610.09166.pdf][Push vs. Pull-Based Loop Fusion in Query Engines]]
- [[https://www.researchgate.net/publication/220225069_The_Grid_File_An_Adaptable_Symmetric_Multikey_File_Structure][The Grid File: An Adaptable, Symmetric Multikey File Structure]]
- [[https://arxiv.org/pdf/1912.01668.pdf][Learning Multi-dimensional Indexes]]
- [[https://www.w3.org/Data/events/data-ws-2019/assets/slides/KeithWHare-2.pdf][Creating Bridges: RDF, Property Graph and SQL]]
- [[https://partiql.org/assets/PartiQL-Specification.pdf][PartiQL Specification]]
