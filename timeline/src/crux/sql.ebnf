(* Table Expressions *)

with-exp = [with-spec] nonjoin-exp

with-spec = 'WITH' name-intro (<','> name-intro)*

name-intro = table-name 'AS' table-subquery

table-subquery = subquery

subquery = <'('> nonjoin-exp <')'>

nonjoin-exp = nonjoin-term
            | nonjoin-exp 'UNION' ['DISTINCT'] ['CORRESPONDING'] nonjoin-term
            | nonjoin-exp 'EXCEPT' ['DISTINCT'] ['CORRESPONDING'] nonjoin-term

nonjoin-term = nonjoin-primary
              | nonjoin-term 'INTERSECT' ['DISTINCT'] ['CORRESPONDING'] nonjoin-primary

nonjoin-primary = 'TABLE' table-name
                | table-selector
                | select-exp
                | <'('> nonjoin-exp <')'>

table-selector = 'VALUES' row-exp (<','> row-exp)*

row-exp = scalar-exp
        | row-selector
        | row-subquery

row-selector = ['ROW'] <'('> scalar-exp (<','> scalar-exp)* <')'>

row-subquery = subquery

select-exp = 'SELECT' ['DISTINCT'] ['*' | select-item (<','> select-item)*]
               'FROM' table-spec (<','> table-spec)*
                  ['WHERE' boolean-exp]
                    ['GROUP BY' column-name (<','> column-name)*]
                      ['HAVING' boolean-exp]
                        ['ORDER BY' sort-spec (<','> sort-spec)*]
                          ['LIMIT' #"\d+"]

select-item = scalar-exp [['AS'] column-name]
            | range-variable-name

table-spec = table-name [['AS'] range-variable-name]
           | ['LATERAL'] table-subquery ['AS'] range-variable-name
           | join-exp
           | <'('> join-exp <')'>

join-exp = table-spec 'CROSS JOIN' table-spec
         | table-spec 'NATURAL JOIN' table-spec
         | table-spec 'JOIN' table-spec 'ON' boolean-exp
         | table-spec 'JOIN' table-spec 'USING' <'('> column-name (<','> column-name)* <')'>

sort-spec = column-name ['DESC' | 'ASC']

(* Boolean Expressions *)

boolean-exp = boolean-term
            | boolean-exp 'OR' boolean-term

boolean-term = boolean-factor
             | boolean-term 'AND' boolean-factor

boolean-factor = ['NOT'] boolean-primary

boolean-primary = boolean-literal
                | boolean-variable-name
                | boolean-column-name
                | condition
                | <'('> boolean-exp <')'>

condition = simple-comparison-exp
          | between-exp
          | like-exp
          | in-exp
          | match-exp
          | all-or-any-exp
          | exists-exp
          | unique-exp

simple-comparison-exp = row-exp simple-comp-op row-exp

simple-comp-op = '=' | '<' | '<=' | '>' | '>=' | '<>'

between-exp = row-exp ['NOT'] 'BETWEEN' row-exp 'AND' row-exp

like-exp = scalar-exp ['NOT'] 'LIKE' scalar-exp ['ESCAPE' scalar-exp]

in-exp = row-exp ['NOT'] 'IN' table-subquery
       | row-exp ['NOT'] 'IN' <'('> row-exp (<','> row-exp)* <')'>

match-exp = row-exp 'MATCH' ['UNIQUE'] table-subquery

all-or-any-exp = row-exp simple-comp-op all-or-any table-subquery

all-or-any = 'ALL' | 'ANY' | 'SOME'

exists-exp = 'EXISTS' table-subquery

unique-exp = 'UNIQUE' table-subquery

(* Expressions *)

numeric-value-exp = term
                  | numeric-value-exp '+' term
                  | numeric-value-exp '-' term

term = factor
     | term '*' factor
     | term '/' factor

factor = ['-' | '+'] scalar-exp
       | <'('> numeric-value-exp <')'>

routine-invocation = identifier  <'('> scalar-exp (<','> scalar-exp)* <')'>

case-exp = 'CASE' [scalar-exp]
             'WHEN' boolean-exp
               'THEN' scalar-exp
                 ['ELSE' scalar-exp]
                   'END'

set-function-spec = 'COUNT' <'('> '*' <')'>
                  | set-function-type <'('> ['DISTINCT' | 'ALL'] scalar-exp <')'>

set-function-type = 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT'

scalar-exp = identifier
           | numeric-literal
           | string-literal
           | date-literal
           | boolean-literal
           | set-function-spec
           | numeric-value-exp
           | routine-invocation
           | case-exp

(* Literals *)

table-name = identifier

range-variable-name = identifier

boolean-variable-name = identifier

boolean-column-name = identifier

column-name = identifier

boolean-literal = 'TRUE' | 'FALSE'

numeric-literal = #"[-+]?\d*\.?\d+(E[-+]?\d+)?"

string-literal = #"('.*?')+"

date-literal = 'DATE' #"'\d+-\d+-\d+'"

identifier = !boolean-literal #"[a-zA-Z_][\w.]*"
